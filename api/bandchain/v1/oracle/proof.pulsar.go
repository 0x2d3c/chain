// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oracle

import (
	v1 "cosmossdk.io/api/oracle/v1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryProofRequest            protoreflect.MessageDescriptor
	fd_QueryProofRequest_request_id protoreflect.FieldDescriptor
	fd_QueryProofRequest_height     protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryProofRequest = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryProofRequest")
	fd_QueryProofRequest_request_id = md_QueryProofRequest.Fields().ByName("request_id")
	fd_QueryProofRequest_height = md_QueryProofRequest.Fields().ByName("height")
}

var _ protoreflect.Message = (*fastReflection_QueryProofRequest)(nil)

type fastReflection_QueryProofRequest QueryProofRequest

func (x *QueryProofRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryProofRequest)(x)
}

func (x *QueryProofRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryProofRequest_messageType fastReflection_QueryProofRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryProofRequest_messageType{}

type fastReflection_QueryProofRequest_messageType struct{}

func (x fastReflection_QueryProofRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryProofRequest)(nil)
}
func (x fastReflection_QueryProofRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryProofRequest)
}
func (x fastReflection_QueryProofRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryProofRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryProofRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryProofRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryProofRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryProofRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryProofRequest) New() protoreflect.Message {
	return new(fastReflection_QueryProofRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryProofRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryProofRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryProofRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestId)
		if !f(fd_QueryProofRequest_request_id, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_QueryProofRequest_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryProofRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		return x.RequestId != uint64(0)
	case "bandchain.v1.oracle.QueryProofRequest.height":
		return x.Height != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		x.RequestId = uint64(0)
	case "bandchain.v1.oracle.QueryProofRequest.height":
		x.Height = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryProofRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		value := x.RequestId
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.QueryProofRequest.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		x.RequestId = value.Uint()
	case "bandchain.v1.oracle.QueryProofRequest.height":
		x.Height = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		panic(fmt.Errorf("field request_id of message bandchain.v1.oracle.QueryProofRequest is not mutable"))
	case "bandchain.v1.oracle.QueryProofRequest.height":
		panic(fmt.Errorf("field height of message bandchain.v1.oracle.QueryProofRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryProofRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofRequest.request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.QueryProofRequest.height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryProofRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryProofRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryProofRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryProofRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryProofRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryProofRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestId))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryProofRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x10
		}
		if x.RequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryProofRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryProofRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				x.RequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryProofResponse        protoreflect.MessageDescriptor
	fd_QueryProofResponse_height protoreflect.FieldDescriptor
	fd_QueryProofResponse_result protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryProofResponse")
	fd_QueryProofResponse_height = md_QueryProofResponse.Fields().ByName("height")
	fd_QueryProofResponse_result = md_QueryProofResponse.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_QueryProofResponse)(nil)

type fastReflection_QueryProofResponse QueryProofResponse

func (x *QueryProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryProofResponse)(x)
}

func (x *QueryProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryProofResponse_messageType fastReflection_QueryProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryProofResponse_messageType{}

type fastReflection_QueryProofResponse_messageType struct{}

func (x fastReflection_QueryProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryProofResponse)(nil)
}
func (x fastReflection_QueryProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryProofResponse)
}
func (x fastReflection_QueryProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryProofResponse) New() protoreflect.Message {
	return new(fastReflection_QueryProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryProofResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_QueryProofResponse_height, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_QueryProofResponse_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.height":
		return x.Height != int64(0)
	case "bandchain.v1.oracle.QueryProofResponse.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.height":
		x.Height = int64(0)
	case "bandchain.v1.oracle.QueryProofResponse.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "bandchain.v1.oracle.QueryProofResponse.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.height":
		x.Height = value.Int()
	case "bandchain.v1.oracle.QueryProofResponse.result":
		x.Result = value.Message().Interface().(*SingleProofResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.result":
		if x.Result == nil {
			x.Result = new(SingleProofResponse)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "bandchain.v1.oracle.QueryProofResponse.height":
		panic(fmt.Errorf("field height of message bandchain.v1.oracle.QueryProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryProofResponse.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "bandchain.v1.oracle.QueryProofResponse.result":
		m := new(SingleProofResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &SingleProofResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryMultiProofRequest_1_list)(nil)

type _QueryMultiProofRequest_1_list struct {
	list *[]uint64
}

func (x *_QueryMultiProofRequest_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryMultiProofRequest_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_QueryMultiProofRequest_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_QueryMultiProofRequest_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryMultiProofRequest_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message QueryMultiProofRequest at list field RequestIds as it is not of Message kind"))
}

func (x *_QueryMultiProofRequest_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_QueryMultiProofRequest_1_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_QueryMultiProofRequest_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryMultiProofRequest             protoreflect.MessageDescriptor
	fd_QueryMultiProofRequest_request_ids protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryMultiProofRequest = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryMultiProofRequest")
	fd_QueryMultiProofRequest_request_ids = md_QueryMultiProofRequest.Fields().ByName("request_ids")
}

var _ protoreflect.Message = (*fastReflection_QueryMultiProofRequest)(nil)

type fastReflection_QueryMultiProofRequest QueryMultiProofRequest

func (x *QueryMultiProofRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryMultiProofRequest)(x)
}

func (x *QueryMultiProofRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryMultiProofRequest_messageType fastReflection_QueryMultiProofRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryMultiProofRequest_messageType{}

type fastReflection_QueryMultiProofRequest_messageType struct{}

func (x fastReflection_QueryMultiProofRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryMultiProofRequest)(nil)
}
func (x fastReflection_QueryMultiProofRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryMultiProofRequest)
}
func (x fastReflection_QueryMultiProofRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryMultiProofRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryMultiProofRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryMultiProofRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryMultiProofRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryMultiProofRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryMultiProofRequest) New() protoreflect.Message {
	return new(fastReflection_QueryMultiProofRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryMultiProofRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryMultiProofRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryMultiProofRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.RequestIds) != 0 {
		value := protoreflect.ValueOfList(&_QueryMultiProofRequest_1_list{list: &x.RequestIds})
		if !f(fd_QueryMultiProofRequest_request_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryMultiProofRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		return len(x.RequestIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		x.RequestIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryMultiProofRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		if len(x.RequestIds) == 0 {
			return protoreflect.ValueOfList(&_QueryMultiProofRequest_1_list{})
		}
		listValue := &_QueryMultiProofRequest_1_list{list: &x.RequestIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		lv := value.List()
		clv := lv.(*_QueryMultiProofRequest_1_list)
		x.RequestIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		if x.RequestIds == nil {
			x.RequestIds = []uint64{}
		}
		value := &_QueryMultiProofRequest_1_list{list: &x.RequestIds}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryMultiProofRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofRequest.request_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_QueryMultiProofRequest_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryMultiProofRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryMultiProofRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryMultiProofRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryMultiProofRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryMultiProofRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryMultiProofRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.RequestIds) > 0 {
			l = 0
			for _, e := range x.RequestIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryMultiProofRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RequestIds) > 0 {
			var pksize2 int
			for _, num := range x.RequestIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.RequestIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryMultiProofRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryMultiProofRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryMultiProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.RequestIds = append(x.RequestIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.RequestIds) == 0 {
						x.RequestIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.RequestIds = append(x.RequestIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryMultiProofResponse        protoreflect.MessageDescriptor
	fd_QueryMultiProofResponse_height protoreflect.FieldDescriptor
	fd_QueryMultiProofResponse_result protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryMultiProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryMultiProofResponse")
	fd_QueryMultiProofResponse_height = md_QueryMultiProofResponse.Fields().ByName("height")
	fd_QueryMultiProofResponse_result = md_QueryMultiProofResponse.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_QueryMultiProofResponse)(nil)

type fastReflection_QueryMultiProofResponse QueryMultiProofResponse

func (x *QueryMultiProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryMultiProofResponse)(x)
}

func (x *QueryMultiProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryMultiProofResponse_messageType fastReflection_QueryMultiProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryMultiProofResponse_messageType{}

type fastReflection_QueryMultiProofResponse_messageType struct{}

func (x fastReflection_QueryMultiProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryMultiProofResponse)(nil)
}
func (x fastReflection_QueryMultiProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryMultiProofResponse)
}
func (x fastReflection_QueryMultiProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryMultiProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryMultiProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryMultiProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryMultiProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryMultiProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryMultiProofResponse) New() protoreflect.Message {
	return new(fastReflection_QueryMultiProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryMultiProofResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryMultiProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryMultiProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_QueryMultiProofResponse_height, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_QueryMultiProofResponse_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryMultiProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		return x.Height != int64(0)
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		x.Height = int64(0)
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryMultiProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		x.Height = value.Int()
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		x.Result = value.Message().Interface().(*MultiProofResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		if x.Result == nil {
			x.Result = new(MultiProofResponse)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		panic(fmt.Errorf("field height of message bandchain.v1.oracle.QueryMultiProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryMultiProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryMultiProofResponse.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "bandchain.v1.oracle.QueryMultiProofResponse.result":
		m := new(MultiProofResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryMultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryMultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryMultiProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryMultiProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryMultiProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryMultiProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryMultiProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryMultiProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryMultiProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryMultiProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryMultiProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryMultiProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryMultiProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &MultiProofResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryRequestCountProofRequest protoreflect.MessageDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryRequestCountProofRequest = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryRequestCountProofRequest")
}

var _ protoreflect.Message = (*fastReflection_QueryRequestCountProofRequest)(nil)

type fastReflection_QueryRequestCountProofRequest QueryRequestCountProofRequest

func (x *QueryRequestCountProofRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryRequestCountProofRequest)(x)
}

func (x *QueryRequestCountProofRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryRequestCountProofRequest_messageType fastReflection_QueryRequestCountProofRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryRequestCountProofRequest_messageType{}

type fastReflection_QueryRequestCountProofRequest_messageType struct{}

func (x fastReflection_QueryRequestCountProofRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryRequestCountProofRequest)(nil)
}
func (x fastReflection_QueryRequestCountProofRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryRequestCountProofRequest)
}
func (x fastReflection_QueryRequestCountProofRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryRequestCountProofRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryRequestCountProofRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryRequestCountProofRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryRequestCountProofRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryRequestCountProofRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryRequestCountProofRequest) New() protoreflect.Message {
	return new(fastReflection_QueryRequestCountProofRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryRequestCountProofRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryRequestCountProofRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryRequestCountProofRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryRequestCountProofRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryRequestCountProofRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryRequestCountProofRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofRequest"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryRequestCountProofRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryRequestCountProofRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryRequestCountProofRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryRequestCountProofRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryRequestCountProofRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryRequestCountProofRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryRequestCountProofRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryRequestCountProofRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryRequestCountProofRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryRequestCountProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryRequestCountProofResponse        protoreflect.MessageDescriptor
	fd_QueryRequestCountProofResponse_height protoreflect.FieldDescriptor
	fd_QueryRequestCountProofResponse_result protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_QueryRequestCountProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("QueryRequestCountProofResponse")
	fd_QueryRequestCountProofResponse_height = md_QueryRequestCountProofResponse.Fields().ByName("height")
	fd_QueryRequestCountProofResponse_result = md_QueryRequestCountProofResponse.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_QueryRequestCountProofResponse)(nil)

type fastReflection_QueryRequestCountProofResponse QueryRequestCountProofResponse

func (x *QueryRequestCountProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryRequestCountProofResponse)(x)
}

func (x *QueryRequestCountProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryRequestCountProofResponse_messageType fastReflection_QueryRequestCountProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryRequestCountProofResponse_messageType{}

type fastReflection_QueryRequestCountProofResponse_messageType struct{}

func (x fastReflection_QueryRequestCountProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryRequestCountProofResponse)(nil)
}
func (x fastReflection_QueryRequestCountProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryRequestCountProofResponse)
}
func (x fastReflection_QueryRequestCountProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryRequestCountProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryRequestCountProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryRequestCountProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryRequestCountProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryRequestCountProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryRequestCountProofResponse) New() protoreflect.Message {
	return new(fastReflection_QueryRequestCountProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryRequestCountProofResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryRequestCountProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryRequestCountProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_QueryRequestCountProofResponse_height, value) {
			return
		}
	}
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_QueryRequestCountProofResponse_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryRequestCountProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		return x.Height != int64(0)
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		return x.Result != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		x.Height = int64(0)
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		x.Result = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryRequestCountProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		x.Height = value.Int()
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		x.Result = value.Message().Interface().(*CountProofResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		if x.Result == nil {
			x.Result = new(CountProofResponse)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		panic(fmt.Errorf("field height of message bandchain.v1.oracle.QueryRequestCountProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryRequestCountProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "bandchain.v1.oracle.QueryRequestCountProofResponse.result":
		m := new(CountProofResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.QueryRequestCountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.QueryRequestCountProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryRequestCountProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.QueryRequestCountProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryRequestCountProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryRequestCountProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryRequestCountProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryRequestCountProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryRequestCountProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryRequestCountProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryRequestCountProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryRequestCountProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryRequestCountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &CountProofResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SingleProofResponse                 protoreflect.MessageDescriptor
	fd_SingleProofResponse_proof           protoreflect.FieldDescriptor
	fd_SingleProofResponse_evm_proof_bytes protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_SingleProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("SingleProofResponse")
	fd_SingleProofResponse_proof = md_SingleProofResponse.Fields().ByName("proof")
	fd_SingleProofResponse_evm_proof_bytes = md_SingleProofResponse.Fields().ByName("evm_proof_bytes")
}

var _ protoreflect.Message = (*fastReflection_SingleProofResponse)(nil)

type fastReflection_SingleProofResponse SingleProofResponse

func (x *SingleProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SingleProofResponse)(x)
}

func (x *SingleProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SingleProofResponse_messageType fastReflection_SingleProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_SingleProofResponse_messageType{}

type fastReflection_SingleProofResponse_messageType struct{}

func (x fastReflection_SingleProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SingleProofResponse)(nil)
}
func (x fastReflection_SingleProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_SingleProofResponse)
}
func (x fastReflection_SingleProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SingleProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SingleProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_SingleProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SingleProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_SingleProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SingleProofResponse) New() protoreflect.Message {
	return new(fastReflection_SingleProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SingleProofResponse) Interface() protoreflect.ProtoMessage {
	return (*SingleProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SingleProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_SingleProofResponse_proof, value) {
			return
		}
	}
	if len(x.EvmProofBytes) != 0 {
		value := protoreflect.ValueOfBytes(x.EvmProofBytes)
		if !f(fd_SingleProofResponse_evm_proof_bytes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SingleProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		return x.Proof != nil
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		return len(x.EvmProofBytes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		x.Proof = nil
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		x.EvmProofBytes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SingleProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		value := x.EvmProofBytes
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		x.Proof = value.Message().Interface().(*SingleProof)
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		x.EvmProofBytes = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		if x.Proof == nil {
			x.Proof = new(SingleProof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		panic(fmt.Errorf("field evm_proof_bytes of message bandchain.v1.oracle.SingleProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SingleProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProofResponse.proof":
		m := new(SingleProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.SingleProofResponse.evm_proof_bytes":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SingleProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.SingleProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SingleProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SingleProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SingleProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SingleProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EvmProofBytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SingleProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EvmProofBytes) > 0 {
			i -= len(x.EvmProofBytes)
			copy(dAtA[i:], x.EvmProofBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvmProofBytes)))
			i--
			dAtA[i] = 0x12
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SingleProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SingleProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SingleProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &SingleProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvmProofBytes = append(x.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
				if x.EvmProofBytes == nil {
					x.EvmProofBytes = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MultiProofResponse                 protoreflect.MessageDescriptor
	fd_MultiProofResponse_proof           protoreflect.FieldDescriptor
	fd_MultiProofResponse_evm_proof_bytes protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_MultiProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("MultiProofResponse")
	fd_MultiProofResponse_proof = md_MultiProofResponse.Fields().ByName("proof")
	fd_MultiProofResponse_evm_proof_bytes = md_MultiProofResponse.Fields().ByName("evm_proof_bytes")
}

var _ protoreflect.Message = (*fastReflection_MultiProofResponse)(nil)

type fastReflection_MultiProofResponse MultiProofResponse

func (x *MultiProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MultiProofResponse)(x)
}

func (x *MultiProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MultiProofResponse_messageType fastReflection_MultiProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_MultiProofResponse_messageType{}

type fastReflection_MultiProofResponse_messageType struct{}

func (x fastReflection_MultiProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MultiProofResponse)(nil)
}
func (x fastReflection_MultiProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MultiProofResponse)
}
func (x fastReflection_MultiProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MultiProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MultiProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_MultiProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MultiProofResponse) New() protoreflect.Message {
	return new(fastReflection_MultiProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MultiProofResponse) Interface() protoreflect.ProtoMessage {
	return (*MultiProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MultiProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_MultiProofResponse_proof, value) {
			return
		}
	}
	if len(x.EvmProofBytes) != 0 {
		value := protoreflect.ValueOfBytes(x.EvmProofBytes)
		if !f(fd_MultiProofResponse_evm_proof_bytes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MultiProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		return x.Proof != nil
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		return len(x.EvmProofBytes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		x.Proof = nil
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		x.EvmProofBytes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MultiProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		value := x.EvmProofBytes
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		x.Proof = value.Message().Interface().(*MultiProof)
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		x.EvmProofBytes = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		if x.Proof == nil {
			x.Proof = new(MultiProof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		panic(fmt.Errorf("field evm_proof_bytes of message bandchain.v1.oracle.MultiProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MultiProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProofResponse.proof":
		m := new(MultiProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.MultiProofResponse.evm_proof_bytes":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MultiProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.MultiProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MultiProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MultiProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MultiProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MultiProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EvmProofBytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MultiProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EvmProofBytes) > 0 {
			i -= len(x.EvmProofBytes)
			copy(dAtA[i:], x.EvmProofBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvmProofBytes)))
			i--
			dAtA[i] = 0x12
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MultiProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &MultiProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvmProofBytes = append(x.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
				if x.EvmProofBytes == nil {
					x.EvmProofBytes = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CountProofResponse                 protoreflect.MessageDescriptor
	fd_CountProofResponse_proof           protoreflect.FieldDescriptor
	fd_CountProofResponse_evm_proof_bytes protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_CountProofResponse = File_bandchain_v1_oracle_proof_proto.Messages().ByName("CountProofResponse")
	fd_CountProofResponse_proof = md_CountProofResponse.Fields().ByName("proof")
	fd_CountProofResponse_evm_proof_bytes = md_CountProofResponse.Fields().ByName("evm_proof_bytes")
}

var _ protoreflect.Message = (*fastReflection_CountProofResponse)(nil)

type fastReflection_CountProofResponse CountProofResponse

func (x *CountProofResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CountProofResponse)(x)
}

func (x *CountProofResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CountProofResponse_messageType fastReflection_CountProofResponse_messageType
var _ protoreflect.MessageType = fastReflection_CountProofResponse_messageType{}

type fastReflection_CountProofResponse_messageType struct{}

func (x fastReflection_CountProofResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CountProofResponse)(nil)
}
func (x fastReflection_CountProofResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_CountProofResponse)
}
func (x fastReflection_CountProofResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CountProofResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CountProofResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_CountProofResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CountProofResponse) Type() protoreflect.MessageType {
	return _fastReflection_CountProofResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CountProofResponse) New() protoreflect.Message {
	return new(fastReflection_CountProofResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CountProofResponse) Interface() protoreflect.ProtoMessage {
	return (*CountProofResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CountProofResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_CountProofResponse_proof, value) {
			return
		}
	}
	if len(x.EvmProofBytes) != 0 {
		value := protoreflect.ValueOfBytes(x.EvmProofBytes)
		if !f(fd_CountProofResponse_evm_proof_bytes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CountProofResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		return x.Proof != nil
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		return len(x.EvmProofBytes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProofResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		x.Proof = nil
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		x.EvmProofBytes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CountProofResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		value := x.EvmProofBytes
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProofResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		x.Proof = value.Message().Interface().(*CountProof)
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		x.EvmProofBytes = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProofResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		if x.Proof == nil {
			x.Proof = new(CountProof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		panic(fmt.Errorf("field evm_proof_bytes of message bandchain.v1.oracle.CountProofResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CountProofResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProofResponse.proof":
		m := new(CountProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.CountProofResponse.evm_proof_bytes":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProofResponse"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProofResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CountProofResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.CountProofResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CountProofResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProofResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CountProofResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CountProofResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CountProofResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EvmProofBytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CountProofResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EvmProofBytes) > 0 {
			i -= len(x.EvmProofBytes)
			copy(dAtA[i:], x.EvmProofBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvmProofBytes)))
			i--
			dAtA[i] = 0x12
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CountProofResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountProofResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &CountProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvmProofBytes = append(x.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
				if x.EvmProofBytes == nil {
					x.EvmProofBytes = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SingleProof                   protoreflect.MessageDescriptor
	fd_SingleProof_block_height      protoreflect.FieldDescriptor
	fd_SingleProof_oracle_data_proof protoreflect.FieldDescriptor
	fd_SingleProof_block_relay_proof protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_SingleProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("SingleProof")
	fd_SingleProof_block_height = md_SingleProof.Fields().ByName("block_height")
	fd_SingleProof_oracle_data_proof = md_SingleProof.Fields().ByName("oracle_data_proof")
	fd_SingleProof_block_relay_proof = md_SingleProof.Fields().ByName("block_relay_proof")
}

var _ protoreflect.Message = (*fastReflection_SingleProof)(nil)

type fastReflection_SingleProof SingleProof

func (x *SingleProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SingleProof)(x)
}

func (x *SingleProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SingleProof_messageType fastReflection_SingleProof_messageType
var _ protoreflect.MessageType = fastReflection_SingleProof_messageType{}

type fastReflection_SingleProof_messageType struct{}

func (x fastReflection_SingleProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SingleProof)(nil)
}
func (x fastReflection_SingleProof_messageType) New() protoreflect.Message {
	return new(fastReflection_SingleProof)
}
func (x fastReflection_SingleProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SingleProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SingleProof) Descriptor() protoreflect.MessageDescriptor {
	return md_SingleProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SingleProof) Type() protoreflect.MessageType {
	return _fastReflection_SingleProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SingleProof) New() protoreflect.Message {
	return new(fastReflection_SingleProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SingleProof) Interface() protoreflect.ProtoMessage {
	return (*SingleProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SingleProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_SingleProof_block_height, value) {
			return
		}
	}
	if x.OracleDataProof != nil {
		value := protoreflect.ValueOfMessage(x.OracleDataProof.ProtoReflect())
		if !f(fd_SingleProof_oracle_data_proof, value) {
			return
		}
	}
	if x.BlockRelayProof != nil {
		value := protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
		if !f(fd_SingleProof_block_relay_proof, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SingleProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProof.block_height":
		return x.BlockHeight != uint64(0)
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		return x.OracleDataProof != nil
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		return x.BlockRelayProof != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProof.block_height":
		x.BlockHeight = uint64(0)
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		x.OracleDataProof = nil
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		x.BlockRelayProof = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SingleProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.SingleProof.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		value := x.OracleDataProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		value := x.BlockRelayProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProof.block_height":
		x.BlockHeight = value.Uint()
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		x.OracleDataProof = value.Message().Interface().(*OracleDataProof)
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		x.BlockRelayProof = value.Message().Interface().(*BlockRelayProof)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		if x.OracleDataProof == nil {
			x.OracleDataProof = new(OracleDataProof)
		}
		return protoreflect.ValueOfMessage(x.OracleDataProof.ProtoReflect())
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		if x.BlockRelayProof == nil {
			x.BlockRelayProof = new(BlockRelayProof)
		}
		return protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
	case "bandchain.v1.oracle.SingleProof.block_height":
		panic(fmt.Errorf("field block_height of message bandchain.v1.oracle.SingleProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SingleProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.SingleProof.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.SingleProof.oracle_data_proof":
		m := new(OracleDataProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.SingleProof.block_relay_proof":
		m := new(BlockRelayProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.SingleProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.SingleProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SingleProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.SingleProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SingleProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SingleProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SingleProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SingleProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SingleProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.OracleDataProof != nil {
			l = options.Size(x.OracleDataProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockRelayProof != nil {
			l = options.Size(x.BlockRelayProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SingleProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockRelayProof != nil {
			encoded, err := options.Marshal(x.BlockRelayProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.OracleDataProof != nil {
			encoded, err := options.Marshal(x.OracleDataProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SingleProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SingleProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SingleProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleDataProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OracleDataProof == nil {
					x.OracleDataProof = &OracleDataProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OracleDataProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BlockRelayProof == nil {
					x.BlockRelayProof = &BlockRelayProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BlockRelayProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MultiProof_2_list)(nil)

type _MultiProof_2_list struct {
	list *[]*OracleDataProof
}

func (x *_MultiProof_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MultiProof_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MultiProof_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleDataProof)
	(*x.list)[i] = concreteValue
}

func (x *_MultiProof_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleDataProof)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MultiProof_2_list) AppendMutable() protoreflect.Value {
	v := new(OracleDataProof)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MultiProof_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MultiProof_2_list) NewElement() protoreflect.Value {
	v := new(OracleDataProof)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MultiProof_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MultiProof                         protoreflect.MessageDescriptor
	fd_MultiProof_block_height            protoreflect.FieldDescriptor
	fd_MultiProof_oracle_data_multi_proof protoreflect.FieldDescriptor
	fd_MultiProof_block_relay_proof       protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_MultiProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("MultiProof")
	fd_MultiProof_block_height = md_MultiProof.Fields().ByName("block_height")
	fd_MultiProof_oracle_data_multi_proof = md_MultiProof.Fields().ByName("oracle_data_multi_proof")
	fd_MultiProof_block_relay_proof = md_MultiProof.Fields().ByName("block_relay_proof")
}

var _ protoreflect.Message = (*fastReflection_MultiProof)(nil)

type fastReflection_MultiProof MultiProof

func (x *MultiProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MultiProof)(x)
}

func (x *MultiProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MultiProof_messageType fastReflection_MultiProof_messageType
var _ protoreflect.MessageType = fastReflection_MultiProof_messageType{}

type fastReflection_MultiProof_messageType struct{}

func (x fastReflection_MultiProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MultiProof)(nil)
}
func (x fastReflection_MultiProof_messageType) New() protoreflect.Message {
	return new(fastReflection_MultiProof)
}
func (x fastReflection_MultiProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MultiProof) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MultiProof) Type() protoreflect.MessageType {
	return _fastReflection_MultiProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MultiProof) New() protoreflect.Message {
	return new(fastReflection_MultiProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MultiProof) Interface() protoreflect.ProtoMessage {
	return (*MultiProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MultiProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_MultiProof_block_height, value) {
			return
		}
	}
	if len(x.OracleDataMultiProof) != 0 {
		value := protoreflect.ValueOfList(&_MultiProof_2_list{list: &x.OracleDataMultiProof})
		if !f(fd_MultiProof_oracle_data_multi_proof, value) {
			return
		}
	}
	if x.BlockRelayProof != nil {
		value := protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
		if !f(fd_MultiProof_block_relay_proof, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MultiProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProof.block_height":
		return x.BlockHeight != uint64(0)
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		return len(x.OracleDataMultiProof) != 0
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		return x.BlockRelayProof != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProof.block_height":
		x.BlockHeight = uint64(0)
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		x.OracleDataMultiProof = nil
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		x.BlockRelayProof = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MultiProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.MultiProof.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		if len(x.OracleDataMultiProof) == 0 {
			return protoreflect.ValueOfList(&_MultiProof_2_list{})
		}
		listValue := &_MultiProof_2_list{list: &x.OracleDataMultiProof}
		return protoreflect.ValueOfList(listValue)
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		value := x.BlockRelayProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProof.block_height":
		x.BlockHeight = value.Uint()
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		lv := value.List()
		clv := lv.(*_MultiProof_2_list)
		x.OracleDataMultiProof = *clv.list
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		x.BlockRelayProof = value.Message().Interface().(*BlockRelayProof)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		if x.OracleDataMultiProof == nil {
			x.OracleDataMultiProof = []*OracleDataProof{}
		}
		value := &_MultiProof_2_list{list: &x.OracleDataMultiProof}
		return protoreflect.ValueOfList(value)
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		if x.BlockRelayProof == nil {
			x.BlockRelayProof = new(BlockRelayProof)
		}
		return protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
	case "bandchain.v1.oracle.MultiProof.block_height":
		panic(fmt.Errorf("field block_height of message bandchain.v1.oracle.MultiProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MultiProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiProof.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.MultiProof.oracle_data_multi_proof":
		list := []*OracleDataProof{}
		return protoreflect.ValueOfList(&_MultiProof_2_list{list: &list})
	case "bandchain.v1.oracle.MultiProof.block_relay_proof":
		m := new(BlockRelayProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MultiProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.MultiProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MultiProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MultiProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MultiProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MultiProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if len(x.OracleDataMultiProof) > 0 {
			for _, e := range x.OracleDataMultiProof {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.BlockRelayProof != nil {
			l = options.Size(x.BlockRelayProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MultiProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockRelayProof != nil {
			encoded, err := options.Marshal(x.BlockRelayProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OracleDataMultiProof) > 0 {
			for iNdEx := len(x.OracleDataMultiProof) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OracleDataMultiProof[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MultiProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleDataMultiProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleDataMultiProof = append(x.OracleDataMultiProof, &OracleDataProof{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OracleDataMultiProof[len(x.OracleDataMultiProof)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BlockRelayProof == nil {
					x.BlockRelayProof = &BlockRelayProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BlockRelayProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CountProof                   protoreflect.MessageDescriptor
	fd_CountProof_block_height      protoreflect.FieldDescriptor
	fd_CountProof_count_proof       protoreflect.FieldDescriptor
	fd_CountProof_block_relay_proof protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_CountProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("CountProof")
	fd_CountProof_block_height = md_CountProof.Fields().ByName("block_height")
	fd_CountProof_count_proof = md_CountProof.Fields().ByName("count_proof")
	fd_CountProof_block_relay_proof = md_CountProof.Fields().ByName("block_relay_proof")
}

var _ protoreflect.Message = (*fastReflection_CountProof)(nil)

type fastReflection_CountProof CountProof

func (x *CountProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CountProof)(x)
}

func (x *CountProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CountProof_messageType fastReflection_CountProof_messageType
var _ protoreflect.MessageType = fastReflection_CountProof_messageType{}

type fastReflection_CountProof_messageType struct{}

func (x fastReflection_CountProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CountProof)(nil)
}
func (x fastReflection_CountProof_messageType) New() protoreflect.Message {
	return new(fastReflection_CountProof)
}
func (x fastReflection_CountProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CountProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CountProof) Descriptor() protoreflect.MessageDescriptor {
	return md_CountProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CountProof) Type() protoreflect.MessageType {
	return _fastReflection_CountProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CountProof) New() protoreflect.Message {
	return new(fastReflection_CountProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CountProof) Interface() protoreflect.ProtoMessage {
	return (*CountProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CountProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_CountProof_block_height, value) {
			return
		}
	}
	if x.CountProof != nil {
		value := protoreflect.ValueOfMessage(x.CountProof.ProtoReflect())
		if !f(fd_CountProof_count_proof, value) {
			return
		}
	}
	if x.BlockRelayProof != nil {
		value := protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
		if !f(fd_CountProof_block_relay_proof, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CountProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProof.block_height":
		return x.BlockHeight != uint64(0)
	case "bandchain.v1.oracle.CountProof.count_proof":
		return x.CountProof != nil
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		return x.BlockRelayProof != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProof.block_height":
		x.BlockHeight = uint64(0)
	case "bandchain.v1.oracle.CountProof.count_proof":
		x.CountProof = nil
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		x.BlockRelayProof = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CountProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.CountProof.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.CountProof.count_proof":
		value := x.CountProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		value := x.BlockRelayProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProof.block_height":
		x.BlockHeight = value.Uint()
	case "bandchain.v1.oracle.CountProof.count_proof":
		x.CountProof = value.Message().Interface().(*RequestsCountProof)
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		x.BlockRelayProof = value.Message().Interface().(*BlockRelayProof)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProof.count_proof":
		if x.CountProof == nil {
			x.CountProof = new(RequestsCountProof)
		}
		return protoreflect.ValueOfMessage(x.CountProof.ProtoReflect())
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		if x.BlockRelayProof == nil {
			x.BlockRelayProof = new(BlockRelayProof)
		}
		return protoreflect.ValueOfMessage(x.BlockRelayProof.ProtoReflect())
	case "bandchain.v1.oracle.CountProof.block_height":
		panic(fmt.Errorf("field block_height of message bandchain.v1.oracle.CountProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CountProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CountProof.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.CountProof.count_proof":
		m := new(RequestsCountProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.CountProof.block_relay_proof":
		m := new(BlockRelayProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CountProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CountProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.CountProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CountProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CountProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CountProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CountProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.CountProof != nil {
			l = options.Size(x.CountProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockRelayProof != nil {
			l = options.Size(x.BlockRelayProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CountProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockRelayProof != nil {
			encoded, err := options.Marshal(x.BlockRelayProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.CountProof != nil {
			encoded, err := options.Marshal(x.CountProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CountProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CountProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CountProof == nil {
					x.CountProof = &RequestsCountProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CountProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BlockRelayProof == nil {
					x.BlockRelayProof = &BlockRelayProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BlockRelayProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OracleDataProof_3_list)(nil)

type _OracleDataProof_3_list struct {
	list *[]*IAVLMerklePath
}

func (x *_OracleDataProof_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OracleDataProof_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OracleDataProof_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IAVLMerklePath)
	(*x.list)[i] = concreteValue
}

func (x *_OracleDataProof_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IAVLMerklePath)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OracleDataProof_3_list) AppendMutable() protoreflect.Value {
	v := new(IAVLMerklePath)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleDataProof_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OracleDataProof_3_list) NewElement() protoreflect.Value {
	v := new(IAVLMerklePath)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleDataProof_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OracleDataProof              protoreflect.MessageDescriptor
	fd_OracleDataProof_result       protoreflect.FieldDescriptor
	fd_OracleDataProof_version      protoreflect.FieldDescriptor
	fd_OracleDataProof_merkle_paths protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_OracleDataProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("OracleDataProof")
	fd_OracleDataProof_result = md_OracleDataProof.Fields().ByName("result")
	fd_OracleDataProof_version = md_OracleDataProof.Fields().ByName("version")
	fd_OracleDataProof_merkle_paths = md_OracleDataProof.Fields().ByName("merkle_paths")
}

var _ protoreflect.Message = (*fastReflection_OracleDataProof)(nil)

type fastReflection_OracleDataProof OracleDataProof

func (x *OracleDataProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OracleDataProof)(x)
}

func (x *OracleDataProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OracleDataProof_messageType fastReflection_OracleDataProof_messageType
var _ protoreflect.MessageType = fastReflection_OracleDataProof_messageType{}

type fastReflection_OracleDataProof_messageType struct{}

func (x fastReflection_OracleDataProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OracleDataProof)(nil)
}
func (x fastReflection_OracleDataProof_messageType) New() protoreflect.Message {
	return new(fastReflection_OracleDataProof)
}
func (x fastReflection_OracleDataProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleDataProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OracleDataProof) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleDataProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OracleDataProof) Type() protoreflect.MessageType {
	return _fastReflection_OracleDataProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OracleDataProof) New() protoreflect.Message {
	return new(fastReflection_OracleDataProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OracleDataProof) Interface() protoreflect.ProtoMessage {
	return (*OracleDataProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OracleDataProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Result != nil {
		value := protoreflect.ValueOfMessage(x.Result.ProtoReflect())
		if !f(fd_OracleDataProof_result, value) {
			return
		}
	}
	if x.Version != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Version)
		if !f(fd_OracleDataProof_version, value) {
			return
		}
	}
	if len(x.MerklePaths) != 0 {
		value := protoreflect.ValueOfList(&_OracleDataProof_3_list{list: &x.MerklePaths})
		if !f(fd_OracleDataProof_merkle_paths, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OracleDataProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		return x.Result != nil
	case "bandchain.v1.oracle.OracleDataProof.version":
		return x.Version != uint64(0)
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		return len(x.MerklePaths) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleDataProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		x.Result = nil
	case "bandchain.v1.oracle.OracleDataProof.version":
		x.Version = uint64(0)
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		x.MerklePaths = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OracleDataProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		value := x.Result
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.OracleDataProof.version":
		value := x.Version
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		if len(x.MerklePaths) == 0 {
			return protoreflect.ValueOfList(&_OracleDataProof_3_list{})
		}
		listValue := &_OracleDataProof_3_list{list: &x.MerklePaths}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleDataProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		x.Result = value.Message().Interface().(*v1.Result)
	case "bandchain.v1.oracle.OracleDataProof.version":
		x.Version = value.Uint()
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		lv := value.List()
		clv := lv.(*_OracleDataProof_3_list)
		x.MerklePaths = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleDataProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		if x.Result == nil {
			x.Result = new(v1.Result)
		}
		return protoreflect.ValueOfMessage(x.Result.ProtoReflect())
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		if x.MerklePaths == nil {
			x.MerklePaths = []*IAVLMerklePath{}
		}
		value := &_OracleDataProof_3_list{list: &x.MerklePaths}
		return protoreflect.ValueOfList(value)
	case "bandchain.v1.oracle.OracleDataProof.version":
		panic(fmt.Errorf("field version of message bandchain.v1.oracle.OracleDataProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OracleDataProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.OracleDataProof.result":
		m := new(v1.Result)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.OracleDataProof.version":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.OracleDataProof.merkle_paths":
		list := []*IAVLMerklePath{}
		return protoreflect.ValueOfList(&_OracleDataProof_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.OracleDataProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.OracleDataProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OracleDataProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.OracleDataProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OracleDataProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleDataProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OracleDataProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OracleDataProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OracleDataProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Result != nil {
			l = options.Size(x.Result)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Version != 0 {
			n += 1 + runtime.Sov(uint64(x.Version))
		}
		if len(x.MerklePaths) > 0 {
			for _, e := range x.MerklePaths {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OracleDataProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MerklePaths) > 0 {
			for iNdEx := len(x.MerklePaths) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MerklePaths[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.Version != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Version))
			i--
			dAtA[i] = 0x10
		}
		if x.Result != nil {
			encoded, err := options.Marshal(x.Result)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OracleDataProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleDataProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleDataProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Result == nil {
					x.Result = &v1.Result{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Result); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				x.Version = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Version |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MerklePaths", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MerklePaths = append(x.MerklePaths, &IAVLMerklePath{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MerklePaths[len(x.MerklePaths)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IAVLMerklePath                  protoreflect.MessageDescriptor
	fd_IAVLMerklePath_is_data_on_right protoreflect.FieldDescriptor
	fd_IAVLMerklePath_subtree_height   protoreflect.FieldDescriptor
	fd_IAVLMerklePath_subtree_size     protoreflect.FieldDescriptor
	fd_IAVLMerklePath_subtree_version  protoreflect.FieldDescriptor
	fd_IAVLMerklePath_sibling_hash     protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_IAVLMerklePath = File_bandchain_v1_oracle_proof_proto.Messages().ByName("IAVLMerklePath")
	fd_IAVLMerklePath_is_data_on_right = md_IAVLMerklePath.Fields().ByName("is_data_on_right")
	fd_IAVLMerklePath_subtree_height = md_IAVLMerklePath.Fields().ByName("subtree_height")
	fd_IAVLMerklePath_subtree_size = md_IAVLMerklePath.Fields().ByName("subtree_size")
	fd_IAVLMerklePath_subtree_version = md_IAVLMerklePath.Fields().ByName("subtree_version")
	fd_IAVLMerklePath_sibling_hash = md_IAVLMerklePath.Fields().ByName("sibling_hash")
}

var _ protoreflect.Message = (*fastReflection_IAVLMerklePath)(nil)

type fastReflection_IAVLMerklePath IAVLMerklePath

func (x *IAVLMerklePath) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IAVLMerklePath)(x)
}

func (x *IAVLMerklePath) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IAVLMerklePath_messageType fastReflection_IAVLMerklePath_messageType
var _ protoreflect.MessageType = fastReflection_IAVLMerklePath_messageType{}

type fastReflection_IAVLMerklePath_messageType struct{}

func (x fastReflection_IAVLMerklePath_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IAVLMerklePath)(nil)
}
func (x fastReflection_IAVLMerklePath_messageType) New() protoreflect.Message {
	return new(fastReflection_IAVLMerklePath)
}
func (x fastReflection_IAVLMerklePath_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IAVLMerklePath
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IAVLMerklePath) Descriptor() protoreflect.MessageDescriptor {
	return md_IAVLMerklePath
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IAVLMerklePath) Type() protoreflect.MessageType {
	return _fastReflection_IAVLMerklePath_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IAVLMerklePath) New() protoreflect.Message {
	return new(fastReflection_IAVLMerklePath)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IAVLMerklePath) Interface() protoreflect.ProtoMessage {
	return (*IAVLMerklePath)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IAVLMerklePath) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.IsDataOnRight != false {
		value := protoreflect.ValueOfBool(x.IsDataOnRight)
		if !f(fd_IAVLMerklePath_is_data_on_right, value) {
			return
		}
	}
	if x.SubtreeHeight != uint32(0) {
		value := protoreflect.ValueOfUint32(x.SubtreeHeight)
		if !f(fd_IAVLMerklePath_subtree_height, value) {
			return
		}
	}
	if x.SubtreeSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubtreeSize)
		if !f(fd_IAVLMerklePath_subtree_size, value) {
			return
		}
	}
	if x.SubtreeVersion != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubtreeVersion)
		if !f(fd_IAVLMerklePath_subtree_version, value) {
			return
		}
	}
	if len(x.SiblingHash) != 0 {
		value := protoreflect.ValueOfBytes(x.SiblingHash)
		if !f(fd_IAVLMerklePath_sibling_hash, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IAVLMerklePath) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		return x.IsDataOnRight != false
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		return x.SubtreeHeight != uint32(0)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		return x.SubtreeSize != uint64(0)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		return x.SubtreeVersion != uint64(0)
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		return len(x.SiblingHash) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IAVLMerklePath) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		x.IsDataOnRight = false
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		x.SubtreeHeight = uint32(0)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		x.SubtreeSize = uint64(0)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		x.SubtreeVersion = uint64(0)
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		x.SiblingHash = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IAVLMerklePath) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		value := x.IsDataOnRight
		return protoreflect.ValueOfBool(value)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		value := x.SubtreeHeight
		return protoreflect.ValueOfUint32(value)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		value := x.SubtreeSize
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		value := x.SubtreeVersion
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		value := x.SiblingHash
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IAVLMerklePath) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		x.IsDataOnRight = value.Bool()
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		x.SubtreeHeight = uint32(value.Uint())
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		x.SubtreeSize = value.Uint()
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		x.SubtreeVersion = value.Uint()
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		x.SiblingHash = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IAVLMerklePath) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		panic(fmt.Errorf("field is_data_on_right of message bandchain.v1.oracle.IAVLMerklePath is not mutable"))
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		panic(fmt.Errorf("field subtree_height of message bandchain.v1.oracle.IAVLMerklePath is not mutable"))
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		panic(fmt.Errorf("field subtree_size of message bandchain.v1.oracle.IAVLMerklePath is not mutable"))
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		panic(fmt.Errorf("field subtree_version of message bandchain.v1.oracle.IAVLMerklePath is not mutable"))
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		panic(fmt.Errorf("field sibling_hash of message bandchain.v1.oracle.IAVLMerklePath is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IAVLMerklePath) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.IAVLMerklePath.is_data_on_right":
		return protoreflect.ValueOfBool(false)
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_height":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_size":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.IAVLMerklePath.subtree_version":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.IAVLMerklePath.sibling_hash":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.IAVLMerklePath"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.IAVLMerklePath does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IAVLMerklePath) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.IAVLMerklePath", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IAVLMerklePath) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IAVLMerklePath) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IAVLMerklePath) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IAVLMerklePath) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IAVLMerklePath)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.IsDataOnRight {
			n += 2
		}
		if x.SubtreeHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.SubtreeHeight))
		}
		if x.SubtreeSize != 0 {
			n += 1 + runtime.Sov(uint64(x.SubtreeSize))
		}
		if x.SubtreeVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.SubtreeVersion))
		}
		l = len(x.SiblingHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IAVLMerklePath)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SiblingHash) > 0 {
			i -= len(x.SiblingHash)
			copy(dAtA[i:], x.SiblingHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SiblingHash)))
			i--
			dAtA[i] = 0x2a
		}
		if x.SubtreeVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubtreeVersion))
			i--
			dAtA[i] = 0x20
		}
		if x.SubtreeSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubtreeSize))
			i--
			dAtA[i] = 0x18
		}
		if x.SubtreeHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubtreeHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.IsDataOnRight {
			i--
			if x.IsDataOnRight {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IAVLMerklePath)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IAVLMerklePath: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IAVLMerklePath: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsDataOnRight", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsDataOnRight = bool(v != 0)
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubtreeHeight", wireType)
				}
				x.SubtreeHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubtreeHeight |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
				}
				x.SubtreeSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubtreeSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubtreeVersion", wireType)
				}
				x.SubtreeVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubtreeVersion |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SiblingHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SiblingHash = append(x.SiblingHash[:0], dAtA[iNdEx:postIndex]...)
				if x.SiblingHash == nil {
					x.SiblingHash = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_BlockRelayProof_4_list)(nil)

type _BlockRelayProof_4_list struct {
	list *[]*TMSignature
}

func (x *_BlockRelayProof_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlockRelayProof_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BlockRelayProof_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TMSignature)
	(*x.list)[i] = concreteValue
}

func (x *_BlockRelayProof_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TMSignature)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlockRelayProof_4_list) AppendMutable() protoreflect.Value {
	v := new(TMSignature)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BlockRelayProof_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BlockRelayProof_4_list) NewElement() protoreflect.Value {
	v := new(TMSignature)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BlockRelayProof_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BlockRelayProof                           protoreflect.MessageDescriptor
	fd_BlockRelayProof_multi_store_proof         protoreflect.FieldDescriptor
	fd_BlockRelayProof_block_header_merkle_parts protoreflect.FieldDescriptor
	fd_BlockRelayProof_common_encoded_vote_part  protoreflect.FieldDescriptor
	fd_BlockRelayProof_signatures                protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_BlockRelayProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("BlockRelayProof")
	fd_BlockRelayProof_multi_store_proof = md_BlockRelayProof.Fields().ByName("multi_store_proof")
	fd_BlockRelayProof_block_header_merkle_parts = md_BlockRelayProof.Fields().ByName("block_header_merkle_parts")
	fd_BlockRelayProof_common_encoded_vote_part = md_BlockRelayProof.Fields().ByName("common_encoded_vote_part")
	fd_BlockRelayProof_signatures = md_BlockRelayProof.Fields().ByName("signatures")
}

var _ protoreflect.Message = (*fastReflection_BlockRelayProof)(nil)

type fastReflection_BlockRelayProof BlockRelayProof

func (x *BlockRelayProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlockRelayProof)(x)
}

func (x *BlockRelayProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlockRelayProof_messageType fastReflection_BlockRelayProof_messageType
var _ protoreflect.MessageType = fastReflection_BlockRelayProof_messageType{}

type fastReflection_BlockRelayProof_messageType struct{}

func (x fastReflection_BlockRelayProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlockRelayProof)(nil)
}
func (x fastReflection_BlockRelayProof_messageType) New() protoreflect.Message {
	return new(fastReflection_BlockRelayProof)
}
func (x fastReflection_BlockRelayProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockRelayProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlockRelayProof) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockRelayProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlockRelayProof) Type() protoreflect.MessageType {
	return _fastReflection_BlockRelayProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlockRelayProof) New() protoreflect.Message {
	return new(fastReflection_BlockRelayProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlockRelayProof) Interface() protoreflect.ProtoMessage {
	return (*BlockRelayProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlockRelayProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MultiStoreProof != nil {
		value := protoreflect.ValueOfMessage(x.MultiStoreProof.ProtoReflect())
		if !f(fd_BlockRelayProof_multi_store_proof, value) {
			return
		}
	}
	if x.BlockHeaderMerkleParts != nil {
		value := protoreflect.ValueOfMessage(x.BlockHeaderMerkleParts.ProtoReflect())
		if !f(fd_BlockRelayProof_block_header_merkle_parts, value) {
			return
		}
	}
	if x.CommonEncodedVotePart != nil {
		value := protoreflect.ValueOfMessage(x.CommonEncodedVotePart.ProtoReflect())
		if !f(fd_BlockRelayProof_common_encoded_vote_part, value) {
			return
		}
	}
	if len(x.Signatures) != 0 {
		value := protoreflect.ValueOfList(&_BlockRelayProof_4_list{list: &x.Signatures})
		if !f(fd_BlockRelayProof_signatures, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlockRelayProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		return x.MultiStoreProof != nil
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		return x.BlockHeaderMerkleParts != nil
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		return x.CommonEncodedVotePart != nil
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		return len(x.Signatures) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockRelayProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		x.MultiStoreProof = nil
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		x.BlockHeaderMerkleParts = nil
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		x.CommonEncodedVotePart = nil
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		x.Signatures = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlockRelayProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		value := x.MultiStoreProof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		value := x.BlockHeaderMerkleParts
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		value := x.CommonEncodedVotePart
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		if len(x.Signatures) == 0 {
			return protoreflect.ValueOfList(&_BlockRelayProof_4_list{})
		}
		listValue := &_BlockRelayProof_4_list{list: &x.Signatures}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockRelayProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		x.MultiStoreProof = value.Message().Interface().(*MultiStoreProof)
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		x.BlockHeaderMerkleParts = value.Message().Interface().(*BlockHeaderMerkleParts)
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		x.CommonEncodedVotePart = value.Message().Interface().(*CommonEncodedVotePart)
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		lv := value.List()
		clv := lv.(*_BlockRelayProof_4_list)
		x.Signatures = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockRelayProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		if x.MultiStoreProof == nil {
			x.MultiStoreProof = new(MultiStoreProof)
		}
		return protoreflect.ValueOfMessage(x.MultiStoreProof.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		if x.BlockHeaderMerkleParts == nil {
			x.BlockHeaderMerkleParts = new(BlockHeaderMerkleParts)
		}
		return protoreflect.ValueOfMessage(x.BlockHeaderMerkleParts.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		if x.CommonEncodedVotePart == nil {
			x.CommonEncodedVotePart = new(CommonEncodedVotePart)
		}
		return protoreflect.ValueOfMessage(x.CommonEncodedVotePart.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		if x.Signatures == nil {
			x.Signatures = []*TMSignature{}
		}
		value := &_BlockRelayProof_4_list{list: &x.Signatures}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlockRelayProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockRelayProof.multi_store_proof":
		m := new(MultiStoreProof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts":
		m := new(BlockHeaderMerkleParts)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part":
		m := new(CommonEncodedVotePart)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bandchain.v1.oracle.BlockRelayProof.signatures":
		list := []*TMSignature{}
		return protoreflect.ValueOfList(&_BlockRelayProof_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockRelayProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockRelayProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlockRelayProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.BlockRelayProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlockRelayProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockRelayProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlockRelayProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlockRelayProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlockRelayProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MultiStoreProof != nil {
			l = options.Size(x.MultiStoreProof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeaderMerkleParts != nil {
			l = options.Size(x.BlockHeaderMerkleParts)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CommonEncodedVotePart != nil {
			l = options.Size(x.CommonEncodedVotePart)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Signatures) > 0 {
			for _, e := range x.Signatures {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlockRelayProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signatures) > 0 {
			for iNdEx := len(x.Signatures) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Signatures[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.CommonEncodedVotePart != nil {
			encoded, err := options.Marshal(x.CommonEncodedVotePart)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.BlockHeaderMerkleParts != nil {
			encoded, err := options.Marshal(x.BlockHeaderMerkleParts)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.MultiStoreProof != nil {
			encoded, err := options.Marshal(x.MultiStoreProof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlockRelayProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockRelayProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockRelayProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MultiStoreProof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MultiStoreProof == nil {
					x.MultiStoreProof = &MultiStoreProof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MultiStoreProof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeaderMerkleParts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BlockHeaderMerkleParts == nil {
					x.BlockHeaderMerkleParts = &BlockHeaderMerkleParts{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BlockHeaderMerkleParts); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommonEncodedVotePart", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CommonEncodedVotePart == nil {
					x.CommonEncodedVotePart = &CommonEncodedVotePart{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CommonEncodedVotePart); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signatures = append(x.Signatures, &TMSignature{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Signatures[len(x.Signatures)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MultiStoreProof                                      protoreflect.MessageDescriptor
	fd_MultiStoreProof_oracle_iavl_state_hash               protoreflect.FieldDescriptor
	fd_MultiStoreProof_mint_store_merkle_hash               protoreflect.FieldDescriptor
	fd_MultiStoreProof_ibc_to_icahost_stores_merkle_hash    protoreflect.FieldDescriptor
	fd_MultiStoreProof_feegrant_to_group_stores_merkle_hash protoreflect.FieldDescriptor
	fd_MultiStoreProof_auth_to_evidence_stores_merkle_hash  protoreflect.FieldDescriptor
	fd_MultiStoreProof_params_to_upgrade_stores_merkle_hash protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_MultiStoreProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("MultiStoreProof")
	fd_MultiStoreProof_oracle_iavl_state_hash = md_MultiStoreProof.Fields().ByName("oracle_iavl_state_hash")
	fd_MultiStoreProof_mint_store_merkle_hash = md_MultiStoreProof.Fields().ByName("mint_store_merkle_hash")
	fd_MultiStoreProof_ibc_to_icahost_stores_merkle_hash = md_MultiStoreProof.Fields().ByName("ibc_to_icahost_stores_merkle_hash")
	fd_MultiStoreProof_feegrant_to_group_stores_merkle_hash = md_MultiStoreProof.Fields().ByName("feegrant_to_group_stores_merkle_hash")
	fd_MultiStoreProof_auth_to_evidence_stores_merkle_hash = md_MultiStoreProof.Fields().ByName("auth_to_evidence_stores_merkle_hash")
	fd_MultiStoreProof_params_to_upgrade_stores_merkle_hash = md_MultiStoreProof.Fields().ByName("params_to_upgrade_stores_merkle_hash")
}

var _ protoreflect.Message = (*fastReflection_MultiStoreProof)(nil)

type fastReflection_MultiStoreProof MultiStoreProof

func (x *MultiStoreProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MultiStoreProof)(x)
}

func (x *MultiStoreProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MultiStoreProof_messageType fastReflection_MultiStoreProof_messageType
var _ protoreflect.MessageType = fastReflection_MultiStoreProof_messageType{}

type fastReflection_MultiStoreProof_messageType struct{}

func (x fastReflection_MultiStoreProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MultiStoreProof)(nil)
}
func (x fastReflection_MultiStoreProof_messageType) New() protoreflect.Message {
	return new(fastReflection_MultiStoreProof)
}
func (x fastReflection_MultiStoreProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiStoreProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MultiStoreProof) Descriptor() protoreflect.MessageDescriptor {
	return md_MultiStoreProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MultiStoreProof) Type() protoreflect.MessageType {
	return _fastReflection_MultiStoreProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MultiStoreProof) New() protoreflect.Message {
	return new(fastReflection_MultiStoreProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MultiStoreProof) Interface() protoreflect.ProtoMessage {
	return (*MultiStoreProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MultiStoreProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.OracleIavlStateHash) != 0 {
		value := protoreflect.ValueOfBytes(x.OracleIavlStateHash)
		if !f(fd_MultiStoreProof_oracle_iavl_state_hash, value) {
			return
		}
	}
	if len(x.MintStoreMerkleHash) != 0 {
		value := protoreflect.ValueOfBytes(x.MintStoreMerkleHash)
		if !f(fd_MultiStoreProof_mint_store_merkle_hash, value) {
			return
		}
	}
	if len(x.IbcToIcahostStoresMerkleHash) != 0 {
		value := protoreflect.ValueOfBytes(x.IbcToIcahostStoresMerkleHash)
		if !f(fd_MultiStoreProof_ibc_to_icahost_stores_merkle_hash, value) {
			return
		}
	}
	if len(x.FeegrantToGroupStoresMerkleHash) != 0 {
		value := protoreflect.ValueOfBytes(x.FeegrantToGroupStoresMerkleHash)
		if !f(fd_MultiStoreProof_feegrant_to_group_stores_merkle_hash, value) {
			return
		}
	}
	if len(x.AuthToEvidenceStoresMerkleHash) != 0 {
		value := protoreflect.ValueOfBytes(x.AuthToEvidenceStoresMerkleHash)
		if !f(fd_MultiStoreProof_auth_to_evidence_stores_merkle_hash, value) {
			return
		}
	}
	if len(x.ParamsToUpgradeStoresMerkleHash) != 0 {
		value := protoreflect.ValueOfBytes(x.ParamsToUpgradeStoresMerkleHash)
		if !f(fd_MultiStoreProof_params_to_upgrade_stores_merkle_hash, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MultiStoreProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		return len(x.OracleIavlStateHash) != 0
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		return len(x.MintStoreMerkleHash) != 0
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		return len(x.IbcToIcahostStoresMerkleHash) != 0
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		return len(x.FeegrantToGroupStoresMerkleHash) != 0
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		return len(x.AuthToEvidenceStoresMerkleHash) != 0
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		return len(x.ParamsToUpgradeStoresMerkleHash) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiStoreProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		x.OracleIavlStateHash = nil
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		x.MintStoreMerkleHash = nil
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		x.IbcToIcahostStoresMerkleHash = nil
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		x.FeegrantToGroupStoresMerkleHash = nil
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		x.AuthToEvidenceStoresMerkleHash = nil
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		x.ParamsToUpgradeStoresMerkleHash = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MultiStoreProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		value := x.OracleIavlStateHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		value := x.MintStoreMerkleHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		value := x.IbcToIcahostStoresMerkleHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		value := x.FeegrantToGroupStoresMerkleHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		value := x.AuthToEvidenceStoresMerkleHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		value := x.ParamsToUpgradeStoresMerkleHash
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiStoreProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		x.OracleIavlStateHash = value.Bytes()
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		x.MintStoreMerkleHash = value.Bytes()
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		x.IbcToIcahostStoresMerkleHash = value.Bytes()
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		x.FeegrantToGroupStoresMerkleHash = value.Bytes()
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		x.AuthToEvidenceStoresMerkleHash = value.Bytes()
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		x.ParamsToUpgradeStoresMerkleHash = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiStoreProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		panic(fmt.Errorf("field oracle_iavl_state_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		panic(fmt.Errorf("field mint_store_merkle_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		panic(fmt.Errorf("field ibc_to_icahost_stores_merkle_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		panic(fmt.Errorf("field feegrant_to_group_stores_merkle_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		panic(fmt.Errorf("field auth_to_evidence_stores_merkle_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		panic(fmt.Errorf("field params_to_upgrade_stores_merkle_hash of message bandchain.v1.oracle.MultiStoreProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MultiStoreProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.MultiStoreProof.oracle_iavl_state_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.MultiStoreProof.mint_store_merkle_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.MultiStoreProof.ibc_to_icahost_stores_merkle_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.MultiStoreProof.feegrant_to_group_stores_merkle_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.MultiStoreProof.auth_to_evidence_stores_merkle_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.MultiStoreProof.params_to_upgrade_stores_merkle_hash":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.MultiStoreProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.MultiStoreProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MultiStoreProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.MultiStoreProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MultiStoreProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MultiStoreProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MultiStoreProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MultiStoreProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MultiStoreProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OracleIavlStateHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MintStoreMerkleHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IbcToIcahostStoresMerkleHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeegrantToGroupStoresMerkleHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AuthToEvidenceStoresMerkleHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ParamsToUpgradeStoresMerkleHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MultiStoreProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ParamsToUpgradeStoresMerkleHash) > 0 {
			i -= len(x.ParamsToUpgradeStoresMerkleHash)
			copy(dAtA[i:], x.ParamsToUpgradeStoresMerkleHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParamsToUpgradeStoresMerkleHash)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.AuthToEvidenceStoresMerkleHash) > 0 {
			i -= len(x.AuthToEvidenceStoresMerkleHash)
			copy(dAtA[i:], x.AuthToEvidenceStoresMerkleHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AuthToEvidenceStoresMerkleHash)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.FeegrantToGroupStoresMerkleHash) > 0 {
			i -= len(x.FeegrantToGroupStoresMerkleHash)
			copy(dAtA[i:], x.FeegrantToGroupStoresMerkleHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeegrantToGroupStoresMerkleHash)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.IbcToIcahostStoresMerkleHash) > 0 {
			i -= len(x.IbcToIcahostStoresMerkleHash)
			copy(dAtA[i:], x.IbcToIcahostStoresMerkleHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IbcToIcahostStoresMerkleHash)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.MintStoreMerkleHash) > 0 {
			i -= len(x.MintStoreMerkleHash)
			copy(dAtA[i:], x.MintStoreMerkleHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintStoreMerkleHash)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OracleIavlStateHash) > 0 {
			i -= len(x.OracleIavlStateHash)
			copy(dAtA[i:], x.OracleIavlStateHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OracleIavlStateHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MultiStoreProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiStoreProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MultiStoreProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleIavlStateHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleIavlStateHash = append(x.OracleIavlStateHash[:0], dAtA[iNdEx:postIndex]...)
				if x.OracleIavlStateHash == nil {
					x.OracleIavlStateHash = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintStoreMerkleHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintStoreMerkleHash = append(x.MintStoreMerkleHash[:0], dAtA[iNdEx:postIndex]...)
				if x.MintStoreMerkleHash == nil {
					x.MintStoreMerkleHash = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcToIcahostStoresMerkleHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IbcToIcahostStoresMerkleHash = append(x.IbcToIcahostStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
				if x.IbcToIcahostStoresMerkleHash == nil {
					x.IbcToIcahostStoresMerkleHash = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeegrantToGroupStoresMerkleHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeegrantToGroupStoresMerkleHash = append(x.FeegrantToGroupStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
				if x.FeegrantToGroupStoresMerkleHash == nil {
					x.FeegrantToGroupStoresMerkleHash = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AuthToEvidenceStoresMerkleHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AuthToEvidenceStoresMerkleHash = append(x.AuthToEvidenceStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
				if x.AuthToEvidenceStoresMerkleHash == nil {
					x.AuthToEvidenceStoresMerkleHash = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParamsToUpgradeStoresMerkleHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParamsToUpgradeStoresMerkleHash = append(x.ParamsToUpgradeStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
				if x.ParamsToUpgradeStoresMerkleHash == nil {
					x.ParamsToUpgradeStoresMerkleHash = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BlockHeaderMerkleParts                                        protoreflect.MessageDescriptor
	fd_BlockHeaderMerkleParts_version_and_chain_id_hash              protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_height                                 protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_time_second                            protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_time_nano_second                       protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_last_block_id_and_other                protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_next_validator_hash_and_consensus_hash protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_last_results_hash                      protoreflect.FieldDescriptor
	fd_BlockHeaderMerkleParts_evidence_and_proposer_hash             protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_BlockHeaderMerkleParts = File_bandchain_v1_oracle_proof_proto.Messages().ByName("BlockHeaderMerkleParts")
	fd_BlockHeaderMerkleParts_version_and_chain_id_hash = md_BlockHeaderMerkleParts.Fields().ByName("version_and_chain_id_hash")
	fd_BlockHeaderMerkleParts_height = md_BlockHeaderMerkleParts.Fields().ByName("height")
	fd_BlockHeaderMerkleParts_time_second = md_BlockHeaderMerkleParts.Fields().ByName("time_second")
	fd_BlockHeaderMerkleParts_time_nano_second = md_BlockHeaderMerkleParts.Fields().ByName("time_nano_second")
	fd_BlockHeaderMerkleParts_last_block_id_and_other = md_BlockHeaderMerkleParts.Fields().ByName("last_block_id_and_other")
	fd_BlockHeaderMerkleParts_next_validator_hash_and_consensus_hash = md_BlockHeaderMerkleParts.Fields().ByName("next_validator_hash_and_consensus_hash")
	fd_BlockHeaderMerkleParts_last_results_hash = md_BlockHeaderMerkleParts.Fields().ByName("last_results_hash")
	fd_BlockHeaderMerkleParts_evidence_and_proposer_hash = md_BlockHeaderMerkleParts.Fields().ByName("evidence_and_proposer_hash")
}

var _ protoreflect.Message = (*fastReflection_BlockHeaderMerkleParts)(nil)

type fastReflection_BlockHeaderMerkleParts BlockHeaderMerkleParts

func (x *BlockHeaderMerkleParts) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlockHeaderMerkleParts)(x)
}

func (x *BlockHeaderMerkleParts) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlockHeaderMerkleParts_messageType fastReflection_BlockHeaderMerkleParts_messageType
var _ protoreflect.MessageType = fastReflection_BlockHeaderMerkleParts_messageType{}

type fastReflection_BlockHeaderMerkleParts_messageType struct{}

func (x fastReflection_BlockHeaderMerkleParts_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlockHeaderMerkleParts)(nil)
}
func (x fastReflection_BlockHeaderMerkleParts_messageType) New() protoreflect.Message {
	return new(fastReflection_BlockHeaderMerkleParts)
}
func (x fastReflection_BlockHeaderMerkleParts_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockHeaderMerkleParts
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlockHeaderMerkleParts) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockHeaderMerkleParts
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlockHeaderMerkleParts) Type() protoreflect.MessageType {
	return _fastReflection_BlockHeaderMerkleParts_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlockHeaderMerkleParts) New() protoreflect.Message {
	return new(fastReflection_BlockHeaderMerkleParts)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlockHeaderMerkleParts) Interface() protoreflect.ProtoMessage {
	return (*BlockHeaderMerkleParts)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlockHeaderMerkleParts) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.VersionAndChainIdHash) != 0 {
		value := protoreflect.ValueOfBytes(x.VersionAndChainIdHash)
		if !f(fd_BlockHeaderMerkleParts_version_and_chain_id_hash, value) {
			return
		}
	}
	if x.Height != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Height)
		if !f(fd_BlockHeaderMerkleParts_height, value) {
			return
		}
	}
	if x.TimeSecond != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TimeSecond)
		if !f(fd_BlockHeaderMerkleParts_time_second, value) {
			return
		}
	}
	if x.TimeNanoSecond != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TimeNanoSecond)
		if !f(fd_BlockHeaderMerkleParts_time_nano_second, value) {
			return
		}
	}
	if len(x.LastBlockIdAndOther) != 0 {
		value := protoreflect.ValueOfBytes(x.LastBlockIdAndOther)
		if !f(fd_BlockHeaderMerkleParts_last_block_id_and_other, value) {
			return
		}
	}
	if len(x.NextValidatorHashAndConsensusHash) != 0 {
		value := protoreflect.ValueOfBytes(x.NextValidatorHashAndConsensusHash)
		if !f(fd_BlockHeaderMerkleParts_next_validator_hash_and_consensus_hash, value) {
			return
		}
	}
	if len(x.LastResultsHash) != 0 {
		value := protoreflect.ValueOfBytes(x.LastResultsHash)
		if !f(fd_BlockHeaderMerkleParts_last_results_hash, value) {
			return
		}
	}
	if len(x.EvidenceAndProposerHash) != 0 {
		value := protoreflect.ValueOfBytes(x.EvidenceAndProposerHash)
		if !f(fd_BlockHeaderMerkleParts_evidence_and_proposer_hash, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlockHeaderMerkleParts) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		return len(x.VersionAndChainIdHash) != 0
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		return x.Height != uint64(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		return x.TimeSecond != uint64(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		return x.TimeNanoSecond != uint32(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		return len(x.LastBlockIdAndOther) != 0
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		return len(x.NextValidatorHashAndConsensusHash) != 0
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		return len(x.LastResultsHash) != 0
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		return len(x.EvidenceAndProposerHash) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockHeaderMerkleParts) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		x.VersionAndChainIdHash = nil
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		x.Height = uint64(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		x.TimeSecond = uint64(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		x.TimeNanoSecond = uint32(0)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		x.LastBlockIdAndOther = nil
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		x.NextValidatorHashAndConsensusHash = nil
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		x.LastResultsHash = nil
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		x.EvidenceAndProposerHash = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlockHeaderMerkleParts) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		value := x.VersionAndChainIdHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		value := x.Height
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		value := x.TimeSecond
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		value := x.TimeNanoSecond
		return protoreflect.ValueOfUint32(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		value := x.LastBlockIdAndOther
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		value := x.NextValidatorHashAndConsensusHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		value := x.LastResultsHash
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		value := x.EvidenceAndProposerHash
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockHeaderMerkleParts) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		x.VersionAndChainIdHash = value.Bytes()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		x.Height = value.Uint()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		x.TimeSecond = value.Uint()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		x.TimeNanoSecond = uint32(value.Uint())
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		x.LastBlockIdAndOther = value.Bytes()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		x.NextValidatorHashAndConsensusHash = value.Bytes()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		x.LastResultsHash = value.Bytes()
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		x.EvidenceAndProposerHash = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockHeaderMerkleParts) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		panic(fmt.Errorf("field version_and_chain_id_hash of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		panic(fmt.Errorf("field height of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		panic(fmt.Errorf("field time_second of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		panic(fmt.Errorf("field time_nano_second of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		panic(fmt.Errorf("field last_block_id_and_other of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		panic(fmt.Errorf("field next_validator_hash_and_consensus_hash of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		panic(fmt.Errorf("field last_results_hash of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		panic(fmt.Errorf("field evidence_and_proposer_hash of message bandchain.v1.oracle.BlockHeaderMerkleParts is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlockHeaderMerkleParts) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.version_and_chain_id_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_second":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.time_nano_second":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_block_id_and_other":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.next_validator_hash_and_consensus_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.last_results_hash":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.BlockHeaderMerkleParts.evidence_and_proposer_hash":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.BlockHeaderMerkleParts"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.BlockHeaderMerkleParts does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlockHeaderMerkleParts) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.BlockHeaderMerkleParts", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlockHeaderMerkleParts) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockHeaderMerkleParts) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlockHeaderMerkleParts) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlockHeaderMerkleParts) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlockHeaderMerkleParts)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.VersionAndChainIdHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.TimeSecond != 0 {
			n += 1 + runtime.Sov(uint64(x.TimeSecond))
		}
		if x.TimeNanoSecond != 0 {
			n += 1 + runtime.Sov(uint64(x.TimeNanoSecond))
		}
		l = len(x.LastBlockIdAndOther)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NextValidatorHashAndConsensusHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LastResultsHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EvidenceAndProposerHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlockHeaderMerkleParts)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EvidenceAndProposerHash) > 0 {
			i -= len(x.EvidenceAndProposerHash)
			copy(dAtA[i:], x.EvidenceAndProposerHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvidenceAndProposerHash)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.LastResultsHash) > 0 {
			i -= len(x.LastResultsHash)
			copy(dAtA[i:], x.LastResultsHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastResultsHash)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.NextValidatorHashAndConsensusHash) > 0 {
			i -= len(x.NextValidatorHashAndConsensusHash)
			copy(dAtA[i:], x.NextValidatorHashAndConsensusHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NextValidatorHashAndConsensusHash)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.LastBlockIdAndOther) > 0 {
			i -= len(x.LastBlockIdAndOther)
			copy(dAtA[i:], x.LastBlockIdAndOther)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastBlockIdAndOther)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TimeNanoSecond != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimeNanoSecond))
			i--
			dAtA[i] = 0x20
		}
		if x.TimeSecond != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimeSecond))
			i--
			dAtA[i] = 0x18
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x10
		}
		if len(x.VersionAndChainIdHash) > 0 {
			i -= len(x.VersionAndChainIdHash)
			copy(dAtA[i:], x.VersionAndChainIdHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VersionAndChainIdHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlockHeaderMerkleParts)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockHeaderMerkleParts: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockHeaderMerkleParts: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VersionAndChainIdHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VersionAndChainIdHash = append(x.VersionAndChainIdHash[:0], dAtA[iNdEx:postIndex]...)
				if x.VersionAndChainIdHash == nil {
					x.VersionAndChainIdHash = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
				}
				x.TimeSecond = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimeSecond |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeNanoSecond", wireType)
				}
				x.TimeNanoSecond = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimeNanoSecond |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastBlockIdAndOther", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastBlockIdAndOther = append(x.LastBlockIdAndOther[:0], dAtA[iNdEx:postIndex]...)
				if x.LastBlockIdAndOther == nil {
					x.LastBlockIdAndOther = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextValidatorHashAndConsensusHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NextValidatorHashAndConsensusHash = append(x.NextValidatorHashAndConsensusHash[:0], dAtA[iNdEx:postIndex]...)
				if x.NextValidatorHashAndConsensusHash == nil {
					x.NextValidatorHashAndConsensusHash = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastResultsHash = append(x.LastResultsHash[:0], dAtA[iNdEx:postIndex]...)
				if x.LastResultsHash == nil {
					x.LastResultsHash = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvidenceAndProposerHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvidenceAndProposerHash = append(x.EvidenceAndProposerHash[:0], dAtA[iNdEx:postIndex]...)
				if x.EvidenceAndProposerHash == nil {
					x.EvidenceAndProposerHash = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CommonEncodedVotePart                    protoreflect.MessageDescriptor
	fd_CommonEncodedVotePart_signed_data_prefix protoreflect.FieldDescriptor
	fd_CommonEncodedVotePart_signed_data_suffix protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_CommonEncodedVotePart = File_bandchain_v1_oracle_proof_proto.Messages().ByName("CommonEncodedVotePart")
	fd_CommonEncodedVotePart_signed_data_prefix = md_CommonEncodedVotePart.Fields().ByName("signed_data_prefix")
	fd_CommonEncodedVotePart_signed_data_suffix = md_CommonEncodedVotePart.Fields().ByName("signed_data_suffix")
}

var _ protoreflect.Message = (*fastReflection_CommonEncodedVotePart)(nil)

type fastReflection_CommonEncodedVotePart CommonEncodedVotePart

func (x *CommonEncodedVotePart) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CommonEncodedVotePart)(x)
}

func (x *CommonEncodedVotePart) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CommonEncodedVotePart_messageType fastReflection_CommonEncodedVotePart_messageType
var _ protoreflect.MessageType = fastReflection_CommonEncodedVotePart_messageType{}

type fastReflection_CommonEncodedVotePart_messageType struct{}

func (x fastReflection_CommonEncodedVotePart_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CommonEncodedVotePart)(nil)
}
func (x fastReflection_CommonEncodedVotePart_messageType) New() protoreflect.Message {
	return new(fastReflection_CommonEncodedVotePart)
}
func (x fastReflection_CommonEncodedVotePart_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CommonEncodedVotePart
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CommonEncodedVotePart) Descriptor() protoreflect.MessageDescriptor {
	return md_CommonEncodedVotePart
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CommonEncodedVotePart) Type() protoreflect.MessageType {
	return _fastReflection_CommonEncodedVotePart_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CommonEncodedVotePart) New() protoreflect.Message {
	return new(fastReflection_CommonEncodedVotePart)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CommonEncodedVotePart) Interface() protoreflect.ProtoMessage {
	return (*CommonEncodedVotePart)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CommonEncodedVotePart) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.SignedDataPrefix) != 0 {
		value := protoreflect.ValueOfBytes(x.SignedDataPrefix)
		if !f(fd_CommonEncodedVotePart_signed_data_prefix, value) {
			return
		}
	}
	if len(x.SignedDataSuffix) != 0 {
		value := protoreflect.ValueOfBytes(x.SignedDataSuffix)
		if !f(fd_CommonEncodedVotePart_signed_data_suffix, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CommonEncodedVotePart) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		return len(x.SignedDataPrefix) != 0
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		return len(x.SignedDataSuffix) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommonEncodedVotePart) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		x.SignedDataPrefix = nil
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		x.SignedDataSuffix = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CommonEncodedVotePart) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		value := x.SignedDataPrefix
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		value := x.SignedDataSuffix
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommonEncodedVotePart) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		x.SignedDataPrefix = value.Bytes()
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		x.SignedDataSuffix = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommonEncodedVotePart) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		panic(fmt.Errorf("field signed_data_prefix of message bandchain.v1.oracle.CommonEncodedVotePart is not mutable"))
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		panic(fmt.Errorf("field signed_data_suffix of message bandchain.v1.oracle.CommonEncodedVotePart is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CommonEncodedVotePart) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_prefix":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.CommonEncodedVotePart.signed_data_suffix":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.CommonEncodedVotePart"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.CommonEncodedVotePart does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CommonEncodedVotePart) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.CommonEncodedVotePart", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CommonEncodedVotePart) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommonEncodedVotePart) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CommonEncodedVotePart) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CommonEncodedVotePart) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CommonEncodedVotePart)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SignedDataPrefix)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SignedDataSuffix)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CommonEncodedVotePart)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SignedDataSuffix) > 0 {
			i -= len(x.SignedDataSuffix)
			copy(dAtA[i:], x.SignedDataSuffix)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignedDataSuffix)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SignedDataPrefix) > 0 {
			i -= len(x.SignedDataPrefix)
			copy(dAtA[i:], x.SignedDataPrefix)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignedDataPrefix)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CommonEncodedVotePart)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommonEncodedVotePart: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommonEncodedVotePart: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedDataPrefix", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedDataPrefix = append(x.SignedDataPrefix[:0], dAtA[iNdEx:postIndex]...)
				if x.SignedDataPrefix == nil {
					x.SignedDataPrefix = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedDataSuffix", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedDataSuffix = append(x.SignedDataSuffix[:0], dAtA[iNdEx:postIndex]...)
				if x.SignedDataSuffix == nil {
					x.SignedDataSuffix = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TMSignature                   protoreflect.MessageDescriptor
	fd_TMSignature_r                 protoreflect.FieldDescriptor
	fd_TMSignature_s                 protoreflect.FieldDescriptor
	fd_TMSignature_v                 protoreflect.FieldDescriptor
	fd_TMSignature_encoded_timestamp protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_TMSignature = File_bandchain_v1_oracle_proof_proto.Messages().ByName("TMSignature")
	fd_TMSignature_r = md_TMSignature.Fields().ByName("r")
	fd_TMSignature_s = md_TMSignature.Fields().ByName("s")
	fd_TMSignature_v = md_TMSignature.Fields().ByName("v")
	fd_TMSignature_encoded_timestamp = md_TMSignature.Fields().ByName("encoded_timestamp")
}

var _ protoreflect.Message = (*fastReflection_TMSignature)(nil)

type fastReflection_TMSignature TMSignature

func (x *TMSignature) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TMSignature)(x)
}

func (x *TMSignature) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TMSignature_messageType fastReflection_TMSignature_messageType
var _ protoreflect.MessageType = fastReflection_TMSignature_messageType{}

type fastReflection_TMSignature_messageType struct{}

func (x fastReflection_TMSignature_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TMSignature)(nil)
}
func (x fastReflection_TMSignature_messageType) New() protoreflect.Message {
	return new(fastReflection_TMSignature)
}
func (x fastReflection_TMSignature_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TMSignature
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TMSignature) Descriptor() protoreflect.MessageDescriptor {
	return md_TMSignature
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TMSignature) Type() protoreflect.MessageType {
	return _fastReflection_TMSignature_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TMSignature) New() protoreflect.Message {
	return new(fastReflection_TMSignature)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TMSignature) Interface() protoreflect.ProtoMessage {
	return (*TMSignature)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TMSignature) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_TMSignature_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_TMSignature_s, value) {
			return
		}
	}
	if x.V != uint32(0) {
		value := protoreflect.ValueOfUint32(x.V)
		if !f(fd_TMSignature_v, value) {
			return
		}
	}
	if len(x.EncodedTimestamp) != 0 {
		value := protoreflect.ValueOfBytes(x.EncodedTimestamp)
		if !f(fd_TMSignature_encoded_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TMSignature) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		return len(x.R) != 0
	case "bandchain.v1.oracle.TMSignature.s":
		return len(x.S) != 0
	case "bandchain.v1.oracle.TMSignature.v":
		return x.V != uint32(0)
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		return len(x.EncodedTimestamp) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TMSignature) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		x.R = nil
	case "bandchain.v1.oracle.TMSignature.s":
		x.S = nil
	case "bandchain.v1.oracle.TMSignature.v":
		x.V = uint32(0)
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		x.EncodedTimestamp = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TMSignature) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.TMSignature.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	case "bandchain.v1.oracle.TMSignature.v":
		value := x.V
		return protoreflect.ValueOfUint32(value)
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		value := x.EncodedTimestamp
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TMSignature) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		x.R = value.Bytes()
	case "bandchain.v1.oracle.TMSignature.s":
		x.S = value.Bytes()
	case "bandchain.v1.oracle.TMSignature.v":
		x.V = uint32(value.Uint())
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		x.EncodedTimestamp = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TMSignature) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		panic(fmt.Errorf("field r of message bandchain.v1.oracle.TMSignature is not mutable"))
	case "bandchain.v1.oracle.TMSignature.s":
		panic(fmt.Errorf("field s of message bandchain.v1.oracle.TMSignature is not mutable"))
	case "bandchain.v1.oracle.TMSignature.v":
		panic(fmt.Errorf("field v of message bandchain.v1.oracle.TMSignature is not mutable"))
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		panic(fmt.Errorf("field encoded_timestamp of message bandchain.v1.oracle.TMSignature is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TMSignature) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.TMSignature.r":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.TMSignature.s":
		return protoreflect.ValueOfBytes(nil)
	case "bandchain.v1.oracle.TMSignature.v":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bandchain.v1.oracle.TMSignature.encoded_timestamp":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.TMSignature"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.TMSignature does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TMSignature) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.TMSignature", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TMSignature) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TMSignature) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TMSignature) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TMSignature) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TMSignature)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.V != 0 {
			n += 1 + runtime.Sov(uint64(x.V))
		}
		l = len(x.EncodedTimestamp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TMSignature)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EncodedTimestamp) > 0 {
			i -= len(x.EncodedTimestamp)
			copy(dAtA[i:], x.EncodedTimestamp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncodedTimestamp)))
			i--
			dAtA[i] = 0x22
		}
		if x.V != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.V))
			i--
			dAtA[i] = 0x18
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TMSignature)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TMSignature: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TMSignature: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				x.V = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.V |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncodedTimestamp", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncodedTimestamp = append(x.EncodedTimestamp[:0], dAtA[iNdEx:postIndex]...)
				if x.EncodedTimestamp == nil {
					x.EncodedTimestamp = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RequestsCountProof_3_list)(nil)

type _RequestsCountProof_3_list struct {
	list *[]*IAVLMerklePath
}

func (x *_RequestsCountProof_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RequestsCountProof_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_RequestsCountProof_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IAVLMerklePath)
	(*x.list)[i] = concreteValue
}

func (x *_RequestsCountProof_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IAVLMerklePath)
	*x.list = append(*x.list, concreteValue)
}

func (x *_RequestsCountProof_3_list) AppendMutable() protoreflect.Value {
	v := new(IAVLMerklePath)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RequestsCountProof_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_RequestsCountProof_3_list) NewElement() protoreflect.Value {
	v := new(IAVLMerklePath)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RequestsCountProof_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RequestsCountProof              protoreflect.MessageDescriptor
	fd_RequestsCountProof_count        protoreflect.FieldDescriptor
	fd_RequestsCountProof_version      protoreflect.FieldDescriptor
	fd_RequestsCountProof_merkle_paths protoreflect.FieldDescriptor
)

func init() {
	file_bandchain_v1_oracle_proof_proto_init()
	md_RequestsCountProof = File_bandchain_v1_oracle_proof_proto.Messages().ByName("RequestsCountProof")
	fd_RequestsCountProof_count = md_RequestsCountProof.Fields().ByName("count")
	fd_RequestsCountProof_version = md_RequestsCountProof.Fields().ByName("version")
	fd_RequestsCountProof_merkle_paths = md_RequestsCountProof.Fields().ByName("merkle_paths")
}

var _ protoreflect.Message = (*fastReflection_RequestsCountProof)(nil)

type fastReflection_RequestsCountProof RequestsCountProof

func (x *RequestsCountProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestsCountProof)(x)
}

func (x *RequestsCountProof) slowProtoReflect() protoreflect.Message {
	mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestsCountProof_messageType fastReflection_RequestsCountProof_messageType
var _ protoreflect.MessageType = fastReflection_RequestsCountProof_messageType{}

type fastReflection_RequestsCountProof_messageType struct{}

func (x fastReflection_RequestsCountProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestsCountProof)(nil)
}
func (x fastReflection_RequestsCountProof_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestsCountProof)
}
func (x fastReflection_RequestsCountProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestsCountProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestsCountProof) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestsCountProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestsCountProof) Type() protoreflect.MessageType {
	return _fastReflection_RequestsCountProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestsCountProof) New() protoreflect.Message {
	return new(fastReflection_RequestsCountProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestsCountProof) Interface() protoreflect.ProtoMessage {
	return (*RequestsCountProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestsCountProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Count != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Count)
		if !f(fd_RequestsCountProof_count, value) {
			return
		}
	}
	if x.Version != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Version)
		if !f(fd_RequestsCountProof_version, value) {
			return
		}
	}
	if len(x.MerklePaths) != 0 {
		value := protoreflect.ValueOfList(&_RequestsCountProof_3_list{list: &x.MerklePaths})
		if !f(fd_RequestsCountProof_merkle_paths, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestsCountProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.count":
		return x.Count != uint64(0)
	case "bandchain.v1.oracle.RequestsCountProof.version":
		return x.Version != uint64(0)
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		return len(x.MerklePaths) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestsCountProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.count":
		x.Count = uint64(0)
	case "bandchain.v1.oracle.RequestsCountProof.version":
		x.Version = uint64(0)
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		x.MerklePaths = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestsCountProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.count":
		value := x.Count
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.RequestsCountProof.version":
		value := x.Version
		return protoreflect.ValueOfUint64(value)
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		if len(x.MerklePaths) == 0 {
			return protoreflect.ValueOfList(&_RequestsCountProof_3_list{})
		}
		listValue := &_RequestsCountProof_3_list{list: &x.MerklePaths}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestsCountProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.count":
		x.Count = value.Uint()
	case "bandchain.v1.oracle.RequestsCountProof.version":
		x.Version = value.Uint()
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		lv := value.List()
		clv := lv.(*_RequestsCountProof_3_list)
		x.MerklePaths = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestsCountProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		if x.MerklePaths == nil {
			x.MerklePaths = []*IAVLMerklePath{}
		}
		value := &_RequestsCountProof_3_list{list: &x.MerklePaths}
		return protoreflect.ValueOfList(value)
	case "bandchain.v1.oracle.RequestsCountProof.count":
		panic(fmt.Errorf("field count of message bandchain.v1.oracle.RequestsCountProof is not mutable"))
	case "bandchain.v1.oracle.RequestsCountProof.version":
		panic(fmt.Errorf("field version of message bandchain.v1.oracle.RequestsCountProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestsCountProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bandchain.v1.oracle.RequestsCountProof.count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.RequestsCountProof.version":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bandchain.v1.oracle.RequestsCountProof.merkle_paths":
		list := []*IAVLMerklePath{}
		return protoreflect.ValueOfList(&_RequestsCountProof_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bandchain.v1.oracle.RequestsCountProof"))
		}
		panic(fmt.Errorf("message bandchain.v1.oracle.RequestsCountProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestsCountProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bandchain.v1.oracle.RequestsCountProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestsCountProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestsCountProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestsCountProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestsCountProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestsCountProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Count != 0 {
			n += 1 + runtime.Sov(uint64(x.Count))
		}
		if x.Version != 0 {
			n += 1 + runtime.Sov(uint64(x.Version))
		}
		if len(x.MerklePaths) > 0 {
			for _, e := range x.MerklePaths {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestsCountProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MerklePaths) > 0 {
			for iNdEx := len(x.MerklePaths) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MerklePaths[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.Version != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Version))
			i--
			dAtA[i] = 0x10
		}
		if x.Count != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Count))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestsCountProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestsCountProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestsCountProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
				}
				x.Count = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Count |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				x.Version = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Version |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MerklePaths", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MerklePaths = append(x.MerklePaths, &IAVLMerklePath{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MerklePaths[len(x.MerklePaths)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: bandchain/v1/oracle/proof.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryProofRequest is request type for the Service/Proof RPC method.
type QueryProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestID is ID of an oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// height is block height
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *QueryProofRequest) Reset() {
	*x = QueryProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProofRequest) ProtoMessage() {}

// Deprecated: Use QueryProofRequest.ProtoReflect.Descriptor instead.
func (*QueryProofRequest) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{0}
}

func (x *QueryProofRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *QueryProofRequest) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// QueryChainIDResponse is response type for the Service/Proof RPC method.
type QueryProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// height is block height
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// result is the proof
	Result *SingleProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *QueryProofResponse) Reset() {
	*x = QueryProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProofResponse) ProtoMessage() {}

// Deprecated: Use QueryProofResponse.ProtoReflect.Descriptor instead.
func (*QueryProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{1}
}

func (x *QueryProofResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *QueryProofResponse) GetResult() *SingleProofResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// QueryMultiProofRequest is request type for the Service/MultiProof RPC method.
type QueryMultiProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_ids is the list of request IDs
	RequestIds []uint64 `protobuf:"varint,1,rep,packed,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
}

func (x *QueryMultiProofRequest) Reset() {
	*x = QueryMultiProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMultiProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMultiProofRequest) ProtoMessage() {}

// Deprecated: Use QueryMultiProofRequest.ProtoReflect.Descriptor instead.
func (*QueryMultiProofRequest) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{2}
}

func (x *QueryMultiProofRequest) GetRequestIds() []uint64 {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

// QueryMultiProofResponse is response type for the Service/MultiProof RPC method.
type QueryMultiProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64               `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result *MultiProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *QueryMultiProofResponse) Reset() {
	*x = QueryMultiProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMultiProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMultiProofResponse) ProtoMessage() {}

// Deprecated: Use QueryMultiProofResponse.ProtoReflect.Descriptor instead.
func (*QueryMultiProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{3}
}

func (x *QueryMultiProofResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *QueryMultiProofResponse) GetResult() *MultiProofResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// QueryRequestCountProofRequest is request type for the Service/RequestCountProof RPC method.
type QueryRequestCountProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryRequestCountProofRequest) Reset() {
	*x = QueryRequestCountProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequestCountProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestCountProofRequest) ProtoMessage() {}

// Deprecated: Use QueryRequestCountProofRequest.ProtoReflect.Descriptor instead.
func (*QueryRequestCountProofRequest) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{4}
}

// QueryRequestCountProofResponse is response type for the Service/RequestCountProof RPC method.
type QueryRequestCountProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64               `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result *CountProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *QueryRequestCountProofResponse) Reset() {
	*x = QueryRequestCountProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequestCountProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestCountProofResponse) ProtoMessage() {}

// Deprecated: Use QueryRequestCountProofResponse.ProtoReflect.Descriptor instead.
func (*QueryRequestCountProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRequestCountProofResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *QueryRequestCountProofResponse) GetResult() *CountProofResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// SingleProofResponse is the data structure for response of single proof
type SingleProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof         *SingleProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte       `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (x *SingleProofResponse) Reset() {
	*x = SingleProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleProofResponse) ProtoMessage() {}

// Deprecated: Use SingleProofResponse.ProtoReflect.Descriptor instead.
func (*SingleProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{6}
}

func (x *SingleProofResponse) GetProof() *SingleProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SingleProofResponse) GetEvmProofBytes() []byte {
	if x != nil {
		return x.EvmProofBytes
	}
	return nil
}

// MultiProofResponse is the data structure for response of multi proof
type MultiProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof         *MultiProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte      `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (x *MultiProofResponse) Reset() {
	*x = MultiProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiProofResponse) ProtoMessage() {}

// Deprecated: Use MultiProofResponse.ProtoReflect.Descriptor instead.
func (*MultiProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{7}
}

func (x *MultiProofResponse) GetProof() *MultiProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *MultiProofResponse) GetEvmProofBytes() []byte {
	if x != nil {
		return x.EvmProofBytes
	}
	return nil
}

// CountProofResponse is the data structure for response of count proof
type CountProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof         *CountProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte      `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (x *CountProofResponse) Reset() {
	*x = CountProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountProofResponse) ProtoMessage() {}

// Deprecated: Use CountProofResponse.ProtoReflect.Descriptor instead.
func (*CountProofResponse) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{8}
}

func (x *CountProofResponse) GetProof() *CountProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *CountProofResponse) GetEvmProofBytes() []byte {
	if x != nil {
		return x.EvmProofBytes
	}
	return nil
}

// SingleProof contains block height, oracle data proof and block relay proof
type SingleProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight     uint64           `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	OracleDataProof *OracleDataProof `protobuf:"bytes,2,opt,name=oracle_data_proof,json=oracleDataProof,proto3" json:"oracle_data_proof,omitempty"`
	BlockRelayProof *BlockRelayProof `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (x *SingleProof) Reset() {
	*x = SingleProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleProof) ProtoMessage() {}

// Deprecated: Use SingleProof.ProtoReflect.Descriptor instead.
func (*SingleProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{9}
}

func (x *SingleProof) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SingleProof) GetOracleDataProof() *OracleDataProof {
	if x != nil {
		return x.OracleDataProof
	}
	return nil
}

func (x *SingleProof) GetBlockRelayProof() *BlockRelayProof {
	if x != nil {
		return x.BlockRelayProof
	}
	return nil
}

// MultiProof contains block height, list of oracle data proof and block relay proof
type MultiProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight          uint64             `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	OracleDataMultiProof []*OracleDataProof `protobuf:"bytes,2,rep,name=oracle_data_multi_proof,json=oracleDataMultiProof,proto3" json:"oracle_data_multi_proof,omitempty"`
	BlockRelayProof      *BlockRelayProof   `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (x *MultiProof) Reset() {
	*x = MultiProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiProof) ProtoMessage() {}

// Deprecated: Use MultiProof.ProtoReflect.Descriptor instead.
func (*MultiProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{10}
}

func (x *MultiProof) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *MultiProof) GetOracleDataMultiProof() []*OracleDataProof {
	if x != nil {
		return x.OracleDataMultiProof
	}
	return nil
}

func (x *MultiProof) GetBlockRelayProof() *BlockRelayProof {
	if x != nil {
		return x.BlockRelayProof
	}
	return nil
}

// CountProof contains block height, count proof and block relay proof
type CountProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight     uint64              `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	CountProof      *RequestsCountProof `protobuf:"bytes,2,opt,name=count_proof,json=countProof,proto3" json:"count_proof,omitempty"`
	BlockRelayProof *BlockRelayProof    `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (x *CountProof) Reset() {
	*x = CountProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountProof) ProtoMessage() {}

// Deprecated: Use CountProof.ProtoReflect.Descriptor instead.
func (*CountProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{11}
}

func (x *CountProof) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *CountProof) GetCountProof() *RequestsCountProof {
	if x != nil {
		return x.CountProof
	}
	return nil
}

func (x *CountProof) GetBlockRelayProof() *BlockRelayProof {
	if x != nil {
		return x.BlockRelayProof
	}
	return nil
}

// OracleDataProof contains result, version and merkle paths
type OracleDataProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *v1.Result        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Version     uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	MerklePaths []*IAVLMerklePath `protobuf:"bytes,3,rep,name=merkle_paths,json=merklePaths,proto3" json:"merkle_paths,omitempty"`
}

func (x *OracleDataProof) Reset() {
	*x = OracleDataProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataProof) ProtoMessage() {}

// Deprecated: Use OracleDataProof.ProtoReflect.Descriptor instead.
func (*OracleDataProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{12}
}

func (x *OracleDataProof) GetResult() *v1.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OracleDataProof) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OracleDataProof) GetMerklePaths() []*IAVLMerklePath {
	if x != nil {
		return x.MerklePaths
	}
	return nil
}

// IAVLMerklePath represents a Merkle step to a leaf data node in an iAVL tree.
type IAVLMerklePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDataOnRight  bool   `protobuf:"varint,1,opt,name=is_data_on_right,json=isDataOnRight,proto3" json:"is_data_on_right,omitempty"`
	SubtreeHeight  uint32 `protobuf:"varint,2,opt,name=subtree_height,json=subtreeHeight,proto3" json:"subtree_height,omitempty"`
	SubtreeSize    uint64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	SubtreeVersion uint64 `protobuf:"varint,4,opt,name=subtree_version,json=subtreeVersion,proto3" json:"subtree_version,omitempty"`
	SiblingHash    []byte `protobuf:"bytes,5,opt,name=sibling_hash,json=siblingHash,proto3" json:"sibling_hash,omitempty"`
}

func (x *IAVLMerklePath) Reset() {
	*x = IAVLMerklePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAVLMerklePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAVLMerklePath) ProtoMessage() {}

// Deprecated: Use IAVLMerklePath.ProtoReflect.Descriptor instead.
func (*IAVLMerklePath) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{13}
}

func (x *IAVLMerklePath) GetIsDataOnRight() bool {
	if x != nil {
		return x.IsDataOnRight
	}
	return false
}

func (x *IAVLMerklePath) GetSubtreeHeight() uint32 {
	if x != nil {
		return x.SubtreeHeight
	}
	return 0
}

func (x *IAVLMerklePath) GetSubtreeSize() uint64 {
	if x != nil {
		return x.SubtreeSize
	}
	return 0
}

func (x *IAVLMerklePath) GetSubtreeVersion() uint64 {
	if x != nil {
		return x.SubtreeVersion
	}
	return 0
}

func (x *IAVLMerklePath) GetSiblingHash() []byte {
	if x != nil {
		return x.SiblingHash
	}
	return nil
}

// BlockRelayProof contains multi store proof, block header merkle parts, common encoded part and signatures
type BlockRelayProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiStoreProof        *MultiStoreProof        `protobuf:"bytes,1,opt,name=multi_store_proof,json=multiStoreProof,proto3" json:"multi_store_proof,omitempty"`
	BlockHeaderMerkleParts *BlockHeaderMerkleParts `protobuf:"bytes,2,opt,name=block_header_merkle_parts,json=blockHeaderMerkleParts,proto3" json:"block_header_merkle_parts,omitempty"`
	CommonEncodedVotePart  *CommonEncodedVotePart  `protobuf:"bytes,3,opt,name=common_encoded_vote_part,json=commonEncodedVotePart,proto3" json:"common_encoded_vote_part,omitempty"`
	Signatures             []*TMSignature          `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *BlockRelayProof) Reset() {
	*x = BlockRelayProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRelayProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRelayProof) ProtoMessage() {}

// Deprecated: Use BlockRelayProof.ProtoReflect.Descriptor instead.
func (*BlockRelayProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{14}
}

func (x *BlockRelayProof) GetMultiStoreProof() *MultiStoreProof {
	if x != nil {
		return x.MultiStoreProof
	}
	return nil
}

func (x *BlockRelayProof) GetBlockHeaderMerkleParts() *BlockHeaderMerkleParts {
	if x != nil {
		return x.BlockHeaderMerkleParts
	}
	return nil
}

func (x *BlockRelayProof) GetCommonEncodedVotePart() *CommonEncodedVotePart {
	if x != nil {
		return x.CommonEncodedVotePart
	}
	return nil
}

func (x *BlockRelayProof) GetSignatures() []*TMSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// MultiStoreProof stores a compact of other Cosmos-SDK modules' storage hash in multistore to
// compute (in combination with oracle store hash) Tendermint's application state hash at a given block.
//
//	                                 ____________________[AppHash]____________________
//	                                /                                                 \
//	                  ___________[N19]____________                               ____[N20]_____
//	                 /                            \                             /              \
//	          _____[N15]_____                 ____[N16]______               __[N17]__          [K]
//	         /               \               /               \             /         \
//	     __[N8]_          __[N9]_          _[N10]_         _[N11]_       [N12]      [N13]
//	    /       \        /       \        /       \        /      \      /   \      /   \
//	  [N0]     [N1]    [N2]     [N3]    [N4]     [N5]    [N6]    [N7]   [G] [H]   [I]  [J]
//	 /   \    /   \    /  \    /   \   /   \    /   \   /   \   /   \
//	[0] [1]  [2] [3] [4] [5]  [6] [7] [8] [9]  [A] [B] [C] [D] [E] [F]
//
// [0] - acc (auth) [1] - authz    [2] - bank     [3] - capability [4] - consensus  [5] - crisis
// [6] - dist       [7] - evidence [8] - feegrant [9] - globalfee  [A] - gov        [B] - group
// [C] - ibccore    [D] - icahost  [E] - mint     [F] - oracle     [G] - params     [H] - slashing
// [I] - staking    [J] - transfer [K] - upgrade
//
// Notice that NOT all leaves of the Merkle tree are needed in order to compute the Merkle
// root hash, since we only want to validate the correctness of [F] In fact, only
// [E], [N6], [N10], [N15], and [N20] are needed in order to compute [AppHash].
type MultiStoreProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OracleIavlStateHash             []byte `protobuf:"bytes,1,opt,name=oracle_iavl_state_hash,json=oracleIavlStateHash,proto3" json:"oracle_iavl_state_hash,omitempty"`
	MintStoreMerkleHash             []byte `protobuf:"bytes,2,opt,name=mint_store_merkle_hash,json=mintStoreMerkleHash,proto3" json:"mint_store_merkle_hash,omitempty"`
	IbcToIcahostStoresMerkleHash    []byte `protobuf:"bytes,3,opt,name=ibc_to_icahost_stores_merkle_hash,json=ibcToIcahostStoresMerkleHash,proto3" json:"ibc_to_icahost_stores_merkle_hash,omitempty"`
	FeegrantToGroupStoresMerkleHash []byte `protobuf:"bytes,4,opt,name=feegrant_to_group_stores_merkle_hash,json=feegrantToGroupStoresMerkleHash,proto3" json:"feegrant_to_group_stores_merkle_hash,omitempty"`
	AuthToEvidenceStoresMerkleHash  []byte `protobuf:"bytes,5,opt,name=auth_to_evidence_stores_merkle_hash,json=authToEvidenceStoresMerkleHash,proto3" json:"auth_to_evidence_stores_merkle_hash,omitempty"`
	ParamsToUpgradeStoresMerkleHash []byte `protobuf:"bytes,6,opt,name=params_to_upgrade_stores_merkle_hash,json=paramsToUpgradeStoresMerkleHash,proto3" json:"params_to_upgrade_stores_merkle_hash,omitempty"`
}

func (x *MultiStoreProof) Reset() {
	*x = MultiStoreProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiStoreProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStoreProof) ProtoMessage() {}

// Deprecated: Use MultiStoreProof.ProtoReflect.Descriptor instead.
func (*MultiStoreProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{15}
}

func (x *MultiStoreProof) GetOracleIavlStateHash() []byte {
	if x != nil {
		return x.OracleIavlStateHash
	}
	return nil
}

func (x *MultiStoreProof) GetMintStoreMerkleHash() []byte {
	if x != nil {
		return x.MintStoreMerkleHash
	}
	return nil
}

func (x *MultiStoreProof) GetIbcToIcahostStoresMerkleHash() []byte {
	if x != nil {
		return x.IbcToIcahostStoresMerkleHash
	}
	return nil
}

func (x *MultiStoreProof) GetFeegrantToGroupStoresMerkleHash() []byte {
	if x != nil {
		return x.FeegrantToGroupStoresMerkleHash
	}
	return nil
}

func (x *MultiStoreProof) GetAuthToEvidenceStoresMerkleHash() []byte {
	if x != nil {
		return x.AuthToEvidenceStoresMerkleHash
	}
	return nil
}

func (x *MultiStoreProof) GetParamsToUpgradeStoresMerkleHash() []byte {
	if x != nil {
		return x.ParamsToUpgradeStoresMerkleHash
	}
	return nil
}

// BlockHeaderMerkleParts stores a group of hashes using for computing Tendermint's block
// header hash from app hash, and height.
//
// In Tendermint, a block header hash is the Merkle hash of a binary tree with 14 leaf nodes.
// Each node encodes a data piece of the blockchain. The notable data leaves are: [A] app_hash,
// [2] height. All data pieces are combined into one 32-byte hash to be signed
// by block validators. The structure of the Merkle tree is shown below.
//
//	                                 [BlockHeader]
//	                              /                \
//	                 [3A]                                    [3B]
//	               /      \                                /      \
//	       [2A]                [2B]                [2C]                [2D]
//	      /    \              /    \              /    \              /    \
//	  [1A]      [1B]      [1C]      [1D]      [1E]      [1F]        [C]    [D]
//	  /  \      /  \      /  \      /  \      /  \      /  \
//	[0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]  [8]  [9]  [A]  [B]
//
//	[0] - version               [1] - chain_id            [2] - height        [3] - time
//	[4] - last_block_id         [5] - last_commit_hash    [6] - data_hash     [7] - validators_hash
//	[8] - next_validators_hash  [9] - consensus_hash      [A] - app_hash      [B] - last_results_hash
//	[C] - evidence_hash         [D] - proposer_address
//
// Notice that NOT all leaves of the Merkle tree are needed in order to compute the Merkle
// root hash, since we only want to validate the correctness of [2], [3], and [A]. In fact, only
// [1A], [2B], [1E], [B], and [2D] are needed in order to compute [BlockHeader].
type BlockHeaderMerkleParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionAndChainIdHash             []byte `protobuf:"bytes,1,opt,name=version_and_chain_id_hash,json=versionAndChainIdHash,proto3" json:"version_and_chain_id_hash,omitempty"`
	Height                            uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                        uint64 `protobuf:"varint,3,opt,name=time_second,json=timeSecond,proto3" json:"time_second,omitempty"`
	TimeNanoSecond                    uint32 `protobuf:"varint,4,opt,name=time_nano_second,json=timeNanoSecond,proto3" json:"time_nano_second,omitempty"`
	LastBlockIdAndOther               []byte `protobuf:"bytes,5,opt,name=last_block_id_and_other,json=lastBlockIdAndOther,proto3" json:"last_block_id_and_other,omitempty"`
	NextValidatorHashAndConsensusHash []byte `protobuf:"bytes,6,opt,name=next_validator_hash_and_consensus_hash,json=nextValidatorHashAndConsensusHash,proto3" json:"next_validator_hash_and_consensus_hash,omitempty"`
	LastResultsHash                   []byte `protobuf:"bytes,7,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`
	EvidenceAndProposerHash           []byte `protobuf:"bytes,8,opt,name=evidence_and_proposer_hash,json=evidenceAndProposerHash,proto3" json:"evidence_and_proposer_hash,omitempty"`
}

func (x *BlockHeaderMerkleParts) Reset() {
	*x = BlockHeaderMerkleParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderMerkleParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderMerkleParts) ProtoMessage() {}

// Deprecated: Use BlockHeaderMerkleParts.ProtoReflect.Descriptor instead.
func (*BlockHeaderMerkleParts) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{16}
}

func (x *BlockHeaderMerkleParts) GetVersionAndChainIdHash() []byte {
	if x != nil {
		return x.VersionAndChainIdHash
	}
	return nil
}

func (x *BlockHeaderMerkleParts) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeaderMerkleParts) GetTimeSecond() uint64 {
	if x != nil {
		return x.TimeSecond
	}
	return 0
}

func (x *BlockHeaderMerkleParts) GetTimeNanoSecond() uint32 {
	if x != nil {
		return x.TimeNanoSecond
	}
	return 0
}

func (x *BlockHeaderMerkleParts) GetLastBlockIdAndOther() []byte {
	if x != nil {
		return x.LastBlockIdAndOther
	}
	return nil
}

func (x *BlockHeaderMerkleParts) GetNextValidatorHashAndConsensusHash() []byte {
	if x != nil {
		return x.NextValidatorHashAndConsensusHash
	}
	return nil
}

func (x *BlockHeaderMerkleParts) GetLastResultsHash() []byte {
	if x != nil {
		return x.LastResultsHash
	}
	return nil
}

func (x *BlockHeaderMerkleParts) GetEvidenceAndProposerHash() []byte {
	if x != nil {
		return x.EvidenceAndProposerHash
	}
	return nil
}

// CommonEncodedVotePart represents the common part of encoded vote
type CommonEncodedVotePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedDataPrefix []byte `protobuf:"bytes,1,opt,name=signed_data_prefix,json=signedDataPrefix,proto3" json:"signed_data_prefix,omitempty"`
	SignedDataSuffix []byte `protobuf:"bytes,2,opt,name=signed_data_suffix,json=signedDataSuffix,proto3" json:"signed_data_suffix,omitempty"`
}

func (x *CommonEncodedVotePart) Reset() {
	*x = CommonEncodedVotePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonEncodedVotePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonEncodedVotePart) ProtoMessage() {}

// Deprecated: Use CommonEncodedVotePart.ProtoReflect.Descriptor instead.
func (*CommonEncodedVotePart) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{17}
}

func (x *CommonEncodedVotePart) GetSignedDataPrefix() []byte {
	if x != nil {
		return x.SignedDataPrefix
	}
	return nil
}

func (x *CommonEncodedVotePart) GetSignedDataSuffix() []byte {
	if x != nil {
		return x.SignedDataSuffix
	}
	return nil
}

// TMSignature contains all details of validator signature for performing signer recovery for ECDSA
// secp256k1 signature. Note that this struct is written specifically for signature signed on
// Tendermint's precommit data, which includes the block hash and some additional information prepended
// and appended to the block hash. The prepended part (prefix) and the appended part (suffix) are
// different for each signer (including signature size, machine clock, validator index, etc).
type TMSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R                []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S                []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	V                uint32 `protobuf:"varint,3,opt,name=v,proto3" json:"v,omitempty"`
	EncodedTimestamp []byte `protobuf:"bytes,4,opt,name=encoded_timestamp,json=encodedTimestamp,proto3" json:"encoded_timestamp,omitempty"`
}

func (x *TMSignature) Reset() {
	*x = TMSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMSignature) ProtoMessage() {}

// Deprecated: Use TMSignature.ProtoReflect.Descriptor instead.
func (*TMSignature) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{18}
}

func (x *TMSignature) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *TMSignature) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *TMSignature) GetV() uint32 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *TMSignature) GetEncodedTimestamp() []byte {
	if x != nil {
		return x.EncodedTimestamp
	}
	return nil
}

// RequestsCountProof contains count, version and merkle paths
type RequestsCountProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       uint64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Version     uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	MerklePaths []*IAVLMerklePath `protobuf:"bytes,3,rep,name=merkle_paths,json=merklePaths,proto3" json:"merkle_paths,omitempty"`
}

func (x *RequestsCountProof) Reset() {
	*x = RequestsCountProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandchain_v1_oracle_proof_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestsCountProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestsCountProof) ProtoMessage() {}

// Deprecated: Use RequestsCountProof.ProtoReflect.Descriptor instead.
func (*RequestsCountProof) Descriptor() ([]byte, []int) {
	return file_bandchain_v1_oracle_proof_proto_rawDescGZIP(), []int{19}
}

func (x *RequestsCountProof) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RequestsCountProof) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RequestsCountProof) GetMerklePaths() []*IAVLMerklePath {
	if x != nil {
		return x.MerklePaths
	}
	return nil
}

var File_bandchain_v1_oracle_proof_proto protoreflect.FileDescriptor

var file_bandchain_v1_oracle_proof_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x74,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x78, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74,
	0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x0d, 0x65, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xaf, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde,
	0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c,
	0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x0d, 0x65, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34,
	0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74,
	0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x65, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56,
	0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x61, 0x0a, 0x17, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56, 0x0a, 0x11, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x6e,
	0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xaa, 0x01,
	0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0c,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x49, 0x41, 0x56, 0x4c, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x49,
	0x41, 0x56, 0x4c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x8a, 0x03, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x6c,
	0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61,
	0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x54, 0x4d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x8e, 0x06, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x61, 0x76, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x4b, 0xe2, 0xde, 0x1f, 0x13, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x49, 0x41, 0x56, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0xfa, 0xde, 0x1f,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65,
	0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69,
	0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x13, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x61, 0x76, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x69, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x13, 0x6d, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x7d, 0x0a, 0x21, 0x69, 0x62, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x63, 0x61, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde,
	0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c,
	0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x1c, 0x69, 0x62, 0x63, 0x54, 0x6f, 0x49, 0x63, 0x61, 0x68, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x83, 0x01, 0x0a, 0x24, 0x66, 0x65, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x1f, 0x66, 0x65, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f,
	0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x1e, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62,
	0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73,
	0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x1f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xb6, 0x05, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x19, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34,
	0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74,
	0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x15, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x6a,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x26, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65,
	0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69,
	0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x21, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x60, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x71, 0x0a, 0x1a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74,
	0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x17, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x22, 0xdf, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x86, 0x02, 0x0a, 0x0b,
	0x54, 0x4d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x01, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x01, 0x72, 0x12,
	0x42, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde, 0x1f, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74,
	0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x76, 0x12, 0x61, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x34, 0xfa, 0xde,
	0x1f, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x74, 0x62, 0x66, 0x74, 0x2f, 0x6c,
	0x69, 0x62, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0c, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x49, 0x41, 0x56, 0x4c, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0xdb, 0x03, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x26, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x2b, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0xaf, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x32, 0x2e, 0x62, 0x61,
	0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x62,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0xb9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e,
	0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x42, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0xa2, 0x02, 0x03, 0x42, 0x56, 0x4f, 0xaa, 0x02, 0x13,
	0x42, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0xca, 0x02, 0x13, 0x42, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c,
	0x56, 0x31, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0xe2, 0x02, 0x1f, 0x42, 0x61, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x42, 0x61,
	0x6e, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bandchain_v1_oracle_proof_proto_rawDescOnce sync.Once
	file_bandchain_v1_oracle_proof_proto_rawDescData = file_bandchain_v1_oracle_proof_proto_rawDesc
)

func file_bandchain_v1_oracle_proof_proto_rawDescGZIP() []byte {
	file_bandchain_v1_oracle_proof_proto_rawDescOnce.Do(func() {
		file_bandchain_v1_oracle_proof_proto_rawDescData = protoimpl.X.CompressGZIP(file_bandchain_v1_oracle_proof_proto_rawDescData)
	})
	return file_bandchain_v1_oracle_proof_proto_rawDescData
}

var file_bandchain_v1_oracle_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_bandchain_v1_oracle_proof_proto_goTypes = []interface{}{
	(*QueryProofRequest)(nil),              // 0: bandchain.v1.oracle.QueryProofRequest
	(*QueryProofResponse)(nil),             // 1: bandchain.v1.oracle.QueryProofResponse
	(*QueryMultiProofRequest)(nil),         // 2: bandchain.v1.oracle.QueryMultiProofRequest
	(*QueryMultiProofResponse)(nil),        // 3: bandchain.v1.oracle.QueryMultiProofResponse
	(*QueryRequestCountProofRequest)(nil),  // 4: bandchain.v1.oracle.QueryRequestCountProofRequest
	(*QueryRequestCountProofResponse)(nil), // 5: bandchain.v1.oracle.QueryRequestCountProofResponse
	(*SingleProofResponse)(nil),            // 6: bandchain.v1.oracle.SingleProofResponse
	(*MultiProofResponse)(nil),             // 7: bandchain.v1.oracle.MultiProofResponse
	(*CountProofResponse)(nil),             // 8: bandchain.v1.oracle.CountProofResponse
	(*SingleProof)(nil),                    // 9: bandchain.v1.oracle.SingleProof
	(*MultiProof)(nil),                     // 10: bandchain.v1.oracle.MultiProof
	(*CountProof)(nil),                     // 11: bandchain.v1.oracle.CountProof
	(*OracleDataProof)(nil),                // 12: bandchain.v1.oracle.OracleDataProof
	(*IAVLMerklePath)(nil),                 // 13: bandchain.v1.oracle.IAVLMerklePath
	(*BlockRelayProof)(nil),                // 14: bandchain.v1.oracle.BlockRelayProof
	(*MultiStoreProof)(nil),                // 15: bandchain.v1.oracle.MultiStoreProof
	(*BlockHeaderMerkleParts)(nil),         // 16: bandchain.v1.oracle.BlockHeaderMerkleParts
	(*CommonEncodedVotePart)(nil),          // 17: bandchain.v1.oracle.CommonEncodedVotePart
	(*TMSignature)(nil),                    // 18: bandchain.v1.oracle.TMSignature
	(*RequestsCountProof)(nil),             // 19: bandchain.v1.oracle.RequestsCountProof
	(*v1.Result)(nil),                      // 20: oracle.v1.Result
}
var file_bandchain_v1_oracle_proof_proto_depIdxs = []int32{
	6,  // 0: bandchain.v1.oracle.QueryProofResponse.result:type_name -> bandchain.v1.oracle.SingleProofResponse
	7,  // 1: bandchain.v1.oracle.QueryMultiProofResponse.result:type_name -> bandchain.v1.oracle.MultiProofResponse
	8,  // 2: bandchain.v1.oracle.QueryRequestCountProofResponse.result:type_name -> bandchain.v1.oracle.CountProofResponse
	9,  // 3: bandchain.v1.oracle.SingleProofResponse.proof:type_name -> bandchain.v1.oracle.SingleProof
	10, // 4: bandchain.v1.oracle.MultiProofResponse.proof:type_name -> bandchain.v1.oracle.MultiProof
	11, // 5: bandchain.v1.oracle.CountProofResponse.proof:type_name -> bandchain.v1.oracle.CountProof
	12, // 6: bandchain.v1.oracle.SingleProof.oracle_data_proof:type_name -> bandchain.v1.oracle.OracleDataProof
	14, // 7: bandchain.v1.oracle.SingleProof.block_relay_proof:type_name -> bandchain.v1.oracle.BlockRelayProof
	12, // 8: bandchain.v1.oracle.MultiProof.oracle_data_multi_proof:type_name -> bandchain.v1.oracle.OracleDataProof
	14, // 9: bandchain.v1.oracle.MultiProof.block_relay_proof:type_name -> bandchain.v1.oracle.BlockRelayProof
	19, // 10: bandchain.v1.oracle.CountProof.count_proof:type_name -> bandchain.v1.oracle.RequestsCountProof
	14, // 11: bandchain.v1.oracle.CountProof.block_relay_proof:type_name -> bandchain.v1.oracle.BlockRelayProof
	20, // 12: bandchain.v1.oracle.OracleDataProof.result:type_name -> oracle.v1.Result
	13, // 13: bandchain.v1.oracle.OracleDataProof.merkle_paths:type_name -> bandchain.v1.oracle.IAVLMerklePath
	15, // 14: bandchain.v1.oracle.BlockRelayProof.multi_store_proof:type_name -> bandchain.v1.oracle.MultiStoreProof
	16, // 15: bandchain.v1.oracle.BlockRelayProof.block_header_merkle_parts:type_name -> bandchain.v1.oracle.BlockHeaderMerkleParts
	17, // 16: bandchain.v1.oracle.BlockRelayProof.common_encoded_vote_part:type_name -> bandchain.v1.oracle.CommonEncodedVotePart
	18, // 17: bandchain.v1.oracle.BlockRelayProof.signatures:type_name -> bandchain.v1.oracle.TMSignature
	13, // 18: bandchain.v1.oracle.RequestsCountProof.merkle_paths:type_name -> bandchain.v1.oracle.IAVLMerklePath
	0,  // 19: bandchain.v1.oracle.Service.Proof:input_type -> bandchain.v1.oracle.QueryProofRequest
	2,  // 20: bandchain.v1.oracle.Service.MultiProof:input_type -> bandchain.v1.oracle.QueryMultiProofRequest
	4,  // 21: bandchain.v1.oracle.Service.RequestCountProof:input_type -> bandchain.v1.oracle.QueryRequestCountProofRequest
	1,  // 22: bandchain.v1.oracle.Service.Proof:output_type -> bandchain.v1.oracle.QueryProofResponse
	3,  // 23: bandchain.v1.oracle.Service.MultiProof:output_type -> bandchain.v1.oracle.QueryMultiProofResponse
	5,  // 24: bandchain.v1.oracle.Service.RequestCountProof:output_type -> bandchain.v1.oracle.QueryRequestCountProofResponse
	22, // [22:25] is the sub-list for method output_type
	19, // [19:22] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_bandchain_v1_oracle_proof_proto_init() }
func file_bandchain_v1_oracle_proof_proto_init() {
	if File_bandchain_v1_oracle_proof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bandchain_v1_oracle_proof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMultiProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMultiProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequestCountProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequestCountProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAVLMerklePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRelayProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiStoreProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderMerkleParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonEncodedVotePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandchain_v1_oracle_proof_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestsCountProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bandchain_v1_oracle_proof_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bandchain_v1_oracle_proof_proto_goTypes,
		DependencyIndexes: file_bandchain_v1_oracle_proof_proto_depIdxs,
		MessageInfos:      file_bandchain_v1_oracle_proof_proto_msgTypes,
	}.Build()
	File_bandchain_v1_oracle_proof_proto = out.File
	file_bandchain_v1_oracle_proof_proto_rawDesc = nil
	file_bandchain_v1_oracle_proof_proto_goTypes = nil
	file_bandchain_v1_oracle_proof_proto_depIdxs = nil
}
