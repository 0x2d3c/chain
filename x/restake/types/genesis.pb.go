// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restake/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState represents the initial state of the blockchain.
type GenesisState struct {
	// Keys is a list of keys in the module.
	Keys []Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
	// Stake is a list of stakes in the module.
	Stakes []Stake `protobuf:"bytes,2,rep,name=stakes,proto3" json:"stakes"`
	// Rewards is a list of rewards in the module.
	Rewards []RewardGenesis `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards"`
	// Remainder is a remainder amount in the module.
	Remainder Remainder `protobuf:"bytes,4,opt,name=remainder,proto3" json:"remainder"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4e43bd57768571, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetKeys() []Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *GenesisState) GetStakes() []Stake {
	if m != nil {
		return m.Stakes
	}
	return nil
}

func (m *GenesisState) GetRewards() []RewardGenesis {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *GenesisState) GetRemainder() Remainder {
	if m != nil {
		return m.Remainder
	}
	return Remainder{}
}

// RewardGenesis message represents reward details for genesis state.
type RewardGenesis struct {
	// Address is the owner address of this reward.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Key is the key that this rewards belongs to.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Amounts is a list of reward amounts for this address and key.
	Amounts github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"amounts"`
}

func (m *RewardGenesis) Reset()         { *m = RewardGenesis{} }
func (m *RewardGenesis) String() string { return proto.CompactTextString(m) }
func (*RewardGenesis) ProtoMessage()    {}
func (*RewardGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4e43bd57768571, []int{1}
}
func (m *RewardGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardGenesis.Merge(m, src)
}
func (m *RewardGenesis) XXX_Size() int {
	return m.Size()
}
func (m *RewardGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_RewardGenesis proto.InternalMessageInfo

func (m *RewardGenesis) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardGenesis) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RewardGenesis) GetAmounts() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "restake.v1beta1.GenesisState")
	proto.RegisterType((*RewardGenesis)(nil), "restake.v1beta1.RewardGenesis")
}

func init() { proto.RegisterFile("restake/v1beta1/genesis.proto", fileDescriptor_aa4e43bd57768571) }

var fileDescriptor_aa4e43bd57768571 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0xcf, 0xbd, 0xa8, 0xa7, 0xba, 0x20, 0xc0, 0x3a, 0xa1, 0x70, 0x80, 0xaf, 0xea, 0x74,
	0x02, 0x35, 0xa6, 0x81, 0x01, 0x31, 0x54, 0x22, 0x20, 0x21, 0xc1, 0x96, 0xdb, 0x58, 0x90, 0x93,
	0x58, 0xa9, 0x15, 0x62, 0x9f, 0x6c, 0xb7, 0x90, 0xb7, 0xe0, 0x11, 0x18, 0x11, 0x13, 0x03, 0x0f,
	0xd1, 0x05, 0xa9, 0x62, 0x62, 0x02, 0x74, 0x37, 0xc0, 0x03, 0xf0, 0x00, 0x28, 0xce, 0x17, 0x0a,
	0x3d, 0x96, 0x3b, 0x7f, 0xf9, 0xff, 0x7f, 0xdf, 0xf7, 0x77, 0xbe, 0xe0, 0x9b, 0x46, 0x58, 0xc7,
	0x2b, 0xc1, 0x8e, 0xf7, 0x33, 0xe1, 0xf8, 0x3e, 0x2b, 0x85, 0x12, 0x56, 0xda, 0x68, 0x61, 0xb4,
	0xd3, 0xe4, 0x12, 0xc8, 0x11, 0xc8, 0x93, 0x2b, 0xbc, 0x96, 0x4a, 0x33, 0xff, 0xdb, 0x79, 0x26,
	0xe3, 0x52, 0x97, 0xda, 0x1f, 0x59, 0x7b, 0x82, 0xa7, 0xd7, 0x72, 0x6d, 0x6b, 0x6d, 0x5f, 0x74,
	0x42, 0x57, 0x80, 0x44, 0xbb, 0x8a, 0x65, 0xdc, 0x9e, 0xcd, 0xcd, 0xb5, 0x54, 0xa0, 0x5f, 0x3f,
	0x9f, 0xc9, 0x35, 0x0b, 0x01, 0xf0, 0xee, 0x2f, 0x84, 0x2f, 0x3c, 0xe9, 0x32, 0xce, 0x1d, 0x77,
	0x82, 0x44, 0x38, 0xa8, 0x44, 0x63, 0x43, 0xb4, 0x33, 0x9c, 0x6d, 0xc7, 0xe3, 0xe8, 0x5c, 0xe2,
	0xe8, 0x99, 0x68, 0x92, 0xe0, 0xe4, 0xeb, 0x74, 0x90, 0x7a, 0x1f, 0xb9, 0x87, 0x37, 0xbd, 0xc1,
	0x86, 0x1b, 0x9e, 0xb8, 0xba, 0x46, 0xcc, 0xdb, 0x0a, 0x18, 0xf0, 0x92, 0x03, 0x3c, 0x32, 0xe2,
	0x15, 0x37, 0x85, 0x0d, 0x87, 0x1e, 0xa3, 0x6b, 0x58, 0xea, 0x75, 0xc8, 0x06, 0x78, 0x0f, 0x91,
	0x03, 0xbc, 0x65, 0x44, 0xcd, 0xa5, 0x2a, 0x84, 0x09, 0x83, 0x1d, 0x34, 0xdb, 0x8e, 0x27, 0xff,
	0xe9, 0x00, 0x0e, 0xa0, 0xcf, 0x90, 0xdd, 0x4f, 0x08, 0x5f, 0xfc, 0x67, 0x00, 0x89, 0xf1, 0x88,
	0x17, 0x85, 0x11, 0xb6, 0xbd, 0x3a, 0x9a, 0x6d, 0x25, 0xe1, 0xe7, 0x8f, 0x7b, 0x63, 0x78, 0xd1,
	0x0f, 0x3b, 0x65, 0xee, 0x8c, 0x54, 0x65, 0xda, 0x1b, 0xc9, 0x65, 0x3c, 0xac, 0x44, 0x13, 0x6e,
	0xb4, 0xfe, 0xb4, 0x3d, 0x92, 0x05, 0x1e, 0xf1, 0x5a, 0x1f, 0x29, 0xd7, 0xdf, 0xeb, 0x46, 0x04,
	0x2d, 0xda, 0xed, 0xfc, 0x49, 0xf6, 0x58, 0xe4, 0x8f, 0xb4, 0x54, 0xc9, 0xfd, 0x36, 0xd7, 0xfb,
	0x6f, 0xd3, 0xdb, 0xa5, 0x74, 0x87, 0x47, 0x59, 0x94, 0xeb, 0x1a, 0x76, 0x0b, 0x7f, 0x7b, 0xb6,
	0xa8, 0x60, 0x5f, 0xc0, 0xd8, 0x77, 0x3f, 0x3e, 0xdc, 0x42, 0x69, 0x3f, 0xe6, 0x41, 0xf0, 0xf3,
	0xed, 0x14, 0x25, 0x4f, 0x4f, 0x96, 0x14, 0x9d, 0x2e, 0x29, 0xfa, 0xbe, 0xa4, 0xe8, 0xcd, 0x8a,
	0x0e, 0x4e, 0x57, 0x74, 0xf0, 0x65, 0x45, 0x07, 0xcf, 0xef, 0xfc, 0xd5, 0x3a, 0xe3, 0xaa, 0xf0,
	0x6b, 0xcf, 0xf5, 0x4b, 0x96, 0x1f, 0x72, 0xa9, 0xd8, 0x71, 0xcc, 0x5e, 0xb3, 0xfe, 0x03, 0xf1,
	0x83, 0xb2, 0x4d, 0x6f, 0xb9, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x61, 0x8e, 0x9b, 0xdd, 0xcc,
	0x02, 0x00, 0x00,
}

func (this *RewardGenesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardGenesis)
	if !ok {
		that2, ok := that.(RewardGenesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Amounts) != len(that1.Amounts) {
		return false
	}
	for i := range this.Amounts {
		if !this.Amounts[i].Equal(&that1.Amounts[i]) {
			return false
		}
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Remainder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Remainder.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *RewardGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, Stake{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, RewardGenesis{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remainder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Remainder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.DecCoin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
