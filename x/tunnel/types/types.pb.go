// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tunnel/v1beta1/types.proto

package types

import (
	fmt "fmt"
	types1 "github.com/bandprotocol/chain/v2/x/feeds/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TSSRoute struct {
	DestinationChainId         string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *TSSRoute) Reset()         { *m = TSSRoute{} }
func (m *TSSRoute) String() string { return proto.CompactTextString(m) }
func (*TSSRoute) ProtoMessage()    {}
func (*TSSRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_874964ec163fad19, []int{0}
}
func (m *TSSRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoute.Merge(m, src)
}
func (m *TSSRoute) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoute proto.InternalMessageInfo

func (m *TSSRoute) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *TSSRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

type AxelarRoute struct {
	DestinationChainId         string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *AxelarRoute) Reset()         { *m = AxelarRoute{} }
func (m *AxelarRoute) String() string { return proto.CompactTextString(m) }
func (*AxelarRoute) ProtoMessage()    {}
func (*AxelarRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_874964ec163fad19, []int{1}
}
func (m *AxelarRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarRoute.Merge(m, src)
}
func (m *AxelarRoute) XXX_Size() int {
	return m.Size()
}
func (m *AxelarRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarRoute.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarRoute proto.InternalMessageInfo

func (m *AxelarRoute) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *AxelarRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

type SignalInfo struct {
	SignalId     string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	DeviationBPS uint64 `protobuf:"varint,2,opt,name=deviation_bps,json=deviationBps,proto3" json:"deviation_bps,omitempty"`
	Interval     uint64 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *SignalInfo) Reset()         { *m = SignalInfo{} }
func (m *SignalInfo) String() string { return proto.CompactTextString(m) }
func (*SignalInfo) ProtoMessage()    {}
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_874964ec163fad19, []int{2}
}
func (m *SignalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalInfo.Merge(m, src)
}
func (m *SignalInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignalInfo proto.InternalMessageInfo

func (m *SignalInfo) GetSignalId() string {
	if m != nil {
		return m.SignalId
	}
	return ""
}

func (m *SignalInfo) GetDeviationBPS() uint64 {
	if m != nil {
		return m.DeviationBPS
	}
	return 0
}

func (m *SignalInfo) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type SignalPriceInfo struct {
	SignalId      string     `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	DeviationBPS  uint64     `protobuf:"varint,2,opt,name=deviation_bps,json=deviationBps,proto3" json:"deviation_bps,omitempty"`
	Interval      uint64     `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Price         uint64     `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	LastTimestamp *time.Time `protobuf:"bytes,5,opt,name=LastTimestamp,proto3,stdtime" json:"LastTimestamp,omitempty"`
}

func (m *SignalPriceInfo) Reset()         { *m = SignalPriceInfo{} }
func (m *SignalPriceInfo) String() string { return proto.CompactTextString(m) }
func (*SignalPriceInfo) ProtoMessage()    {}
func (*SignalPriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_874964ec163fad19, []int{3}
}
func (m *SignalPriceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalPriceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalPriceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalPriceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalPriceInfo.Merge(m, src)
}
func (m *SignalPriceInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignalPriceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalPriceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignalPriceInfo proto.InternalMessageInfo

func (m *SignalPriceInfo) GetSignalId() string {
	if m != nil {
		return m.SignalId
	}
	return ""
}

func (m *SignalPriceInfo) GetDeviationBPS() uint64 {
	if m != nil {
		return m.DeviationBPS
	}
	return 0
}

func (m *SignalPriceInfo) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *SignalPriceInfo) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SignalPriceInfo) GetLastTimestamp() *time.Time {
	if m != nil {
		return m.LastTimestamp
	}
	return nil
}

type Tunnel struct {
	Id                       uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Route                    *types.Any         `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	FeedType                 types1.FeedType    `protobuf:"varint,3,opt,name=feed_type,json=feedType,proto3,enum=feeds.v1beta1.FeedType" json:"feed_type,omitempty"`
	FeePayer                 string             `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	SignalPriceInfos         []*SignalPriceInfo `protobuf:"bytes,5,rep,name=signal_price_infos,json=signalPriceInfos,proto3" json:"signal_price_infos,omitempty"`
	LastTriggeredBlockHeight uint64             `protobuf:"varint,6,opt,name=last_triggered_block_height,json=lastTriggeredBlockHeight,proto3" json:"last_triggered_block_height,omitempty"`
	IsActive                 bool               `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt                *time.Time         `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	Creator                  string             `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_874964ec163fad19, []int{4}
}
func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return m.Size()
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tunnel) GetRoute() *types.Any {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *Tunnel) GetFeedType() types1.FeedType {
	if m != nil {
		return m.FeedType
	}
	return types1.FEED_TYPE_UNSPECIFIED
}

func (m *Tunnel) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *Tunnel) GetSignalPriceInfos() []*SignalPriceInfo {
	if m != nil {
		return m.SignalPriceInfos
	}
	return nil
}

func (m *Tunnel) GetLastTriggeredBlockHeight() uint64 {
	if m != nil {
		return m.LastTriggeredBlockHeight
	}
	return 0
}

func (m *Tunnel) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Tunnel) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Tunnel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*TSSRoute)(nil), "tunnel.v1beta1.TSSRoute")
	proto.RegisterType((*AxelarRoute)(nil), "tunnel.v1beta1.AxelarRoute")
	proto.RegisterType((*SignalInfo)(nil), "tunnel.v1beta1.SignalInfo")
	proto.RegisterType((*SignalPriceInfo)(nil), "tunnel.v1beta1.SignalPriceInfo")
	proto.RegisterType((*Tunnel)(nil), "tunnel.v1beta1.Tunnel")
}

func init() { proto.RegisterFile("tunnel/v1beta1/types.proto", fileDescriptor_874964ec163fad19) }

var fileDescriptor_874964ec163fad19 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0x9e, 0xb7, 0x76, 0x6b, 0xdd, 0xfd, 0x93, 0x55, 0x89, 0xd0, 0xa1, 0xb4, 0xda, 0xa9, 0x97,
	0x25, 0xac, 0xb0, 0xcb, 0x10, 0x82, 0x06, 0x34, 0x31, 0x89, 0x49, 0x53, 0xda, 0x13, 0x97, 0xc8,
	0x49, 0xdc, 0xd4, 0x22, 0xb5, 0xa3, 0xd8, 0xad, 0xd6, 0x2b, 0x2f, 0xc0, 0xc4, 0x13, 0x70, 0xe4,
	0x01, 0xf6, 0x10, 0x88, 0xd3, 0xc4, 0x89, 0x13, 0xa0, 0x4e, 0x48, 0x7b, 0x0c, 0x14, 0x3b, 0x29,
	0xeb, 0x38, 0xc0, 0x0d, 0x6e, 0xf9, 0xfc, 0x7d, 0x5f, 0xfc, 0xfb, 0xe7, 0x1f, 0x6c, 0xc8, 0x31,
	0x63, 0x24, 0xb6, 0x27, 0xfb, 0x3e, 0x91, 0x78, 0xdf, 0x96, 0xd3, 0x84, 0x08, 0x2b, 0x49, 0xb9,
	0xe4, 0x68, 0x53, 0x73, 0x56, 0xce, 0x35, 0xea, 0x11, 0x8f, 0xb8, 0xa2, 0xec, 0xec, 0x4b, 0xab,
	0x1a, 0xcd, 0x88, 0xf3, 0x28, 0x26, 0xb6, 0x42, 0xfe, 0x78, 0x60, 0x4b, 0x3a, 0x22, 0x42, 0xe2,
	0x51, 0x92, 0x0b, 0xee, 0xde, 0x16, 0x60, 0x36, 0x2d, 0xa8, 0x80, 0x8b, 0x11, 0x17, 0x9e, 0xfe,
	0xa9, 0x06, 0x05, 0x35, 0x20, 0x24, 0x14, 0xf3, 0xb8, 0x14, 0xd2, 0xd4, 0xee, 0x5b, 0x00, 0x2b,
	0xfd, 0x5e, 0xcf, 0xe5, 0x63, 0x49, 0xd0, 0x7d, 0x58, 0x0f, 0x89, 0x90, 0x94, 0x61, 0x49, 0x39,
	0xf3, 0x82, 0x21, 0xa6, 0xcc, 0xa3, 0xa1, 0x01, 0x5a, 0xa0, 0x5d, 0x75, 0xd1, 0x0d, 0xee, 0x59,
	0x46, 0x1d, 0x87, 0xe8, 0x29, 0xbc, 0xb7, 0xe0, 0xe0, 0x4c, 0xa6, 0x38, 0x90, 0x1e, 0x0e, 0xc3,
	0x94, 0x08, 0x61, 0x2c, 0x2b, 0x67, 0xe3, 0xa6, 0x33, 0x97, 0x74, 0xb5, 0xe2, 0x70, 0xeb, 0xd3,
	0xc5, 0x5e, 0xad, 0xaf, 0x8a, 0xa3, 0x82, 0xd8, 0x7d, 0x07, 0x60, 0xad, 0x7b, 0x46, 0x62, 0x9c,
	0xfe, 0x47, 0x41, 0xbd, 0x01, 0x10, 0xf6, 0x68, 0xc4, 0x70, 0x7c, 0xcc, 0x06, 0x1c, 0xed, 0xc0,
	0xaa, 0x50, 0xe8, 0x57, 0x20, 0x15, 0x7d, 0x70, 0x1c, 0xa2, 0x03, 0xb8, 0x11, 0x92, 0x09, 0xd5,
	0x97, 0xfb, 0x89, 0xbe, 0xaf, 0xe4, 0x6c, 0xcf, 0xbe, 0x36, 0xd7, 0x9f, 0x17, 0x84, 0x73, 0xda,
	0x73, 0xd7, 0xe7, 0x32, 0x27, 0x11, 0xa8, 0x01, 0x2b, 0x94, 0x49, 0x92, 0x4e, 0x70, 0x6c, 0xac,
	0x64, 0x0e, 0x77, 0x8e, 0x0f, 0x4b, 0xd7, 0xef, 0x9b, 0x60, 0xf7, 0x07, 0x80, 0x5b, 0x3a, 0x88,
	0xd3, 0x94, 0x06, 0xe4, 0x5f, 0x44, 0x82, 0xea, 0xb0, 0x9c, 0x64, 0x97, 0x1b, 0x25, 0x45, 0x68,
	0x80, 0x8e, 0xe0, 0xc6, 0x4b, 0x2c, 0x64, 0xbf, 0x98, 0x56, 0xa3, 0xdc, 0x02, 0xed, 0x5a, 0xa7,
	0x61, 0xe9, 0x71, 0xb5, 0x8a, 0x71, 0xb5, 0xe6, 0x0a, 0xa7, 0x74, 0xfe, 0xad, 0x09, 0xdc, 0x45,
	0x5b, 0x9e, 0xe7, 0xf5, 0x0a, 0x5c, 0xd5, 0xc5, 0x47, 0x9b, 0x70, 0x39, 0xcf, 0xab, 0xe4, 0x2e,
	0xd3, 0x10, 0x3d, 0x82, 0xe5, 0x34, 0x6b, 0x88, 0xca, 0xa4, 0xd6, 0xa9, 0xff, 0x76, 0x41, 0x97,
	0x4d, 0x9d, 0xdb, 0xdd, 0x73, 0xb5, 0x07, 0x3d, 0x84, 0xd5, 0x6c, 0xf4, 0xbd, 0xec, 0x5d, 0xaa,
	0xc4, 0x36, 0x3b, 0x77, 0x2c, 0xfd, 0x18, 0xf2, 0xa7, 0x61, 0x1d, 0x11, 0x12, 0xf6, 0xa7, 0x09,
	0x71, 0x2b, 0x83, 0xfc, 0x0b, 0x1d, 0x28, 0x97, 0x97, 0xe0, 0x29, 0x49, 0x55, 0xd6, 0x55, 0xc7,
	0xf8, 0x7c, 0xb1, 0x57, 0xcf, 0x5f, 0x58, 0x3e, 0x32, 0x3d, 0x99, 0x52, 0x16, 0x29, 0xdb, 0x69,
	0xa6, 0x44, 0x27, 0x10, 0xe5, 0x8d, 0x51, 0x25, 0xf2, 0x28, 0x1b, 0x70, 0x61, 0x94, 0x5b, 0x2b,
	0xed, 0x5a, 0xa7, 0x69, 0x2d, 0x6e, 0x03, 0xeb, 0x56, 0x57, 0xdd, 0x6d, 0xb1, 0x78, 0x20, 0xd0,
	0x63, 0xb8, 0x13, 0x63, 0x21, 0x3d, 0x99, 0xd2, 0x28, 0x22, 0x29, 0x09, 0x3d, 0x3f, 0xe6, 0xc1,
	0x6b, 0x6f, 0x48, 0x68, 0x34, 0x94, 0xc6, 0xaa, 0xaa, 0x90, 0x91, 0x49, 0xfa, 0x85, 0xc2, 0xc9,
	0x04, 0x2f, 0x14, 0x9f, 0x8d, 0x09, 0x15, 0x1e, 0x0e, 0x24, 0x9d, 0x10, 0x63, 0xad, 0x05, 0xda,
	0x15, 0xb7, 0x42, 0x45, 0x57, 0x61, 0xf4, 0x04, 0xc2, 0x20, 0x25, 0x58, 0x92, 0xd0, 0xc3, 0xd2,
	0xa8, 0xfc, 0x65, 0xeb, 0xaa, 0xb9, 0xa7, 0x2b, 0x51, 0x07, 0xae, 0x29, 0xc0, 0x53, 0xa3, 0xfa,
	0x87, 0x02, 0x15, 0x42, 0xdd, 0x6a, 0xe7, 0xe4, 0xc3, 0xcc, 0x04, 0x1f, 0x67, 0x26, 0xb8, 0x9c,
	0x99, 0xe0, 0xfb, 0xcc, 0x04, 0xe7, 0x57, 0xe6, 0xd2, 0xe5, 0x95, 0xb9, 0xf4, 0xe5, 0xca, 0x5c,
	0x7a, 0x65, 0x47, 0x54, 0x0e, 0xc7, 0xbe, 0x15, 0xf0, 0x91, 0xed, 0x63, 0x16, 0xaa, 0x58, 0x02,
	0x1e, 0xdb, 0x6a, 0x09, 0xd8, 0x93, 0x8e, 0x7d, 0x66, 0xe7, 0x3b, 0x57, 0xed, 0x5a, 0x7f, 0x55,
	0x29, 0x1e, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x80, 0xa3, 0x2e, 0x66, 0x8a, 0x05, 0x00, 0x00,
}

func (this *TSSRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoute)
	if !ok {
		that2, ok := that.(TSSRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainId != that1.DestinationChainId {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *AxelarRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AxelarRoute)
	if !ok {
		that2, ok := that.(AxelarRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainId != that1.DestinationChainId {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *SignalInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalInfo)
	if !ok {
		that2, ok := that.(SignalInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalId != that1.SignalId {
		return false
	}
	if this.DeviationBPS != that1.DeviationBPS {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *SignalPriceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalPriceInfo)
	if !ok {
		that2, ok := that.(SignalPriceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalId != that1.SignalId {
		return false
	}
	if this.DeviationBPS != that1.DeviationBPS {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if that1.LastTimestamp == nil {
		if this.LastTimestamp != nil {
			return false
		}
	} else if !this.LastTimestamp.Equal(*that1.LastTimestamp) {
		return false
	}
	return true
}
func (this *Tunnel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tunnel)
	if !ok {
		that2, ok := that.(Tunnel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Route.Equal(that1.Route) {
		return false
	}
	if this.FeedType != that1.FeedType {
		return false
	}
	if this.FeePayer != that1.FeePayer {
		return false
	}
	if len(this.SignalPriceInfos) != len(that1.SignalPriceInfos) {
		return false
	}
	for i := range this.SignalPriceInfos {
		if !this.SignalPriceInfos[i].Equal(that1.SignalPriceInfos[i]) {
			return false
		}
	}
	if this.LastTriggeredBlockHeight != that1.LastTriggeredBlockHeight {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (m *TSSRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AxelarRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviationBPS != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DeviationBPS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalId) > 0 {
		i -= len(m.SignalId)
		copy(dAtA[i:], m.SignalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SignalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalPriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalPriceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalPriceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTimestamp != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastTimestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastTimestamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviationBPS != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DeviationBPS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalId) > 0 {
		i -= len(m.SignalId)
		copy(dAtA[i:], m.SignalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SignalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTypes(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.LastTriggeredBlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastTriggeredBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SignalPriceInfos) > 0 {
		for iNdEx := len(m.SignalPriceInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPriceInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if m.FeedType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FeedType))
		i--
		dAtA[i] = 0x18
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TSSRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AxelarRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SignalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DeviationBPS != 0 {
		n += 1 + sovTypes(uint64(m.DeviationBPS))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *SignalPriceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DeviationBPS != 0 {
		n += 1 + sovTypes(uint64(m.DeviationBPS))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.Price != 0 {
		n += 1 + sovTypes(uint64(m.Price))
	}
	if m.LastTimestamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastTimestamp)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Tunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FeedType != 0 {
		n += 1 + sovTypes(uint64(m.FeedType))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SignalPriceInfos) > 0 {
		for _, e := range m.SignalPriceInfos {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LastTriggeredBlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.LastTriggeredBlockHeight))
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TSSRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationBPS", wireType)
			}
			m.DeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalPriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalPriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalPriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationBPS", wireType)
			}
			m.DeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTimestamp == nil {
				m.LastTimestamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Any{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedType", wireType)
			}
			m.FeedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeedType |= types1.FeedType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPriceInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPriceInfos = append(m.SignalPriceInfos, &SignalPriceInfo{})
			if err := m.SignalPriceInfos[len(m.SignalPriceInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTriggeredBlockHeight", wireType)
			}
			m.LastTriggeredBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTriggeredBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
