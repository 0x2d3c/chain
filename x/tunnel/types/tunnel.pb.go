// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tunnel/v1beta1/tunnel.proto

package types

import (
	fmt "fmt"
	github_com_bandprotocol_chain_v2_x_bandtss_types "github.com/bandprotocol/chain/v2/x/bandtss/types"
	types1 "github.com/bandprotocol/chain/v2/x/feeds/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Route is the type for a route
type TSSRoute struct {
	DestinationChainID         string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *TSSRoute) Reset()         { *m = TSSRoute{} }
func (m *TSSRoute) String() string { return proto.CompactTextString(m) }
func (*TSSRoute) ProtoMessage()    {}
func (*TSSRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{0}
}
func (m *TSSRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoute.Merge(m, src)
}
func (m *TSSRoute) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoute proto.InternalMessageInfo

func (m *TSSRoute) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *TSSRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// AxelarRoute is the type for an Axelar route
type AxelarRoute struct {
	DestinationChainID         string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *AxelarRoute) Reset()         { *m = AxelarRoute{} }
func (m *AxelarRoute) String() string { return proto.CompactTextString(m) }
func (*AxelarRoute) ProtoMessage()    {}
func (*AxelarRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{1}
}
func (m *AxelarRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarRoute.Merge(m, src)
}
func (m *AxelarRoute) XXX_Size() int {
	return m.Size()
}
func (m *AxelarRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarRoute.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarRoute proto.InternalMessageInfo

func (m *AxelarRoute) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *AxelarRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// SignalInfo is the type for a signal info
type SignalInfo struct {
	SignalID     string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	DeviationBPS uint64 `protobuf:"varint,2,opt,name=deviation_bps,json=deviationBps,proto3" json:"deviation_bps,omitempty"`
	Interval     int64  `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *SignalInfo) Reset()         { *m = SignalInfo{} }
func (m *SignalInfo) String() string { return proto.CompactTextString(m) }
func (*SignalInfo) ProtoMessage()    {}
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{2}
}
func (m *SignalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalInfo.Merge(m, src)
}
func (m *SignalInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignalInfo proto.InternalMessageInfo

func (m *SignalInfo) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SignalInfo) GetDeviationBPS() uint64 {
	if m != nil {
		return m.DeviationBPS
	}
	return 0
}

func (m *SignalInfo) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// SignalPriceInfo is the type for a signal price info
type SignalPriceInfo struct {
	SignalID      string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	DeviationBPS  uint64 `protobuf:"varint,2,opt,name=deviation_bps,json=deviationBps,proto3" json:"deviation_bps,omitempty"`
	Interval      int64  `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Price         uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	LastTimestamp int64  `protobuf:"varint,5,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
}

func (m *SignalPriceInfo) Reset()         { *m = SignalPriceInfo{} }
func (m *SignalPriceInfo) String() string { return proto.CompactTextString(m) }
func (*SignalPriceInfo) ProtoMessage()    {}
func (*SignalPriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{3}
}
func (m *SignalPriceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalPriceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalPriceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalPriceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalPriceInfo.Merge(m, src)
}
func (m *SignalPriceInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignalPriceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalPriceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignalPriceInfo proto.InternalMessageInfo

func (m *SignalPriceInfo) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SignalPriceInfo) GetDeviationBPS() uint64 {
	if m != nil {
		return m.DeviationBPS
	}
	return 0
}

func (m *SignalPriceInfo) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *SignalPriceInfo) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SignalPriceInfo) GetLastTimestamp() int64 {
	if m != nil {
		return m.LastTimestamp
	}
	return 0
}

// Tunnel is the type for a tunnel
type Tunnel struct {
	ID                       uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NonceCount               uint64            `protobuf:"varint,2,opt,name=nonce_count,json=nonceCount,proto3" json:"nonce_count,omitempty"`
	Route                    *types.Any        `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	FeedType                 types1.FeedType   `protobuf:"varint,4,opt,name=feed_type,json=feedType,proto3,enum=feeds.v1beta1.FeedType" json:"feed_type,omitempty"`
	FeePayer                 string            `protobuf:"bytes,5,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	SignalPriceInfos         []SignalPriceInfo `protobuf:"bytes,6,rep,name=signal_price_infos,json=signalPriceInfos,proto3" json:"signal_price_infos"`
	LastTriggeredBlockHeight uint64            `protobuf:"varint,7,opt,name=last_triggered_block_height,json=lastTriggeredBlockHeight,proto3" json:"last_triggered_block_height,omitempty"`
	IsActive                 bool              `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt                int64             `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Creator                  string            `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{4}
}
func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return m.Size()
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Tunnel) GetNonceCount() uint64 {
	if m != nil {
		return m.NonceCount
	}
	return 0
}

func (m *Tunnel) GetRoute() *types.Any {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *Tunnel) GetFeedType() types1.FeedType {
	if m != nil {
		return m.FeedType
	}
	return types1.FEED_TYPE_UNSPECIFIED
}

func (m *Tunnel) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *Tunnel) GetSignalPriceInfos() []SignalPriceInfo {
	if m != nil {
		return m.SignalPriceInfos
	}
	return nil
}

func (m *Tunnel) GetLastTriggeredBlockHeight() uint64 {
	if m != nil {
		return m.LastTriggeredBlockHeight
	}
	return 0
}

func (m *Tunnel) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Tunnel) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Tunnel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// PendingTriggerTunnels is the type for a list of tunnel IDs that are waiting to be triggered
type PendingTriggerTunnels struct {
	// IDs is a list of tunnel IDs that are waiting to be triggered
	IDs []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *PendingTriggerTunnels) Reset()         { *m = PendingTriggerTunnels{} }
func (m *PendingTriggerTunnels) String() string { return proto.CompactTextString(m) }
func (*PendingTriggerTunnels) ProtoMessage()    {}
func (*PendingTriggerTunnels) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{5}
}
func (m *PendingTriggerTunnels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTriggerTunnels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTriggerTunnels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTriggerTunnels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTriggerTunnels.Merge(m, src)
}
func (m *PendingTriggerTunnels) XXX_Size() int {
	return m.Size()
}
func (m *PendingTriggerTunnels) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTriggerTunnels.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTriggerTunnels proto.InternalMessageInfo

func (m *PendingTriggerTunnels) GetIDs() []uint64 {
	if m != nil {
		return m.IDs
	}
	return nil
}

// Packet is the packet that tunnel produces
type Packet struct {
	TunnelID         uint64            `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Nonce            uint64            `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	FeedType         types1.FeedType   `protobuf:"varint,3,opt,name=feed_type,json=feedType,proto3,enum=feeds.v1beta1.FeedType" json:"feed_type,omitempty"`
	SignalPriceInfos []SignalPriceInfo `protobuf:"bytes,4,rep,name=signal_price_infos,json=signalPriceInfos,proto3" json:"signal_price_infos"`
	PacketContent    *types.Any        `protobuf:"bytes,5,opt,name=packet_content,json=packetContent,proto3" json:"packet_content,omitempty"`
	CreatedAt        int64             `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{6}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *Packet) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Packet) GetFeedType() types1.FeedType {
	if m != nil {
		return m.FeedType
	}
	return types1.FEED_TYPE_UNSPECIFIED
}

func (m *Packet) GetSignalPriceInfos() []SignalPriceInfo {
	if m != nil {
		return m.SignalPriceInfos
	}
	return nil
}

func (m *Packet) GetPacketContent() *types.Any {
	if m != nil {
		return m.PacketContent
	}
	return nil
}

func (m *Packet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// TSSPacketContent is the packet content for TSS
type TSSPacketContent struct {
	SigningID                  github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3,casttype=github.com/bandprotocol/chain/v2/x/bandtss/types.SigningID" json:"signing_id,omitempty"`
	DestinationChainID         string                                                     `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string                                                     `protobuf:"bytes,3,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *TSSPacketContent) Reset()         { *m = TSSPacketContent{} }
func (m *TSSPacketContent) String() string { return proto.CompactTextString(m) }
func (*TSSPacketContent) ProtoMessage()    {}
func (*TSSPacketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{7}
}
func (m *TSSPacketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSPacketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSPacketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSPacketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSPacketContent.Merge(m, src)
}
func (m *TSSPacketContent) XXX_Size() int {
	return m.Size()
}
func (m *TSSPacketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSPacketContent.DiscardUnknown(m)
}

var xxx_messageInfo_TSSPacketContent proto.InternalMessageInfo

func (m *TSSPacketContent) GetSigningID() github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID {
	if m != nil {
		return m.SigningID
	}
	return 0
}

func (m *TSSPacketContent) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *TSSPacketContent) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// AxelarPacketContent is the packet content for Axelar
type AxelarPacketContent struct {
	IBCQueueID                 uint64 `protobuf:"varint,1,opt,name=ibc_queue_id,json=ibcQueueId,proto3" json:"ibc_queue_id,omitempty"`
	DestinationChainID         string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	DestinationContractAddress string `protobuf:"bytes,3,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *AxelarPacketContent) Reset()         { *m = AxelarPacketContent{} }
func (m *AxelarPacketContent) String() string { return proto.CompactTextString(m) }
func (*AxelarPacketContent) ProtoMessage()    {}
func (*AxelarPacketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{8}
}
func (m *AxelarPacketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarPacketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarPacketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarPacketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarPacketContent.Merge(m, src)
}
func (m *AxelarPacketContent) XXX_Size() int {
	return m.Size()
}
func (m *AxelarPacketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarPacketContent.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarPacketContent proto.InternalMessageInfo

func (m *AxelarPacketContent) GetIBCQueueID() uint64 {
	if m != nil {
		return m.IBCQueueID
	}
	return 0
}

func (m *AxelarPacketContent) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *AxelarPacketContent) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*TSSRoute)(nil), "tunnel.v1beta1.TSSRoute")
	proto.RegisterType((*AxelarRoute)(nil), "tunnel.v1beta1.AxelarRoute")
	proto.RegisterType((*SignalInfo)(nil), "tunnel.v1beta1.SignalInfo")
	proto.RegisterType((*SignalPriceInfo)(nil), "tunnel.v1beta1.SignalPriceInfo")
	proto.RegisterType((*Tunnel)(nil), "tunnel.v1beta1.Tunnel")
	proto.RegisterType((*PendingTriggerTunnels)(nil), "tunnel.v1beta1.PendingTriggerTunnels")
	proto.RegisterType((*Packet)(nil), "tunnel.v1beta1.Packet")
	proto.RegisterType((*TSSPacketContent)(nil), "tunnel.v1beta1.TSSPacketContent")
	proto.RegisterType((*AxelarPacketContent)(nil), "tunnel.v1beta1.AxelarPacketContent")
}

func init() { proto.RegisterFile("tunnel/v1beta1/tunnel.proto", fileDescriptor_b5270a56045f1d8a) }

var fileDescriptor_b5270a56045f1d8a = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x93, 0x34, 0x4d, 0x5e, 0xdb, 0x50, 0x0d, 0x61, 0xf1, 0xb6, 0x10, 0x47, 0x91, 0x90,
	0xc2, 0xa1, 0x36, 0x1b, 0x58, 0x0e, 0x95, 0x90, 0x88, 0x1b, 0xa1, 0xb5, 0x10, 0x22, 0x38, 0x39,
	0x71, 0xb1, 0x1c, 0x7b, 0xe2, 0x0e, 0x9b, 0xce, 0x18, 0xcf, 0x24, 0xda, 0xfc, 0x8b, 0xfd, 0x05,
	0x08, 0x21, 0x21, 0xf1, 0x03, 0xfa, 0x13, 0x38, 0xac, 0xf6, 0xb4, 0xda, 0x13, 0x27, 0x0b, 0xb9,
	0x07, 0x38, 0x72, 0xe6, 0x84, 0x3c, 0xe3, 0xa4, 0x4d, 0xb4, 0xab, 0x5d, 0x09, 0x24, 0xf6, 0x36,
	0xef, 0xbd, 0x6f, 0x9e, 0xdf, 0x7c, 0xdf, 0x7b, 0x2f, 0x81, 0x13, 0x31, 0xa7, 0x14, 0xcf, 0xac,
	0xc5, 0xbd, 0x09, 0x16, 0xfe, 0x3d, 0x4b, 0x99, 0x66, 0x9c, 0x30, 0xc1, 0x50, 0xa3, 0xb0, 0x8a,
	0xe0, 0x71, 0x33, 0x62, 0x11, 0x93, 0x21, 0x2b, 0x3f, 0x29, 0xd4, 0xb1, 0x11, 0x31, 0x16, 0xcd,
	0xb0, 0x25, 0xad, 0xc9, 0x7c, 0x6a, 0x09, 0x72, 0x89, 0xb9, 0xf0, 0x2f, 0xe3, 0x02, 0x70, 0x77,
	0x1b, 0xe0, 0xd3, 0xe5, 0x2a, 0x14, 0x30, 0x7e, 0xc9, 0xb8, 0xa7, 0x92, 0x2a, 0x63, 0x15, 0x9a,
	0x62, 0x1c, 0xf2, 0x75, 0x61, 0xd2, 0x52, 0xa1, 0xce, 0x4f, 0x1a, 0xd4, 0xc6, 0xa3, 0x91, 0xcb,
	0xe6, 0x02, 0xa3, 0x07, 0xd0, 0x0c, 0x31, 0x17, 0x84, 0xfa, 0x82, 0x30, 0xea, 0x05, 0x17, 0x3e,
	0xa1, 0x1e, 0x09, 0x75, 0xad, 0xad, 0x75, 0xeb, 0xf6, 0x9d, 0x2c, 0x35, 0xd0, 0xe0, 0x26, 0x7e,
	0x9e, 0x87, 0x9d, 0x81, 0x8b, 0xc2, 0x6d, 0x5f, 0x88, 0x3e, 0x87, 0xf7, 0x36, 0x32, 0x31, 0x2a,
	0x12, 0x3f, 0x10, 0x9e, 0x1f, 0x86, 0x09, 0xe6, 0x5c, 0x2f, 0xe5, 0x19, 0xdd, 0xe3, 0xdb, 0x37,
	0x0b, 0x48, 0x5f, 0x21, 0xce, 0xe0, 0xe9, 0xd5, 0x69, 0x55, 0x96, 0xe5, 0x74, 0x7e, 0xd6, 0x60,
	0xbf, 0xff, 0x08, 0xcf, 0xfc, 0xe4, 0xcd, 0xae, 0xf3, 0xb1, 0x06, 0x30, 0x22, 0x11, 0xf5, 0x67,
	0x0e, 0x9d, 0x32, 0xf4, 0x21, 0xd4, 0xb9, 0xb4, 0x6e, 0x6a, 0x3b, 0xc8, 0x52, 0xa3, 0x56, 0x40,
	0x06, 0x6e, 0x4d, 0x85, 0x9d, 0x10, 0xdd, 0x87, 0xc3, 0x10, 0x2f, 0x88, 0xaa, 0x62, 0x12, 0xab,
	0x0f, 0x57, 0xec, 0xa3, 0x2c, 0x35, 0x0e, 0x06, 0xab, 0x80, 0x3d, 0x1c, 0xb9, 0x07, 0x6b, 0x98,
	0x1d, 0x73, 0x74, 0x0c, 0x35, 0x42, 0x05, 0x4e, 0x16, 0xfe, 0x4c, 0x2f, 0xb7, 0xb5, 0x6e, 0xd9,
	0x5d, 0xdb, 0x67, 0x95, 0x3f, 0x7f, 0x34, 0xb4, 0xce, 0x73, 0x0d, 0xde, 0x52, 0xdf, 0x1b, 0x26,
	0x24, 0xc0, 0xff, 0x7f, 0x5d, 0xa8, 0x09, 0xbb, 0x71, 0x5e, 0x8a, 0x5e, 0xc9, 0x53, 0xb9, 0xca,
	0x40, 0x1f, 0x40, 0x63, 0xe6, 0x73, 0xe1, 0xad, 0x1b, 0x5e, 0xdf, 0x95, 0xf7, 0x0e, 0x73, 0xef,
	0x78, 0xe5, 0x2c, 0x1e, 0xf5, 0x57, 0x19, 0xaa, 0x63, 0x39, 0x4f, 0xe8, 0x0e, 0x94, 0x8a, 0x47,
	0x54, 0xec, 0x6a, 0x96, 0x1a, 0x25, 0x67, 0xe0, 0x96, 0x48, 0x88, 0x0c, 0xd8, 0xa7, 0x8c, 0x06,
	0xd8, 0x0b, 0xd8, 0x9c, 0x0a, 0x55, 0xb6, 0x0b, 0xd2, 0x75, 0x9e, 0x7b, 0xd0, 0xa7, 0xb0, 0x9b,
	0xe4, 0xaa, 0xc9, 0xfa, 0xf6, 0x7b, 0x4d, 0x53, 0x4d, 0x96, 0xb9, 0x9a, 0x2c, 0xb3, 0x4f, 0x97,
	0xf6, 0x2d, 0x71, 0x5d, 0x05, 0x47, 0x9f, 0x40, 0x3d, 0x9f, 0x1f, 0x4f, 0x2c, 0x63, 0xf5, 0x84,
	0x46, 0xef, 0x5d, 0x53, 0x4d, 0x54, 0x31, 0x5f, 0xe6, 0x17, 0x18, 0x87, 0xe3, 0x65, 0x8c, 0xdd,
	0xda, 0xb4, 0x38, 0xa1, 0xfb, 0xf2, 0x96, 0x17, 0xfb, 0x4b, 0x9c, 0xc8, 0x97, 0xd5, 0x6d, 0xfd,
	0xf9, 0xd5, 0x69, 0xb3, 0x18, 0xd3, 0xa2, 0x99, 0x46, 0x22, 0x21, 0x34, 0x92, 0xd7, 0x86, 0x39,
	0x12, 0x8d, 0x00, 0x15, 0x4a, 0x49, 0x96, 0x3c, 0x42, 0xa7, 0x8c, 0xeb, 0xd5, 0x76, 0xb9, 0xbb,
	0xdf, 0x33, 0xcc, 0xcd, 0x95, 0x62, 0x6e, 0xc9, 0x6c, 0x57, 0x9e, 0xa4, 0xc6, 0x8e, 0x7b, 0xc4,
	0x37, 0xdd, 0x1c, 0x7d, 0x06, 0x27, 0x8a, 0xea, 0x84, 0x44, 0x11, 0x4e, 0x70, 0xe8, 0x4d, 0x66,
	0x2c, 0x78, 0xe8, 0x5d, 0x60, 0x12, 0x5d, 0x08, 0x7d, 0x4f, 0x52, 0xa5, 0x4b, 0xde, 0x57, 0x08,
	0x3b, 0x07, 0x3c, 0x90, 0x71, 0x74, 0x02, 0x75, 0xc2, 0x3d, 0x3f, 0x10, 0x64, 0x81, 0xf5, 0x5a,
	0x5b, 0xeb, 0xd6, 0xdc, 0x1a, 0xe1, 0x7d, 0x69, 0xa3, 0xf7, 0x01, 0x82, 0x04, 0xfb, 0x02, 0x87,
	0x9e, 0x2f, 0xf4, 0xba, 0x94, 0xb0, 0x5e, 0x78, 0xfa, 0x02, 0xf5, 0x60, 0x4f, 0x1a, 0x2c, 0xd1,
	0xe1, 0x15, 0x24, 0xac, 0x80, 0x85, 0xe4, 0x3d, 0x78, 0x67, 0x88, 0x69, 0x48, 0x68, 0x54, 0x14,
	0xa5, 0xf4, 0xe7, 0xe8, 0x2e, 0x94, 0x49, 0xc8, 0x75, 0xad, 0x5d, 0xee, 0x56, 0xec, 0xbd, 0x2c,
	0x35, 0xca, 0xce, 0x80, 0xbb, 0xb9, 0xaf, 0xf3, 0x6b, 0x09, 0xaa, 0x43, 0x3f, 0x78, 0x88, 0x45,
	0xde, 0xf2, 0x8a, 0x2d, 0x6f, 0xdd, 0x2d, 0xb2, 0xe5, 0x55, 0x96, 0xbc, 0xe5, 0x55, 0xd8, 0x09,
	0xf3, 0xfe, 0x94, 0x6d, 0x52, 0xf4, 0x8c, 0x32, 0x36, 0x65, 0x2f, 0xbf, 0xae, 0xec, 0x2f, 0xd6,
	0xaf, 0xf2, 0xef, 0xf4, 0xfb, 0x1a, 0x1a, 0xb1, 0x7c, 0x95, 0x5c, 0x57, 0x98, 0x0a, 0xd9, 0x50,
	0x2f, 0x6b, 0x61, 0xf4, 0xf4, 0xea, 0xb4, 0xa1, 0x58, 0x38, 0x57, 0x70, 0xc7, 0x3d, 0x8c, 0x6f,
	0xdb, 0x5b, 0xa2, 0x55, 0xb7, 0x44, 0xeb, 0xfc, 0x50, 0x82, 0xa3, 0xf1, 0x68, 0xb4, 0x91, 0x03,
	0x7d, 0x07, 0x90, 0x17, 0x46, 0x68, 0x74, 0xc3, 0xe8, 0x97, 0x59, 0x6a, 0xd4, 0x47, 0xca, 0xeb,
	0x0c, 0xfe, 0x4e, 0x8d, 0xb3, 0x88, 0x88, 0x8b, 0xf9, 0xc4, 0x0c, 0xd8, 0xa5, 0x35, 0xf1, 0x69,
	0x28, 0x0b, 0x0b, 0xd8, 0xcc, 0x92, 0x1b, 0xdb, 0x5a, 0xf4, 0xac, 0x47, 0xd2, 0x2f, 0x38, 0xb7,
	0x72, 0x62, 0xb9, 0xb9, 0xbe, 0xed, 0xd6, 0x8b, 0xf4, 0x4e, 0xf8, 0xd2, 0x75, 0x5f, 0xfa, 0xcf,
	0xd7, 0x7d, 0xf9, 0x95, 0xeb, 0xfe, 0x05, 0x74, 0x76, 0xfe, 0xd0, 0xe0, 0x6d, 0xf5, 0xf3, 0xb4,
	0xc9, 0xd1, 0x47, 0x70, 0x40, 0x26, 0x81, 0xf7, 0xfd, 0x1c, 0xcf, 0xf1, 0x0d, 0x4b, 0x8d, 0x2c,
	0x35, 0xc0, 0xb1, 0xcf, 0xbf, 0xc9, 0xdd, 0xce, 0xc0, 0x05, 0x32, 0x09, 0xd4, 0xf9, 0x8d, 0x7f,
	0xa9, 0xfd, 0xd5, 0x2f, 0x59, 0x4b, 0x7b, 0x92, 0xb5, 0xb4, 0x67, 0x59, 0x4b, 0xfb, 0x3d, 0x6b,
	0x69, 0x8f, 0xaf, 0x5b, 0x3b, 0xcf, 0xae, 0x5b, 0x3b, 0xbf, 0x5d, 0xb7, 0x76, 0xbe, 0xb5, 0x5e,
	0x43, 0xee, 0xe2, 0x3f, 0x92, 0x54, 0x7b, 0x52, 0x95, 0x88, 0x8f, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x9d, 0x0d, 0xeb, 0x3a, 0x09, 0x00, 0x00,
}

func (this *TSSRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoute)
	if !ok {
		that2, ok := that.(TSSRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *AxelarRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AxelarRoute)
	if !ok {
		that2, ok := that.(AxelarRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *SignalInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalInfo)
	if !ok {
		that2, ok := that.(SignalInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.DeviationBPS != that1.DeviationBPS {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *SignalPriceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalPriceInfo)
	if !ok {
		that2, ok := that.(SignalPriceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.DeviationBPS != that1.DeviationBPS {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.LastTimestamp != that1.LastTimestamp {
		return false
	}
	return true
}
func (this *Tunnel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tunnel)
	if !ok {
		that2, ok := that.(Tunnel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.NonceCount != that1.NonceCount {
		return false
	}
	if !this.Route.Equal(that1.Route) {
		return false
	}
	if this.FeedType != that1.FeedType {
		return false
	}
	if this.FeePayer != that1.FeePayer {
		return false
	}
	if len(this.SignalPriceInfos) != len(that1.SignalPriceInfos) {
		return false
	}
	for i := range this.SignalPriceInfos {
		if !this.SignalPriceInfos[i].Equal(&that1.SignalPriceInfos[i]) {
			return false
		}
	}
	if this.LastTriggeredBlockHeight != that1.LastTriggeredBlockHeight {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (this *PendingTriggerTunnels) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingTriggerTunnels)
	if !ok {
		that2, ok := that.(PendingTriggerTunnels)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *Packet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet)
	if !ok {
		that2, ok := that.(Packet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TunnelID != that1.TunnelID {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.FeedType != that1.FeedType {
		return false
	}
	if len(this.SignalPriceInfos) != len(that1.SignalPriceInfos) {
		return false
	}
	for i := range this.SignalPriceInfos {
		if !this.SignalPriceInfos[i].Equal(&that1.SignalPriceInfos[i]) {
			return false
		}
	}
	if !this.PacketContent.Equal(that1.PacketContent) {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *TSSPacketContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSPacketContent)
	if !ok {
		that2, ok := that.(TSSPacketContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SigningID != that1.SigningID {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *AxelarPacketContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AxelarPacketContent)
	if !ok {
		that2, ok := that.(AxelarPacketContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IBCQueueID != that1.IBCQueueID {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (m *TSSRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AxelarRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviationBPS != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.DeviationBPS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalPriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalPriceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalPriceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTimestamp != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.LastTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Interval != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviationBPS != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.DeviationBPS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.LastTriggeredBlockHeight != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.LastTriggeredBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SignalPriceInfos) > 0 {
		for iNdEx := len(m.SignalPriceInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPriceInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FeedType != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.FeedType))
		i--
		dAtA[i] = 0x20
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTunnel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NonceCount != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.NonceCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingTriggerTunnels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTriggerTunnels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTriggerTunnels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		dAtA3 := make([]byte, len(m.IDs)*10)
		var j2 int
		for _, num := range m.IDs {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTunnel(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.PacketContent != nil {
		{
			size, err := m.PacketContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTunnel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SignalPriceInfos) > 0 {
		for iNdEx := len(m.SignalPriceInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPriceInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FeedType != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.FeedType))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSPacketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSPacketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSPacketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.SigningID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.SigningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AxelarPacketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarPacketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarPacketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.IBCQueueID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.IBCQueueID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTunnel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTunnel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TSSRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *AxelarRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *SignalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.DeviationBPS != 0 {
		n += 1 + sovTunnel(uint64(m.DeviationBPS))
	}
	if m.Interval != 0 {
		n += 1 + sovTunnel(uint64(m.Interval))
	}
	return n
}

func (m *SignalPriceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.DeviationBPS != 0 {
		n += 1 + sovTunnel(uint64(m.DeviationBPS))
	}
	if m.Interval != 0 {
		n += 1 + sovTunnel(uint64(m.Interval))
	}
	if m.Price != 0 {
		n += 1 + sovTunnel(uint64(m.Price))
	}
	if m.LastTimestamp != 0 {
		n += 1 + sovTunnel(uint64(m.LastTimestamp))
	}
	return n
}

func (m *Tunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTunnel(uint64(m.ID))
	}
	if m.NonceCount != 0 {
		n += 1 + sovTunnel(uint64(m.NonceCount))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.FeedType != 0 {
		n += 1 + sovTunnel(uint64(m.FeedType))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if len(m.SignalPriceInfos) > 0 {
		for _, e := range m.SignalPriceInfos {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.LastTriggeredBlockHeight != 0 {
		n += 1 + sovTunnel(uint64(m.LastTriggeredBlockHeight))
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTunnel(uint64(m.CreatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *PendingTriggerTunnels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovTunnel(uint64(e))
		}
		n += 1 + sovTunnel(uint64(l)) + l
	}
	return n
}

func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTunnel(uint64(m.TunnelID))
	}
	if m.Nonce != 0 {
		n += 1 + sovTunnel(uint64(m.Nonce))
	}
	if m.FeedType != 0 {
		n += 1 + sovTunnel(uint64(m.FeedType))
	}
	if len(m.SignalPriceInfos) > 0 {
		for _, e := range m.SignalPriceInfos {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.PacketContent != nil {
		l = m.PacketContent.Size()
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTunnel(uint64(m.CreatedAt))
	}
	return n
}

func (m *TSSPacketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigningID != 0 {
		n += 1 + sovTunnel(uint64(m.SigningID))
	}
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *AxelarPacketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IBCQueueID != 0 {
		n += 1 + sovTunnel(uint64(m.IBCQueueID))
	}
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func sovTunnel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTunnel(x uint64) (n int) {
	return sovTunnel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TSSRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationBPS", wireType)
			}
			m.DeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalPriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalPriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalPriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationBPS", wireType)
			}
			m.DeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			m.LastTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceCount", wireType)
			}
			m.NonceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Any{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedType", wireType)
			}
			m.FeedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeedType |= types1.FeedType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPriceInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPriceInfos = append(m.SignalPriceInfos, SignalPriceInfo{})
			if err := m.SignalPriceInfos[len(m.SignalPriceInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTriggeredBlockHeight", wireType)
			}
			m.LastTriggeredBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTriggeredBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingTriggerTunnels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTriggerTunnels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTriggerTunnels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTunnel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTunnel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTunnel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTunnel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTunnel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedType", wireType)
			}
			m.FeedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeedType |= types1.FeedType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPriceInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPriceInfos = append(m.SignalPriceInfos, SignalPriceInfo{})
			if err := m.SignalPriceInfos[len(m.SignalPriceInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketContent == nil {
				m.PacketContent = &types.Any{}
			}
			if err := m.PacketContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSPacketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSPacketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSPacketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningID", wireType)
			}
			m.SigningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigningID |= github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarPacketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarPacketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarPacketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCQueueID", wireType)
			}
			m.IBCQueueID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IBCQueueID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTunnel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTunnel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTunnel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTunnel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTunnel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTunnel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTunnel = fmt.Errorf("proto: unexpected end of group")
)
