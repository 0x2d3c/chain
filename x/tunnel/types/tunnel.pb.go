// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tunnel/v1beta1/tunnel.proto

package types

import (
	fmt "fmt"
	github_com_bandprotocol_chain_v2_x_bandtss_types "github.com/bandprotocol/chain/v2/x/bandtss/types"
	_ "github.com/bandprotocol/chain/v2/x/feeds/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Encoder is an enumerator that defines the mode of encoding message in tunnel module.
type Encoder int32

const (
	// ENCODER_UNSPECIFIED is an unspecified encoder mode.
	ENCODER_UNSPECIFIED Encoder = 0
	// ENCODER_FIXED_POINT_ABI is a fixed-point price abi encoder (price * 10^9).
	ENCODER_FIXED_POINT_ABI Encoder = 1
	// ENCODER_TICK_ABI is a tick abi encoder.
	ENCODER_TICK_ABI Encoder = 2
)

var Encoder_name = map[int32]string{
	0: "ENCODER_UNSPECIFIED",
	1: "ENCODER_FIXED_POINT_ABI",
	2: "ENCODER_TICK_ABI",
}

var Encoder_value = map[string]int32{
	"ENCODER_UNSPECIFIED":     0,
	"ENCODER_FIXED_POINT_ABI": 1,
	"ENCODER_TICK_ABI":        2,
}

func (x Encoder) String() string {
	return proto.EnumName(Encoder_name, int32(x))
}

func (Encoder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{0}
}

// TSSRoute is the type for a TSS route
type TSSRoute struct {
	// destination_chain_id is the destination chain ID
	DestinationChainID string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	// destination_contract_address is the destination contract address
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *TSSRoute) Reset()         { *m = TSSRoute{} }
func (m *TSSRoute) String() string { return proto.CompactTextString(m) }
func (*TSSRoute) ProtoMessage()    {}
func (*TSSRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{0}
}
func (m *TSSRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoute.Merge(m, src)
}
func (m *TSSRoute) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoute proto.InternalMessageInfo

func (m *TSSRoute) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *TSSRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// AxelarRoute is the type for an Axelar route
type AxelarRoute struct {
	// destination_chain_id is the destination chain ID
	DestinationChainID string `protobuf:"bytes,1,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	// destination_contract_address is the destination contract address
	DestinationContractAddress string `protobuf:"bytes,2,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *AxelarRoute) Reset()         { *m = AxelarRoute{} }
func (m *AxelarRoute) String() string { return proto.CompactTextString(m) }
func (*AxelarRoute) ProtoMessage()    {}
func (*AxelarRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{1}
}
func (m *AxelarRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarRoute.Merge(m, src)
}
func (m *AxelarRoute) XXX_Size() int {
	return m.Size()
}
func (m *AxelarRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarRoute.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarRoute proto.InternalMessageInfo

func (m *AxelarRoute) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *AxelarRoute) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

<<<<<<< HEAD
type IBCRoute struct {
	// channel_id is the IBC channel ID
	ChannelID string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCRoute) Reset()         { *m = IBCRoute{} }
func (m *IBCRoute) String() string { return proto.CompactTextString(m) }
func (*IBCRoute) ProtoMessage()    {}
func (*IBCRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{2}
}
func (m *IBCRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCRoute.Merge(m, src)
}
func (m *IBCRoute) XXX_Size() int {
	return m.Size()
}
func (m *IBCRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCRoute.DiscardUnknown(m)
}

var xxx_messageInfo_IBCRoute proto.InternalMessageInfo

func (m *IBCRoute) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type SignalInfo struct {
=======
// SignalDeviation is the type for a signal with soft and hard deviation
type SignalDeviation struct {
>>>>>>> master-tunnel
	// signal_id is the signal ID
	SignalID string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// soft_deviation_bps is the soft deviation in basis points
	SoftDeviationBPS uint64 `protobuf:"varint,2,opt,name=soft_deviation_bps,json=softDeviationBps,proto3" json:"soft_deviation_bps,omitempty"`
	// hard_deviation_bps is the hard deviation in basis points
	HardDeviationBPS uint64 `protobuf:"varint,3,opt,name=hard_deviation_bps,json=hardDeviationBps,proto3" json:"hard_deviation_bps,omitempty"`
}

<<<<<<< HEAD
func (m *SignalInfo) Reset()         { *m = SignalInfo{} }
func (m *SignalInfo) String() string { return proto.CompactTextString(m) }
func (*SignalInfo) ProtoMessage()    {}
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{3}
=======
func (m *SignalDeviation) Reset()         { *m = SignalDeviation{} }
func (m *SignalDeviation) String() string { return proto.CompactTextString(m) }
func (*SignalDeviation) ProtoMessage()    {}
func (*SignalDeviation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{2}
>>>>>>> master-tunnel
}
func (m *SignalDeviation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalDeviation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalDeviation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalDeviation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalDeviation.Merge(m, src)
}
func (m *SignalDeviation) XXX_Size() int {
	return m.Size()
}
func (m *SignalDeviation) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalDeviation.DiscardUnknown(m)
}

var xxx_messageInfo_SignalDeviation proto.InternalMessageInfo

func (m *SignalDeviation) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SignalDeviation) GetSoftDeviationBPS() uint64 {
	if m != nil {
		return m.SoftDeviationBPS
	}
	return 0
}

func (m *SignalDeviation) GetHardDeviationBPS() uint64 {
	if m != nil {
		return m.HardDeviationBPS
	}
	return 0
}

// Tunnel is the type for a tunnel
type Tunnel struct {
	// id is the tunnel ID
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// nonce_count is representing the number of packets sent
	NonceCount uint64 `protobuf:"varint,2,opt,name=nonce_count,json=nonceCount,proto3" json:"nonce_count,omitempty"`
	// route is the route for delivering the signal prices
	Route *types.Any `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	// encoder is the mode of encoding price signal data.
	Encoder Encoder `protobuf:"varint,4,opt,name=encoder,proto3,enum=tunnel.v1beta1.Encoder" json:"encoder,omitempty"`
	// fee_payer is the address of the fee payer
	FeePayer string `protobuf:"bytes,5,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	// signal_deviations is the list of signal deviations
	SignalDeviations []SignalDeviation `protobuf:"bytes,6,rep,name=signal_deviations,json=signalDeviations,proto3" json:"signal_deviations"`
	// interval is the interval for delivering the signal prices
	Interval uint64 `protobuf:"varint,7,opt,name=interval,proto3" json:"interval,omitempty"`
	// is_active is the flag to indicate if the tunnel is active
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// created_at is the timestamp when the tunnel is created
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// creator is the address of the creator
	Creator string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{4}
}
func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return m.Size()
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Tunnel) GetNonceCount() uint64 {
	if m != nil {
		return m.NonceCount
	}
	return 0
}

func (m *Tunnel) GetRoute() *types.Any {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *Tunnel) GetEncoder() Encoder {
	if m != nil {
		return m.Encoder
	}
	return ENCODER_UNSPECIFIED
}

func (m *Tunnel) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *Tunnel) GetSignalDeviations() []SignalDeviation {
	if m != nil {
		return m.SignalDeviations
	}
	return nil
}

func (m *Tunnel) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Tunnel) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Tunnel) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Tunnel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// LatestSignalPrices is the type for signal prices that tunnel produces
type LatestSignalPrices struct {
	// tunnel_id is the tunnel ID
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// signal_prices is the list of signal prices
	SignalPrices []SignalPrice `protobuf:"bytes,2,rep,name=signal_prices,json=signalPrices,proto3" json:"signal_prices"`
	// timestamp is the timestamp when the signal prices are produced
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

<<<<<<< HEAD
func (m *SignalPricesInfo) Reset()         { *m = SignalPricesInfo{} }
func (m *SignalPricesInfo) String() string { return proto.CompactTextString(m) }
func (*SignalPricesInfo) ProtoMessage()    {}
func (*SignalPricesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{5}
=======
func (m *LatestSignalPrices) Reset()         { *m = LatestSignalPrices{} }
func (m *LatestSignalPrices) String() string { return proto.CompactTextString(m) }
func (*LatestSignalPrices) ProtoMessage()    {}
func (*LatestSignalPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{4}
>>>>>>> master-tunnel
}
func (m *LatestSignalPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestSignalPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestSignalPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestSignalPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestSignalPrices.Merge(m, src)
}
func (m *LatestSignalPrices) XXX_Size() int {
	return m.Size()
}
func (m *LatestSignalPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestSignalPrices.DiscardUnknown(m)
}

var xxx_messageInfo_LatestSignalPrices proto.InternalMessageInfo

func (m *LatestSignalPrices) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *LatestSignalPrices) GetSignalPrices() []SignalPrice {
	if m != nil {
		return m.SignalPrices
	}
	return nil
}

func (m *LatestSignalPrices) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// SignalPrice is the type for a signal price
type SignalPrice struct {
	// signal_id is the signal ID
	SignalID string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// price is the price of the signal
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *SignalPrice) Reset()         { *m = SignalPrice{} }
func (m *SignalPrice) String() string { return proto.CompactTextString(m) }
func (*SignalPrice) ProtoMessage()    {}
func (*SignalPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{6}
}
func (m *SignalPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalPrice.Merge(m, src)
}
func (m *SignalPrice) XXX_Size() int {
	return m.Size()
}
func (m *SignalPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalPrice.DiscardUnknown(m)
}

var xxx_messageInfo_SignalPrice proto.InternalMessageInfo

func (m *SignalPrice) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SignalPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// TotalFees is the type for the total fees collected by the tunnel
type TotalFees struct {
	// total_packet_fee is the total packet fee collected
	TotalPacketFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_packet_fee,json=totalPacketFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_packet_fee"`
}

func (m *TotalFees) Reset()         { *m = TotalFees{} }
func (m *TotalFees) String() string { return proto.CompactTextString(m) }
func (*TotalFees) ProtoMessage()    {}
func (*TotalFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{7}
}
func (m *TotalFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalFees.Merge(m, src)
}
func (m *TotalFees) XXX_Size() int {
	return m.Size()
}
func (m *TotalFees) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalFees.DiscardUnknown(m)
}

var xxx_messageInfo_TotalFees proto.InternalMessageInfo

func (m *TotalFees) GetTotalPacketFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalPacketFee
	}
	return nil
}

// Packet is the packet that tunnel produces
type Packet struct {
	// tunnel_id is the tunnel ID
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// nonce is the nonce of the packet
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// signal_prices is the list of signal prices
	SignalPrices []SignalPrice `protobuf:"bytes,3,rep,name=signal_prices,json=signalPrices,proto3" json:"signal_prices"`
	// packet_content is the content of the packet that implements PacketContentI
	PacketContent *types.Any `protobuf:"bytes,4,opt,name=packet_content,json=packetContent,proto3" json:"packet_content,omitempty"`
	// created_at is the timestamp when the packet is created
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{8}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *Packet) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Packet) GetSignalPrices() []SignalPrice {
	if m != nil {
		return m.SignalPrices
	}
	return nil
}

func (m *Packet) GetPacketContent() *types.Any {
	if m != nil {
		return m.PacketContent
	}
	return nil
}

func (m *Packet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// TSSPacketContent is the packet content for TSS
type TSSPacketContent struct {
	// signing_id is the signing ID
	SigningID github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3,casttype=github.com/bandprotocol/chain/v2/x/bandtss/types.SigningID" json:"signing_id,omitempty"`
	// destination_chain_id is the destination chain ID
	DestinationChainID string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	// destination_contract_address is the destination contract address
	DestinationContractAddress string `protobuf:"bytes,3,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *TSSPacketContent) Reset()         { *m = TSSPacketContent{} }
func (m *TSSPacketContent) String() string { return proto.CompactTextString(m) }
func (*TSSPacketContent) ProtoMessage()    {}
func (*TSSPacketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{9}
}
func (m *TSSPacketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSPacketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSPacketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSPacketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSPacketContent.Merge(m, src)
}
func (m *TSSPacketContent) XXX_Size() int {
	return m.Size()
}
func (m *TSSPacketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSPacketContent.DiscardUnknown(m)
}

var xxx_messageInfo_TSSPacketContent proto.InternalMessageInfo

func (m *TSSPacketContent) GetSigningID() github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID {
	if m != nil {
		return m.SigningID
	}
	return 0
}

func (m *TSSPacketContent) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *TSSPacketContent) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// AxelarPacketContent is the packet content for Axelar
type AxelarPacketContent struct {
	// ibc_queue_id is the IBC queue ID
	IBCQueueID uint64 `protobuf:"varint,1,opt,name=ibc_queue_id,json=ibcQueueId,proto3" json:"ibc_queue_id,omitempty"`
	// destination_chain_id is the destination chain ID
	DestinationChainID string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	// destination_contract_address is the destination contract address
	DestinationContractAddress string `protobuf:"bytes,3,opt,name=destination_contract_address,json=destinationContractAddress,proto3" json:"destination_contract_address,omitempty"`
}

func (m *AxelarPacketContent) Reset()         { *m = AxelarPacketContent{} }
func (m *AxelarPacketContent) String() string { return proto.CompactTextString(m) }
func (*AxelarPacketContent) ProtoMessage()    {}
func (*AxelarPacketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{10}
}
func (m *AxelarPacketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarPacketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarPacketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarPacketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarPacketContent.Merge(m, src)
}
func (m *AxelarPacketContent) XXX_Size() int {
	return m.Size()
}
func (m *AxelarPacketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarPacketContent.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarPacketContent proto.InternalMessageInfo

func (m *AxelarPacketContent) GetIBCQueueID() uint64 {
	if m != nil {
		return m.IBCQueueID
	}
	return 0
}

func (m *AxelarPacketContent) GetDestinationChainID() string {
	if m != nil {
		return m.DestinationChainID
	}
	return ""
}

func (m *AxelarPacketContent) GetDestinationContractAddress() string {
	if m != nil {
		return m.DestinationContractAddress
	}
	return ""
}

// IBCPacketContent is the packet content for IBC
type IBCPacketContent struct {
	ChannelID string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCPacketContent) Reset()         { *m = IBCPacketContent{} }
func (m *IBCPacketContent) String() string { return proto.CompactTextString(m) }
func (*IBCPacketContent) ProtoMessage()    {}
func (*IBCPacketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{11}
}
func (m *IBCPacketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCPacketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCPacketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCPacketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCPacketContent.Merge(m, src)
}
func (m *IBCPacketContent) XXX_Size() int {
	return m.Size()
}
func (m *IBCPacketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCPacketContent.DiscardUnknown(m)
}

var xxx_messageInfo_IBCPacketContent proto.InternalMessageInfo

func (m *IBCPacketContent) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

// IBCPacketResult is the packet result for IBC
type IBCPacketResult struct {
	// tunnel_id is the tunnel ID
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// nonce is the nonce of the packet
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// signal_prices is the list of signal prices
	SignalPrices []SignalPrice `protobuf:"bytes,3,rep,name=signal_prices,json=signalPrices,proto3" json:"signal_prices"`
	// created_at is the timestamp when the packet is created
	CreatedAt int64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *IBCPacketResult) Reset()         { *m = IBCPacketResult{} }
func (m *IBCPacketResult) String() string { return proto.CompactTextString(m) }
func (*IBCPacketResult) ProtoMessage()    {}
func (*IBCPacketResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5270a56045f1d8a, []int{12}
}
func (m *IBCPacketResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCPacketResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCPacketResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCPacketResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCPacketResult.Merge(m, src)
}
func (m *IBCPacketResult) XXX_Size() int {
	return m.Size()
}
func (m *IBCPacketResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCPacketResult.DiscardUnknown(m)
}

var xxx_messageInfo_IBCPacketResult proto.InternalMessageInfo

func (m *IBCPacketResult) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *IBCPacketResult) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *IBCPacketResult) GetSignalPrices() []SignalPrice {
	if m != nil {
		return m.SignalPrices
	}
	return nil
}

func (m *IBCPacketResult) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("tunnel.v1beta1.Encoder", Encoder_name, Encoder_value)
	proto.RegisterType((*TSSRoute)(nil), "tunnel.v1beta1.TSSRoute")
	proto.RegisterType((*AxelarRoute)(nil), "tunnel.v1beta1.AxelarRoute")
<<<<<<< HEAD
	proto.RegisterType((*IBCRoute)(nil), "tunnel.v1beta1.IBCRoute")
	proto.RegisterType((*SignalInfo)(nil), "tunnel.v1beta1.SignalInfo")
=======
	proto.RegisterType((*SignalDeviation)(nil), "tunnel.v1beta1.SignalDeviation")
>>>>>>> master-tunnel
	proto.RegisterType((*Tunnel)(nil), "tunnel.v1beta1.Tunnel")
	proto.RegisterType((*LatestSignalPrices)(nil), "tunnel.v1beta1.LatestSignalPrices")
	proto.RegisterType((*SignalPrice)(nil), "tunnel.v1beta1.SignalPrice")
	proto.RegisterType((*TotalFees)(nil), "tunnel.v1beta1.TotalFees")
	proto.RegisterType((*Packet)(nil), "tunnel.v1beta1.Packet")
	proto.RegisterType((*TSSPacketContent)(nil), "tunnel.v1beta1.TSSPacketContent")
	proto.RegisterType((*AxelarPacketContent)(nil), "tunnel.v1beta1.AxelarPacketContent")
	proto.RegisterType((*IBCPacketContent)(nil), "tunnel.v1beta1.IBCPacketContent")
	proto.RegisterType((*IBCPacketResult)(nil), "tunnel.v1beta1.IBCPacketResult")
}

func init() { proto.RegisterFile("tunnel/v1beta1/tunnel.proto", fileDescriptor_b5270a56045f1d8a) }

var fileDescriptor_b5270a56045f1d8a = []byte{
<<<<<<< HEAD
	// 1151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x5f, 0xec, 0xe7, 0xd6, 0x58, 0x53, 0xd3, 0x6c, 0x1d, 0xb0, 0x2d, 0x9f, 0x4c,
	0x45, 0xec, 0x36, 0x88, 0x0a, 0xe5, 0x84, 0x77, 0xed, 0xa8, 0xab, 0x8a, 0xd6, 0xac, 0x8d, 0x84,
	0xb8, 0xac, 0xd6, 0xbb, 0x63, 0x67, 0xa9, 0xb3, 0x63, 0x76, 0xc6, 0x51, 0x73, 0xe4, 0x56, 0xf5,
	0xc4, 0x17, 0x28, 0x42, 0x20, 0x04, 0xe2, 0x9c, 0x0b, 0x5c, 0x11, 0x52, 0xd5, 0x53, 0xc5, 0x89,
	0x93, 0x41, 0xce, 0x01, 0x3e, 0x03, 0x27, 0xb4, 0x33, 0xb3, 0x76, 0xec, 0x26, 0x2a, 0x41, 0x1c,
	0x72, 0xf2, 0xbe, 0xf7, 0x7b, 0xef, 0xcd, 0x7b, 0xbf, 0xf7, 0xde, 0x8c, 0x61, 0x8b, 0x4d, 0x7d,
	0x1f, 0x8f, 0x9b, 0x87, 0xb7, 0x07, 0x98, 0xd9, 0xb7, 0x9b, 0x42, 0x6c, 0x4c, 0x02, 0xc2, 0x08,
	0xca, 0x4b, 0x49, 0x82, 0xa5, 0xe2, 0x88, 0x8c, 0x08, 0x87, 0x9a, 0xe1, 0x97, 0xb0, 0x2a, 0xdd,
	0x18, 0x11, 0x32, 0x1a, 0xe3, 0x26, 0x97, 0x06, 0xd3, 0x61, 0xd3, 0xf6, 0x8f, 0x22, 0xc8, 0x21,
	0xf4, 0x80, 0x50, 0x4b, 0xf8, 0x08, 0x41, 0x42, 0x65, 0x21, 0x35, 0x07, 0x36, 0xc5, 0x8b, 0xd3,
	0x1d, 0xe2, 0xf9, 0x91, 0xeb, 0x10, 0x63, 0x97, 0x2e, 0x10, 0x2e, 0x09, 0xa8, 0xf6, 0xb5, 0x02,
	0x99, 0x7e, 0xaf, 0x67, 0x92, 0x29, 0xc3, 0xe8, 0x2e, 0x14, 0x5d, 0x4c, 0x99, 0xe7, 0xdb, 0xcc,
	0x23, 0xbe, 0xe5, 0xec, 0xdb, 0x9e, 0x6f, 0x79, 0xae, 0xaa, 0x54, 0x95, 0x7a, 0x56, 0xbb, 0x3e,
	0x9f, 0x55, 0x50, 0x7b, 0x89, 0xeb, 0x21, 0x6c, 0xb4, 0x4d, 0xe4, 0xae, 0xeb, 0x5c, 0xf4, 0x3e,
	0xbc, 0xb1, 0x12, 0x89, 0xf8, 0x2c, 0xb0, 0x1d, 0x66, 0xd9, 0xae, 0x1b, 0x60, 0x4a, 0xd5, 0x78,
	0x18, 0xd1, 0x2c, 0x9d, 0xf6, 0x94, 0x26, 0x2d, 0x61, 0xb1, 0x0b, 0xcf, 0x8f, 0xb7, 0xd3, 0x3c,
	0x2d, 0xa3, 0xf6, 0xad, 0x02, 0xb9, 0xd6, 0x23, 0x3c, 0xb6, 0x83, 0xcb, 0x9d, 0xa7, 0x0e, 0x19,
	0x43, 0xd3, 0x45, 0x8e, 0x6f, 0x03, 0x38, 0xfb, 0x76, 0xd8, 0xf2, 0x65, 0x66, 0x57, 0xe7, 0xb3,
	0x4a, 0x56, 0x17, 0x5a, 0xa3, 0x6d, 0x66, 0xa5, 0x81, 0xe1, 0xee, 0x66, 0x9f, 0x1f, 0x6f, 0xa7,
	0xb8, 0x63, 0xed, 0x17, 0x05, 0xa0, 0xe7, 0x8d, 0x7c, 0x7b, 0x6c, 0xf8, 0x43, 0x82, 0xde, 0x82,
	0x2c, 0xe5, 0xd2, 0x32, 0xcc, 0x95, 0xf9, 0xac, 0x92, 0x91, 0x26, 0x6d, 0x33, 0x23, 0x60, 0xc3,
	0x45, 0x1a, 0x20, 0x4a, 0x86, 0xcc, 0x72, 0xf1, 0xa1, 0x27, 0xea, 0x19, 0x4c, 0x44, 0x09, 0x49,
	0xad, 0x38, 0x9f, 0x55, 0x0a, 0x3d, 0x32, 0x64, 0xed, 0x08, 0xd4, 0xba, 0x3d, 0xb3, 0x40, 0x57,
	0x34, 0x13, 0x1a, 0xc6, 0xd8, 0xb7, 0x03, 0x77, 0x2d, 0x46, 0x62, 0x19, 0xe3, 0xae, 0x1d, 0xb8,
	0xab, 0x31, 0xf6, 0x57, 0x34, 0x13, 0xba, 0x9b, 0xfc, 0xeb, 0xab, 0x8a, 0x52, 0xfb, 0x29, 0x01,
	0xe9, 0x3e, 0x9f, 0x79, 0x74, 0x1d, 0xe2, 0x32, 0xf9, 0xa4, 0x96, 0x9e, 0xcf, 0x2a, 0x71, 0xa3,
	0x6d, 0xc6, 0x3d, 0x17, 0x55, 0x20, 0xe7, 0x13, 0xdf, 0xc1, 0x96, 0x43, 0xa6, 0x3e, 0x13, 0x99,
	0x9a, 0xc0, 0x55, 0x7a, 0xa8, 0x41, 0x77, 0x20, 0x15, 0x84, 0xa4, 0xf0, 0x04, 0x72, 0x3b, 0xc5,
	0x86, 0x58, 0x8f, 0x46, 0xb4, 0x1e, 0x8d, 0x96, 0x7f, 0xa4, 0x9d, 0xea, 0x80, 0x29, 0xcc, 0xd1,
	0x6d, 0xd8, 0xc0, 0xbe, 0x43, 0x5c, 0x1c, 0xa8, 0xc9, 0xaa, 0x52, 0xcf, 0xef, 0x6c, 0x36, 0x56,
	0xd7, 0xaf, 0xd1, 0x11, 0xb0, 0x19, 0xd9, 0xa1, 0x77, 0x21, 0x3b, 0xc4, 0xd8, 0x9a, 0xd8, 0x47,
	0x38, 0x50, 0x53, 0x9c, 0x67, 0xf5, 0xd7, 0xe3, 0xed, 0xa2, 0x5c, 0x34, 0xd9, 0xee, 0x1e, 0x0b,
	0x3c, 0x7f, 0x64, 0x66, 0x86, 0x18, 0x77, 0x43, 0x4b, 0xa4, 0xc3, 0x95, 0xa8, 0x3d, 0xfe, 0x90,
	0x50, 0x35, 0x5d, 0x4d, 0xd4, 0x73, 0x3b, 0xa5, 0xf5, 0xe3, 0x96, 0x0d, 0xd5, 0x92, 0xcf, 0x66,
	0x95, 0x98, 0x99, 0xa3, 0x0b, 0x0d, 0x45, 0x25, 0xc8, 0x78, 0x3e, 0xc3, 0xc1, 0xa1, 0x3d, 0x56,
	0x37, 0x38, 0x09, 0x0b, 0x19, 0x6d, 0x41, 0xd6, 0xa3, 0x96, 0xed, 0x30, 0xef, 0x10, 0xab, 0x99,
	0xaa, 0x52, 0xcf, 0x98, 0x19, 0x8f, 0xb6, 0xb8, 0x8c, 0xde, 0x04, 0x70, 0x02, 0x6c, 0x33, 0xec,
	0x5a, 0x36, 0x53, 0xb3, 0x55, 0xa5, 0x9e, 0x30, 0xb3, 0x52, 0xd3, 0x62, 0x68, 0x07, 0x36, 0xb8,
	0x40, 0x02, 0x15, 0x5e, 0x51, 0x51, 0x64, 0x28, 0x9b, 0xf7, 0xb3, 0x02, 0x05, 0x91, 0x73, 0x37,
	0xf0, 0x1c, 0x4c, 0xa3, 0x51, 0x14, 0x65, 0x59, 0x8b, 0x6e, 0xf2, 0x51, 0x14, 0x5d, 0x0e, 0x47,
	0x51, 0xc0, 0x86, 0x8b, 0xf6, 0xe0, 0xaa, 0xa4, 0x65, 0xc2, 0xfd, 0xd5, 0x38, 0xe7, 0x65, 0xeb,
	0x6c, 0x5e, 0xf8, 0x19, 0x92, 0x18, 0x49, 0xa7, 0x38, 0x16, 0xdd, 0x81, 0xcd, 0xb1, 0x4d, 0x99,
	0x15, 0xd1, 0x61, 0x31, 0xef, 0x00, 0x53, 0x66, 0x1f, 0x4c, 0xf8, 0x48, 0x24, 0xcc, 0xd7, 0x43,
	0xd8, 0x90, 0x68, 0x3f, 0x02, 0x65, 0x15, 0x7d, 0xc8, 0x9d, 0x3a, 0xe0, 0x22, 0xab, 0x54, 0x84,
	0x14, 0x4f, 0x5c, 0xce, 0xa4, 0x10, 0x64, 0xd4, 0xc7, 0x0a, 0x64, 0xfb, 0x84, 0xd9, 0xe3, 0x3d,
	0x8c, 0x29, 0x9a, 0x42, 0x81, 0x85, 0x82, 0x35, 0xb1, 0x9d, 0x87, 0x98, 0x59, 0x43, 0x8c, 0x55,
	0x85, 0x17, 0x7b, 0xa3, 0x21, 0x99, 0x0e, 0xaf, 0xe5, 0x45, 0xc5, 0x3a, 0xf1, 0x7c, 0xed, 0x56,
	0x58, 0xea, 0x0f, 0xbf, 0x57, 0xea, 0x23, 0x8f, 0xed, 0x4f, 0x07, 0x0d, 0x87, 0x1c, 0xc8, 0x1b,
	0x5d, 0xfe, 0x6c, 0x53, 0xf7, 0x61, 0x93, 0x1d, 0x4d, 0x30, 0xe5, 0x0e, 0xd4, 0xcc, 0xf3, 0x43,
	0xba, 0xfc, 0x8c, 0x3d, 0x1c, 0xa5, 0xf2, 0x79, 0x1c, 0xd2, 0x42, 0x77, 0x91, 0xe6, 0x14, 0x21,
	0xc5, 0x77, 0x2c, 0x2a, 0x8e, 0x0b, 0x2f, 0xb7, 0x2c, 0xf1, 0xdf, 0x5a, 0xf6, 0x00, 0xf2, 0x92,
	0x8a, 0xf0, 0x36, 0xc5, 0x3e, 0xe3, 0x2b, 0x78, 0xde, 0xf2, 0xa2, 0xe7, 0xc7, 0xdb, 0x79, 0x51,
	0x82, 0x2e, 0xcc, 0x0d, 0xf3, 0xea, 0xe4, 0xb4, 0xbc, 0x36, 0xe4, 0xa9, 0xb5, 0x21, 0xaf, 0x7d,
	0x19, 0x87, 0x42, 0xbf, 0xd7, 0x5b, 0x89, 0x81, 0x3e, 0x05, 0x08, 0x93, 0xf2, 0xfc, 0xd1, 0x92,
	0x8e, 0x7b, 0xe1, 0xed, 0xdb, 0x13, 0x5a, 0xa3, 0xfd, 0xf7, 0xac, 0xb2, 0x7b, 0x8a, 0xfd, 0x81,
	0xed, 0xbb, 0x3c, 0x31, 0x87, 0x8c, 0x9b, 0xfc, 0x41, 0x69, 0x1e, 0xee, 0x34, 0x1f, 0x71, 0x3d,
	0xa3, 0x54, 0xf6, 0x62, 0xe1, 0x6d, 0x66, 0x65, 0x78, 0xc3, 0x3d, 0xf7, 0x35, 0x8a, 0xff, 0xef,
	0xaf, 0x51, 0xe2, 0x95, 0xaf, 0xd1, 0x19, 0x74, 0xd6, 0xfe, 0x54, 0xe0, 0x9a, 0x78, 0x3d, 0x57,
	0x39, 0xba, 0x05, 0x57, 0xbc, 0x81, 0x63, 0x7d, 0x36, 0xc5, 0x53, 0xbc, 0x64, 0x29, 0x3f, 0x9f,
	0x55, 0xc0, 0xd0, 0xf4, 0x0f, 0x43, 0xb5, 0xd1, 0x36, 0xc1, 0x1b, 0x38, 0xe2, 0xfb, 0xf2, 0x57,
	0xda, 0x87, 0x82, 0xa1, 0xe9, 0xab, 0x55, 0x5e, 0xec, 0x1d, 0x3e, 0x2b, 0xea, 0x8f, 0x0a, 0xbc,
	0xb6, 0x08, 0x6b, 0x62, 0x3a, 0x1d, 0x5f, 0xa2, 0x6d, 0x5b, 0x5d, 0x8e, 0xe4, 0xda, 0x72, 0xdc,
	0xfc, 0x4e, 0x81, 0x0d, 0xf9, 0xd4, 0xa1, 0x5b, 0x70, 0xad, 0x73, 0x5f, 0x7f, 0xd0, 0xee, 0x98,
	0xd6, 0x47, 0xf7, 0x7b, 0xdd, 0x8e, 0x6e, 0xec, 0x19, 0x9d, 0x76, 0x21, 0x56, 0xda, 0x7c, 0xf2,
	0xb4, 0x7a, 0x16, 0x84, 0xde, 0x83, 0xcd, 0x48, 0xbd, 0x67, 0x7c, 0xdc, 0x69, 0x5b, 0xdd, 0x07,
	0xc6, 0xfd, 0xbe, 0xd5, 0xd2, 0x8c, 0x82, 0x52, 0xda, 0x7a, 0xf2, 0xb4, 0x7a, 0x1e, 0x8c, 0x6e,
	0x42, 0x21, 0x82, 0xfa, 0x86, 0x7e, 0x8f, 0xbb, 0xc4, 0x4b, 0xc5, 0x27, 0x4f, 0xab, 0x2f, 0xe9,
	0x4b, 0xc9, 0xc7, 0xdf, 0x94, 0x63, 0xda, 0x07, 0xdf, 0xcf, 0xcb, 0xca, 0xb3, 0x79, 0x59, 0x79,
	0x31, 0x2f, 0x2b, 0x7f, 0xcc, 0xcb, 0xca, 0x17, 0x27, 0xe5, 0xd8, 0x8b, 0x93, 0x72, 0xec, 0xb7,
	0x93, 0x72, 0xec, 0x93, 0xe6, 0xbf, 0x58, 0x55, 0xf9, 0xef, 0x9b, 0x6f, 0xea, 0x20, 0xcd, 0x2d,
	0xde, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x28, 0x10, 0xef, 0x48, 0x94, 0x0b, 0x00, 0x00,
=======
	// 1074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x8e, 0x63, 0xbf, 0xb4, 0xc6, 0x4c, 0xad, 0x66, 0xeb, 0x14, 0xaf, 0x95, 0x93,
	0xa9, 0x14, 0x6f, 0x12, 0x04, 0x42, 0x39, 0xe1, 0xb5, 0x1d, 0x75, 0x55, 0x48, 0xcc, 0xda, 0x48,
	0x88, 0xcb, 0x6a, 0xbd, 0x3b, 0x76, 0x96, 0x3a, 0x3b, 0x66, 0x67, 0x1c, 0x35, 0x47, 0x6e, 0x55,
	0x4e, 0x7c, 0x81, 0x20, 0x04, 0x42, 0x20, 0xb8, 0xe6, 0x43, 0x94, 0x9c, 0x2a, 0x4e, 0x9c, 0x0c,
	0x72, 0x0e, 0xf0, 0x19, 0x38, 0xa1, 0x9d, 0x19, 0xff, 0x6d, 0xa2, 0x52, 0xc4, 0xa1, 0xa7, 0xf8,
	0xfd, 0x7e, 0xef, 0xbd, 0x79, 0xef, 0xf7, 0xde, 0xec, 0x04, 0x36, 0xd8, 0x30, 0x08, 0x70, 0x5f,
	0x3f, 0xd9, 0xe9, 0x60, 0xe6, 0xec, 0xe8, 0xc2, 0xac, 0x0c, 0x42, 0xc2, 0x08, 0xca, 0x4a, 0x4b,
	0x92, 0x85, 0x7c, 0x8f, 0xf4, 0x08, 0xa7, 0xf4, 0xe8, 0x97, 0xf0, 0x2a, 0xdc, 0xeb, 0x11, 0xd2,
	0xeb, 0x63, 0x9d, 0x5b, 0x9d, 0x61, 0x57, 0x77, 0x82, 0xd3, 0x09, 0xe5, 0x12, 0x7a, 0x4c, 0xa8,
	0x2d, 0x62, 0x84, 0x21, 0xa9, 0xa2, 0xb0, 0xf4, 0x8e, 0x43, 0xf1, 0xf4, 0x74, 0x97, 0xf8, 0xc1,
	0x24, 0xb4, 0x8b, 0xb1, 0x47, 0xa7, 0x0c, 0xb7, 0x04, 0xb5, 0xf9, 0xad, 0x02, 0xe9, 0x76, 0xab,
	0x65, 0x91, 0x21, 0xc3, 0xe8, 0x21, 0xe4, 0x3d, 0x4c, 0x99, 0x1f, 0x38, 0xcc, 0x27, 0x81, 0xed,
	0x1e, 0x39, 0x7e, 0x60, 0xfb, 0x9e, 0xaa, 0x94, 0x94, 0x72, 0xc6, 0xb8, 0x3b, 0x1e, 0x69, 0xa8,
	0x3e, 0xe3, 0x6b, 0x11, 0x6d, 0xd6, 0x2d, 0xe4, 0x2d, 0x63, 0x1e, 0xfa, 0x00, 0xee, 0x2f, 0x64,
	0x22, 0x01, 0x0b, 0x1d, 0x97, 0xd9, 0x8e, 0xe7, 0x85, 0x98, 0x52, 0x35, 0x1e, 0x65, 0xb4, 0x0a,
	0xf3, 0x91, 0xd2, 0xa5, 0x2a, 0x3c, 0xf6, 0xe0, 0xf2, 0x62, 0x2b, 0xc5, 0xcb, 0x32, 0x37, 0xbf,
	0x57, 0x60, 0xad, 0xfa, 0x04, 0xf7, 0x9d, 0xf0, 0xf5, 0xae, 0xf3, 0x52, 0x81, 0x37, 0x5a, 0x7e,
	0x2f, 0x70, 0xfa, 0x75, 0x7c, 0xe2, 0x73, 0x77, 0xf4, 0x36, 0x64, 0x28, 0x87, 0x66, 0x05, 0xde,
	0x1a, 0x8f, 0xb4, 0xb4, 0xf0, 0x33, 0xeb, 0x56, 0x5a, 0xd0, 0xa6, 0x87, 0x0c, 0x40, 0x94, 0x74,
	0x99, 0xed, 0x4d, 0x82, 0xed, 0xce, 0x40, 0x94, 0x90, 0x34, 0xf2, 0xe3, 0x91, 0x96, 0x6b, 0x91,
	0x2e, 0x9b, 0x66, 0x36, 0x9a, 0x2d, 0x2b, 0x47, 0x17, 0x90, 0x01, 0x8d, 0x72, 0x1c, 0x39, 0xa1,
	0xb7, 0x94, 0x23, 0x31, 0xcb, 0xf1, 0xd0, 0x09, 0xbd, 0xc5, 0x1c, 0x47, 0x0b, 0xc8, 0x80, 0xee,
	0x25, 0xff, 0xfa, 0x46, 0x53, 0x36, 0x7f, 0x49, 0x40, 0xaa, 0xcd, 0x77, 0x16, 0xdd, 0x85, 0xb8,
	0x2c, 0x3e, 0x69, 0xa4, 0xc6, 0x23, 0x2d, 0x6e, 0xd6, 0xad, 0xb8, 0xef, 0x21, 0x0d, 0xd6, 0x02,
	0x12, 0xb8, 0xd8, 0x76, 0xc9, 0x30, 0x60, 0xa2, 0x52, 0x0b, 0x38, 0x54, 0x8b, 0x10, 0xf4, 0x1e,
	0xac, 0x84, 0x91, 0x34, 0xbc, 0x80, 0xb5, 0xdd, 0x7c, 0x45, 0xac, 0x77, 0x65, 0xb2, 0xde, 0x95,
	0x6a, 0x70, 0x6a, 0xcc, 0x29, 0x68, 0x09, 0x77, 0xb4, 0x03, 0xab, 0x38, 0x70, 0x89, 0x87, 0x43,
	0x35, 0x59, 0x52, 0xca, 0xd9, 0xdd, 0xf5, 0xca, 0xe2, 0xf5, 0xa9, 0x34, 0x04, 0x6d, 0x4d, 0xfc,
	0xd0, 0xbb, 0x90, 0xe9, 0x62, 0x6c, 0x0f, 0x9c, 0x53, 0x1c, 0xaa, 0x2b, 0x5c, 0x67, 0xf5, 0xd7,
	0x8b, 0xad, 0xbc, 0xbc, 0x28, 0x72, 0x5c, 0x2d, 0x16, 0xfa, 0x41, 0xcf, 0x4a, 0x77, 0x31, 0x6e,
	0x46, 0x9e, 0xc8, 0x82, 0x37, 0xe5, 0x78, 0xa6, 0x8a, 0x51, 0x35, 0x55, 0x4a, 0x94, 0xd7, 0x76,
	0xb5, 0xe5, 0x33, 0x97, 0x46, 0x6b, 0x24, 0x9f, 0x8d, 0xb4, 0x98, 0x95, 0xa3, 0x8b, 0x30, 0x45,
	0x05, 0x48, 0xfb, 0x01, 0xc3, 0xe1, 0x89, 0xd3, 0x57, 0x57, 0xb9, 0x26, 0x53, 0x1b, 0x6d, 0x40,
	0xc6, 0xa7, 0xb6, 0xe3, 0x32, 0xff, 0x04, 0xab, 0xe9, 0x92, 0x52, 0x4e, 0x5b, 0x69, 0x9f, 0x56,
	0xb9, 0x8d, 0xde, 0x02, 0x70, 0x43, 0xec, 0x30, 0xec, 0xd9, 0x0e, 0x53, 0x33, 0x25, 0xa5, 0x9c,
	0xb0, 0x32, 0x12, 0xa9, 0x32, 0xb4, 0x0b, 0xab, 0xdc, 0x20, 0xa1, 0x0a, 0x2f, 0x69, 0x70, 0xe2,
	0x28, 0x67, 0xf9, 0xb3, 0x02, 0xe8, 0x43, 0x87, 0x61, 0xca, 0x44, 0x0f, 0xcd, 0xd0, 0x77, 0x31,
	0x8d, 0x76, 0x53, 0xb4, 0x68, 0x4f, 0xc7, 0xcb, 0x77, 0x53, 0x8c, 0x3d, 0xda, 0x4d, 0x41, 0x9b,
	0x1e, 0xda, 0x87, 0xdb, 0x52, 0xa7, 0x01, 0x8f, 0x55, 0xe3, 0x5c, 0xa3, 0x8d, 0xeb, 0x35, 0xe2,
	0xf9, 0xa5, 0x3e, 0xb7, 0xe8, 0xfc, 0x91, 0xf7, 0x21, 0xc3, 0xfc, 0x63, 0x4c, 0x99, 0x73, 0x3c,
	0xe0, 0x5b, 0x91, 0xb0, 0x66, 0x80, 0xac, 0xb6, 0x0d, 0x6b, 0x73, 0x69, 0x5e, 0xe5, 0x06, 0xe5,
	0x61, 0x85, 0x97, 0x27, 0x57, 0x51, 0x18, 0x32, 0xeb, 0x53, 0x05, 0x32, 0x6d, 0xc2, 0x9c, 0xfe,
	0x3e, 0xc6, 0x14, 0x0d, 0x21, 0xc7, 0x22, 0xc3, 0x1e, 0x38, 0xee, 0x63, 0xcc, 0xec, 0x2e, 0xc6,
	0xaa, 0xc2, 0x5b, 0xba, 0x57, 0x91, 0x8a, 0x46, 0x5f, 0xd3, 0x69, 0x5f, 0x35, 0xe2, 0x07, 0xc6,
	0x76, 0xd4, 0xd0, 0x4f, 0xbf, 0x6b, 0xe5, 0x9e, 0xcf, 0x8e, 0x86, 0x9d, 0x8a, 0x4b, 0x8e, 0xe5,
	0x87, 0x58, 0xfe, 0xd9, 0xa2, 0xde, 0x63, 0x9d, 0x9d, 0x0e, 0x30, 0xe5, 0x01, 0xd4, 0xca, 0xf2,
	0x43, 0x9a, 0xfc, 0x8c, 0x7d, 0x3c, 0x29, 0xe5, 0xcb, 0x38, 0xa4, 0x04, 0xf6, 0x2a, 0x23, 0xc8,
	0xc3, 0x0a, 0xbf, 0x5a, 0x93, 0xe6, 0xb8, 0xf1, 0xe2, 0x60, 0x12, 0xff, 0x6d, 0x30, 0x87, 0x90,
	0x95, 0x52, 0x44, 0x1f, 0x41, 0x1c, 0x30, 0x7e, 0xf3, 0x6e, 0xba, 0xb3, 0xe8, 0xf2, 0x62, 0x2b,
	0x2b, 0x5a, 0xa8, 0x09, 0x77, 0xd3, 0xba, 0x3d, 0x98, 0xb7, 0x97, 0x96, 0x79, 0x65, 0x69, 0x99,
	0x37, 0xbf, 0x8e, 0x43, 0xae, 0xdd, 0x6a, 0x2d, 0xe4, 0x40, 0x9f, 0x03, 0x44, 0x45, 0xf9, 0x41,
	0x6f, 0x26, 0xc7, 0xa3, 0xf1, 0x48, 0xcb, 0xb4, 0x04, 0x6a, 0xd6, 0xff, 0x1e, 0x69, 0x7b, 0x73,
	0xea, 0x77, 0x9c, 0xc0, 0xe3, 0x85, 0xb9, 0xa4, 0xaf, 0xf3, 0x77, 0x40, 0x3f, 0xd9, 0xd5, 0x9f,
	0x70, 0x9c, 0x51, 0x2a, 0x67, 0x31, 0x8d, 0xb6, 0x32, 0x32, 0xbd, 0xe9, 0xdd, 0xf8, 0x88, 0xc4,
	0xff, 0xf7, 0x47, 0x24, 0xf1, 0xd2, 0x47, 0xe4, 0x1a, 0x39, 0x37, 0xff, 0x54, 0xe0, 0x8e, 0x78,
	0xf4, 0x16, 0x35, 0xda, 0x86, 0x5b, 0x7e, 0xc7, 0xb5, 0xbf, 0x18, 0xe2, 0x21, 0x9e, 0xa9, 0x94,
	0x1d, 0x8f, 0x34, 0x30, 0x8d, 0xda, 0xc7, 0x11, 0x6c, 0xd6, 0x2d, 0xf0, 0x3b, 0xae, 0xf8, 0xfd,
	0xda, 0x77, 0xfa, 0xe0, 0x07, 0x05, 0x56, 0xe5, 0xf7, 0x1c, 0x6d, 0xc3, 0x9d, 0xc6, 0x41, 0xed,
	0xb0, 0xde, 0xb0, 0xec, 0x4f, 0x0e, 0x5a, 0xcd, 0x46, 0xcd, 0xdc, 0x37, 0x1b, 0xf5, 0x5c, 0xac,
	0xb0, 0x7e, 0x76, 0x5e, 0xba, 0x8e, 0x42, 0xef, 0xc3, 0xfa, 0x04, 0xde, 0x37, 0x3f, 0x6d, 0xd4,
	0xed, 0xe6, 0xa1, 0x79, 0xd0, 0xb6, 0xab, 0x86, 0x99, 0x53, 0x0a, 0x1b, 0x67, 0xe7, 0xa5, 0x9b,
	0x68, 0xf4, 0x00, 0x72, 0x13, 0xaa, 0x6d, 0xd6, 0x1e, 0xf1, 0x90, 0x78, 0x21, 0x7f, 0x76, 0x5e,
	0x7a, 0x01, 0x2f, 0x24, 0x9f, 0x7e, 0x57, 0x8c, 0x19, 0x1f, 0xfd, 0x38, 0x2e, 0x2a, 0xcf, 0xc6,
	0x45, 0xe5, 0xf9, 0xb8, 0xa8, 0xfc, 0x31, 0x2e, 0x2a, 0x5f, 0x5d, 0x15, 0x63, 0xcf, 0xaf, 0x8a,
	0xb1, 0xdf, 0xae, 0x8a, 0xb1, 0xcf, 0xf4, 0x7f, 0xb1, 0x98, 0xf2, 0x5f, 0x44, 0xbe, 0x97, 0x9d,
	0x14, 0xf7, 0x78, 0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x39, 0x63, 0x0d, 0x39, 0x0a,
	0x00, 0x00,
>>>>>>> master-tunnel
}

func (this *TSSRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoute)
	if !ok {
		that2, ok := that.(TSSRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *AxelarRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AxelarRoute)
	if !ok {
		that2, ok := that.(AxelarRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
<<<<<<< HEAD
func (this *IBCRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCRoute)
	if !ok {
		that2, ok := that.(IBCRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelID != that1.ChannelID {
		return false
	}
	return true
}
func (this *SignalInfo) Equal(that interface{}) bool {
=======
func (this *SignalDeviation) Equal(that interface{}) bool {
>>>>>>> master-tunnel
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalDeviation)
	if !ok {
		that2, ok := that.(SignalDeviation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.SoftDeviationBPS != that1.SoftDeviationBPS {
		return false
	}
	if this.HardDeviationBPS != that1.HardDeviationBPS {
		return false
	}
	return true
}
func (this *Tunnel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tunnel)
	if !ok {
		that2, ok := that.(Tunnel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.NonceCount != that1.NonceCount {
		return false
	}
	if !this.Route.Equal(that1.Route) {
		return false
	}
	if this.Encoder != that1.Encoder {
		return false
	}
	if this.FeePayer != that1.FeePayer {
		return false
	}
	if len(this.SignalDeviations) != len(that1.SignalDeviations) {
		return false
	}
	for i := range this.SignalDeviations {
		if !this.SignalDeviations[i].Equal(&that1.SignalDeviations[i]) {
			return false
		}
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (this *LatestSignalPrices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LatestSignalPrices)
	if !ok {
		that2, ok := that.(LatestSignalPrices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TunnelID != that1.TunnelID {
		return false
	}
	if len(this.SignalPrices) != len(that1.SignalPrices) {
		return false
	}
	for i := range this.SignalPrices {
		if !this.SignalPrices[i].Equal(&that1.SignalPrices[i]) {
			return false
		}
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *SignalPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalPrice)
	if !ok {
		that2, ok := that.(SignalPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *TotalFees) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TotalFees)
	if !ok {
		that2, ok := that.(TotalFees)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TotalPacketFee) != len(that1.TotalPacketFee) {
		return false
	}
	for i := range this.TotalPacketFee {
		if !this.TotalPacketFee[i].Equal(&that1.TotalPacketFee[i]) {
			return false
		}
	}
	return true
}
func (this *Packet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet)
	if !ok {
		that2, ok := that.(Packet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TunnelID != that1.TunnelID {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if len(this.SignalPrices) != len(that1.SignalPrices) {
		return false
	}
	for i := range this.SignalPrices {
		if !this.SignalPrices[i].Equal(&that1.SignalPrices[i]) {
			return false
		}
	}
	if !this.PacketContent.Equal(that1.PacketContent) {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *TSSPacketContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSPacketContent)
	if !ok {
		that2, ok := that.(TSSPacketContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SigningID != that1.SigningID {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *AxelarPacketContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AxelarPacketContent)
	if !ok {
		that2, ok := that.(AxelarPacketContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IBCQueueID != that1.IBCQueueID {
		return false
	}
	if this.DestinationChainID != that1.DestinationChainID {
		return false
	}
	if this.DestinationContractAddress != that1.DestinationContractAddress {
		return false
	}
	return true
}
func (this *IBCPacketContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCPacketContent)
	if !ok {
		that2, ok := that.(IBCPacketContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelID != that1.ChannelID {
		return false
	}
	return true
}
func (this *IBCPacketResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IBCPacketResult)
	if !ok {
		that2, ok := that.(IBCPacketResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TunnelID != that1.TunnelID {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if len(this.SignalPrices) != len(that1.SignalPrices) {
		return false
	}
	for i := range this.SignalPrices {
		if !this.SignalPrices[i].Equal(&that1.SignalPrices[i]) {
			return false
		}
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (m *TSSRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AxelarRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

<<<<<<< HEAD
func (m *IBCRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalInfo) Marshal() (dAtA []byte, err error) {
=======
func (m *SignalDeviation) Marshal() (dAtA []byte, err error) {
>>>>>>> master-tunnel
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalDeviation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalDeviation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HardDeviationBPS != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.HardDeviationBPS))
		i--
		dAtA[i] = 0x18
	}
	if m.SoftDeviationBPS != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.SoftDeviationBPS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Interval != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SignalDeviations) > 0 {
		for iNdEx := len(m.SignalDeviations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalDeviations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Encoder != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Encoder))
		i--
		dAtA[i] = 0x20
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTunnel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NonceCount != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.NonceCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LatestSignalPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestSignalPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestSignalPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalPrices) > 0 {
		for iNdEx := len(m.SignalPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TunnelID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalPacketFee) > 0 {
		for iNdEx := len(m.TotalPacketFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalPacketFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.PacketContent != nil {
		{
			size, err := m.PacketContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTunnel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignalPrices) > 0 {
		for iNdEx := len(m.SignalPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSPacketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSPacketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSPacketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.SigningID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.SigningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AxelarPacketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarPacketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarPacketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationContractAddress) > 0 {
		i -= len(m.DestinationContractAddress)
		copy(dAtA[i:], m.DestinationContractAddress)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainID) > 0 {
		i -= len(m.DestinationChainID)
		copy(dAtA[i:], m.DestinationChainID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.DestinationChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.IBCQueueID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.IBCQueueID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IBCPacketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCPacketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCPacketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCPacketResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCPacketResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCPacketResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SignalPrices) > 0 {
		for iNdEx := len(m.SignalPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTunnel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelID != 0 {
		i = encodeVarintTunnel(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTunnel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTunnel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TSSRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *AxelarRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

<<<<<<< HEAD
func (m *IBCRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *SignalInfo) Size() (n int) {
=======
func (m *SignalDeviation) Size() (n int) {
>>>>>>> master-tunnel
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.SoftDeviationBPS != 0 {
		n += 1 + sovTunnel(uint64(m.SoftDeviationBPS))
	}
	if m.HardDeviationBPS != 0 {
		n += 1 + sovTunnel(uint64(m.HardDeviationBPS))
	}
	return n
}

func (m *Tunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTunnel(uint64(m.ID))
	}
	if m.NonceCount != 0 {
		n += 1 + sovTunnel(uint64(m.NonceCount))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.Encoder != 0 {
		n += 1 + sovTunnel(uint64(m.Encoder))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if len(m.SignalDeviations) > 0 {
		for _, e := range m.SignalDeviations {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovTunnel(uint64(m.Interval))
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTunnel(uint64(m.CreatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *LatestSignalPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTunnel(uint64(m.TunnelID))
	}
	if len(m.SignalPrices) > 0 {
		for _, e := range m.SignalPrices {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovTunnel(uint64(m.Timestamp))
	}
	return n
}

func (m *SignalPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovTunnel(uint64(m.Price))
	}
	return n
}

func (m *TotalFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalPacketFee) > 0 {
		for _, e := range m.TotalPacketFee {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	return n
}

func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTunnel(uint64(m.TunnelID))
	}
	if m.Nonce != 0 {
		n += 1 + sovTunnel(uint64(m.Nonce))
	}
	if len(m.SignalPrices) > 0 {
		for _, e := range m.SignalPrices {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.PacketContent != nil {
		l = m.PacketContent.Size()
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTunnel(uint64(m.CreatedAt))
	}
	return n
}

func (m *TSSPacketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigningID != 0 {
		n += 1 + sovTunnel(uint64(m.SigningID))
	}
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *AxelarPacketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IBCQueueID != 0 {
		n += 1 + sovTunnel(uint64(m.IBCQueueID))
	}
	l = len(m.DestinationChainID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.DestinationContractAddress)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *IBCPacketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *IBCPacketResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTunnel(uint64(m.TunnelID))
	}
	if m.Nonce != 0 {
		n += 1 + sovTunnel(uint64(m.Nonce))
	}
	if len(m.SignalPrices) > 0 {
		for _, e := range m.SignalPrices {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTunnel(uint64(m.CreatedAt))
	}
	return n
}

func sovTunnel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTunnel(x uint64) (n int) {
	return sovTunnel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TSSRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< HEAD
func (m *IBCRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalInfo) Unmarshal(dAtA []byte) error {
=======
func (m *SignalDeviation) Unmarshal(dAtA []byte) error {
>>>>>>> master-tunnel
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalDeviation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalDeviation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftDeviationBPS", wireType)
			}
			m.SoftDeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftDeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardDeviationBPS", wireType)
			}
			m.HardDeviationBPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardDeviationBPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceCount", wireType)
			}
			m.NonceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Any{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoder", wireType)
			}
			m.Encoder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoder |= Encoder(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalDeviations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalDeviations = append(m.SignalDeviations, SignalDeviation{})
			if err := m.SignalDeviations[len(m.SignalDeviations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestSignalPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestSignalPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestSignalPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPrices = append(m.SignalPrices, SignalPrice{})
			if err := m.SignalPrices[len(m.SignalPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPacketFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPacketFee = append(m.TotalPacketFee, types1.Coin{})
			if err := m.TotalPacketFee[len(m.TotalPacketFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPrices = append(m.SignalPrices, SignalPrice{})
			if err := m.SignalPrices[len(m.SignalPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketContent == nil {
				m.PacketContent = &types.Any{}
			}
			if err := m.PacketContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSPacketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSPacketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSPacketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningID", wireType)
			}
			m.SigningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigningID |= github_com_bandprotocol_chain_v2_x_bandtss_types.SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarPacketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarPacketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarPacketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCQueueID", wireType)
			}
			m.IBCQueueID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IBCQueueID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCPacketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCPacketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCPacketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCPacketResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCPacketResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCPacketResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalPrices = append(m.SignalPrices, SignalPrice{})
			if err := m.SignalPrices[len(m.SignalPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTunnel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTunnel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTunnel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTunnel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTunnel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTunnel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTunnel = fmt.Errorf("proto: unexpected end of group")
)
