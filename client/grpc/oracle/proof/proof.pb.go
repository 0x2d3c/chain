// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bandchain/v1/oracle/proof.proto

package proof

import (
	context "context"
	fmt "fmt"
	types "github.com/bandprotocol/chain/v2/x/oracle/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryProofRequest struct {
	// RequestID is ID of an oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Height    int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryProofRequest) Reset()         { *m = QueryProofRequest{} }
func (m *QueryProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProofRequest) ProtoMessage()    {}
func (*QueryProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{0}
}
func (m *QueryProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofRequest.Merge(m, src)
}
func (m *QueryProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofRequest proto.InternalMessageInfo

func (m *QueryProofRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *QueryProofRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryProofResponse struct {
	Height int64                `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result *SingleProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryProofResponse) Reset()         { *m = QueryProofResponse{} }
func (m *QueryProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofResponse) ProtoMessage()    {}
func (*QueryProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{1}
}
func (m *QueryProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofResponse.Merge(m, src)
}
func (m *QueryProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofResponse proto.InternalMessageInfo

func (m *QueryProofResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryProofResponse) GetResult() *SingleProofResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryMultiProofRequest struct {
	RequestIds []uint64 `protobuf:"varint,1,rep,packed,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
}

func (m *QueryMultiProofRequest) Reset()         { *m = QueryMultiProofRequest{} }
func (m *QueryMultiProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMultiProofRequest) ProtoMessage()    {}
func (*QueryMultiProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{2}
}
func (m *QueryMultiProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiProofRequest.Merge(m, src)
}
func (m *QueryMultiProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiProofRequest proto.InternalMessageInfo

func (m *QueryMultiProofRequest) GetRequestIds() []uint64 {
	if m != nil {
		return m.RequestIds
	}
	return nil
}

type QueryMultiProofResponse struct {
	Height int64               `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result *MultiProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryMultiProofResponse) Reset()         { *m = QueryMultiProofResponse{} }
func (m *QueryMultiProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiProofResponse) ProtoMessage()    {}
func (*QueryMultiProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{3}
}
func (m *QueryMultiProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiProofResponse.Merge(m, src)
}
func (m *QueryMultiProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiProofResponse proto.InternalMessageInfo

func (m *QueryMultiProofResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryMultiProofResponse) GetResult() *MultiProofResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryRequestCountProofRequest struct {
}

func (m *QueryRequestCountProofRequest) Reset()         { *m = QueryRequestCountProofRequest{} }
func (m *QueryRequestCountProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequestCountProofRequest) ProtoMessage()    {}
func (*QueryRequestCountProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{4}
}
func (m *QueryRequestCountProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestCountProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestCountProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestCountProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestCountProofRequest.Merge(m, src)
}
func (m *QueryRequestCountProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestCountProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestCountProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestCountProofRequest proto.InternalMessageInfo

type QueryRequestCountProofResponse struct {
	Height int64               `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result *CountProofResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryRequestCountProofResponse) Reset()         { *m = QueryRequestCountProofResponse{} }
func (m *QueryRequestCountProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRequestCountProofResponse) ProtoMessage()    {}
func (*QueryRequestCountProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{5}
}
func (m *QueryRequestCountProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestCountProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestCountProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestCountProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestCountProofResponse.Merge(m, src)
}
func (m *QueryRequestCountProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestCountProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestCountProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestCountProofResponse proto.InternalMessageInfo

func (m *QueryRequestCountProofResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryRequestCountProofResponse) GetResult() *CountProofResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type SingleProofResponse struct {
	Proof         *SingleProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte       `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (m *SingleProofResponse) Reset()         { *m = SingleProofResponse{} }
func (m *SingleProofResponse) String() string { return proto.CompactTextString(m) }
func (*SingleProofResponse) ProtoMessage()    {}
func (*SingleProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{6}
}
func (m *SingleProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleProofResponse.Merge(m, src)
}
func (m *SingleProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *SingleProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleProofResponse proto.InternalMessageInfo

func (m *SingleProofResponse) GetProof() *SingleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *SingleProofResponse) GetEvmProofBytes() []byte {
	if m != nil {
		return m.EvmProofBytes
	}
	return nil
}

type MultiProofResponse struct {
	Proof         *MultiProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte      `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (m *MultiProofResponse) Reset()         { *m = MultiProofResponse{} }
func (m *MultiProofResponse) String() string { return proto.CompactTextString(m) }
func (*MultiProofResponse) ProtoMessage()    {}
func (*MultiProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{7}
}
func (m *MultiProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiProofResponse.Merge(m, src)
}
func (m *MultiProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiProofResponse proto.InternalMessageInfo

func (m *MultiProofResponse) GetProof() *MultiProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MultiProofResponse) GetEvmProofBytes() []byte {
	if m != nil {
		return m.EvmProofBytes
	}
	return nil
}

type CountProofResponse struct {
	Proof         *CountProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	EvmProofBytes []byte      `protobuf:"bytes,2,opt,name=evm_proof_bytes,json=evmProofBytes,proto3" json:"evm_proof_bytes,omitempty"`
}

func (m *CountProofResponse) Reset()         { *m = CountProofResponse{} }
func (m *CountProofResponse) String() string { return proto.CompactTextString(m) }
func (*CountProofResponse) ProtoMessage()    {}
func (*CountProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{8}
}
func (m *CountProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountProofResponse.Merge(m, src)
}
func (m *CountProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountProofResponse proto.InternalMessageInfo

func (m *CountProofResponse) GetProof() *CountProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *CountProofResponse) GetEvmProofBytes() []byte {
	if m != nil {
		return m.EvmProofBytes
	}
	return nil
}

type SingleProof struct {
	BlockHeight     uint64           `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	OracleDataProof *OracleDataProof `protobuf:"bytes,2,opt,name=oracle_data_proof,json=oracleDataProof,proto3" json:"oracle_data_proof,omitempty"`
	BlockRelayProof *BlockRelayProof `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (m *SingleProof) Reset()         { *m = SingleProof{} }
func (m *SingleProof) String() string { return proto.CompactTextString(m) }
func (*SingleProof) ProtoMessage()    {}
func (*SingleProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{9}
}
func (m *SingleProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleProof.Merge(m, src)
}
func (m *SingleProof) XXX_Size() int {
	return m.Size()
}
func (m *SingleProof) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleProof.DiscardUnknown(m)
}

var xxx_messageInfo_SingleProof proto.InternalMessageInfo

func (m *SingleProof) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SingleProof) GetOracleDataProof() *OracleDataProof {
	if m != nil {
		return m.OracleDataProof
	}
	return nil
}

func (m *SingleProof) GetBlockRelayProof() *BlockRelayProof {
	if m != nil {
		return m.BlockRelayProof
	}
	return nil
}

type MultiProof struct {
	BlockHeight          uint64             `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	OracleDataMultiProof []*OracleDataProof `protobuf:"bytes,2,rep,name=oracle_data_multi_proof,json=oracleDataMultiProof,proto3" json:"oracle_data_multi_proof,omitempty"`
	BlockRelayProof      *BlockRelayProof   `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (m *MultiProof) Reset()         { *m = MultiProof{} }
func (m *MultiProof) String() string { return proto.CompactTextString(m) }
func (*MultiProof) ProtoMessage()    {}
func (*MultiProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{10}
}
func (m *MultiProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiProof.Merge(m, src)
}
func (m *MultiProof) XXX_Size() int {
	return m.Size()
}
func (m *MultiProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiProof.DiscardUnknown(m)
}

var xxx_messageInfo_MultiProof proto.InternalMessageInfo

func (m *MultiProof) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MultiProof) GetOracleDataMultiProof() []*OracleDataProof {
	if m != nil {
		return m.OracleDataMultiProof
	}
	return nil
}

func (m *MultiProof) GetBlockRelayProof() *BlockRelayProof {
	if m != nil {
		return m.BlockRelayProof
	}
	return nil
}

type CountProof struct {
	BlockHeight     uint64              `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	CountProof      *RequestsCountProof `protobuf:"bytes,2,opt,name=count_proof,json=countProof,proto3" json:"count_proof,omitempty"`
	BlockRelayProof *BlockRelayProof    `protobuf:"bytes,3,opt,name=block_relay_proof,json=blockRelayProof,proto3" json:"block_relay_proof,omitempty"`
}

func (m *CountProof) Reset()         { *m = CountProof{} }
func (m *CountProof) String() string { return proto.CompactTextString(m) }
func (*CountProof) ProtoMessage()    {}
func (*CountProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{11}
}
func (m *CountProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountProof.Merge(m, src)
}
func (m *CountProof) XXX_Size() int {
	return m.Size()
}
func (m *CountProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CountProof.DiscardUnknown(m)
}

var xxx_messageInfo_CountProof proto.InternalMessageInfo

func (m *CountProof) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CountProof) GetCountProof() *RequestsCountProof {
	if m != nil {
		return m.CountProof
	}
	return nil
}

func (m *CountProof) GetBlockRelayProof() *BlockRelayProof {
	if m != nil {
		return m.BlockRelayProof
	}
	return nil
}

type OracleDataProof struct {
	Result      *types.Result     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Version     uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	MerklePaths []*IAVLMerklePath `protobuf:"bytes,3,rep,name=merkle_paths,json=merklePaths,proto3" json:"merkle_paths,omitempty"`
}

func (m *OracleDataProof) Reset()         { *m = OracleDataProof{} }
func (m *OracleDataProof) String() string { return proto.CompactTextString(m) }
func (*OracleDataProof) ProtoMessage()    {}
func (*OracleDataProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{12}
}
func (m *OracleDataProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleDataProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleDataProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleDataProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleDataProof.Merge(m, src)
}
func (m *OracleDataProof) XXX_Size() int {
	return m.Size()
}
func (m *OracleDataProof) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleDataProof.DiscardUnknown(m)
}

var xxx_messageInfo_OracleDataProof proto.InternalMessageInfo

func (m *OracleDataProof) GetResult() *types.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *OracleDataProof) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OracleDataProof) GetMerklePaths() []*IAVLMerklePath {
	if m != nil {
		return m.MerklePaths
	}
	return nil
}

type IAVLMerklePath struct {
	IsDataOnRight  bool   `protobuf:"varint,1,opt,name=is_data_on_right,json=isDataOnRight,proto3" json:"is_data_on_right,omitempty"`
	SubtreeHeight  uint32 `protobuf:"varint,2,opt,name=subtree_height,json=subtreeHeight,proto3" json:"subtree_height,omitempty"`
	SubtreeSize    uint64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	SubtreeVersion uint64 `protobuf:"varint,4,opt,name=subtree_version,json=subtreeVersion,proto3" json:"subtree_version,omitempty"`
	SiblingHash    []byte `protobuf:"bytes,5,opt,name=sibling_hash,json=siblingHash,proto3" json:"sibling_hash,omitempty"`
}

func (m *IAVLMerklePath) Reset()         { *m = IAVLMerklePath{} }
func (m *IAVLMerklePath) String() string { return proto.CompactTextString(m) }
func (*IAVLMerklePath) ProtoMessage()    {}
func (*IAVLMerklePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{13}
}
func (m *IAVLMerklePath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IAVLMerklePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IAVLMerklePath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IAVLMerklePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IAVLMerklePath.Merge(m, src)
}
func (m *IAVLMerklePath) XXX_Size() int {
	return m.Size()
}
func (m *IAVLMerklePath) XXX_DiscardUnknown() {
	xxx_messageInfo_IAVLMerklePath.DiscardUnknown(m)
}

var xxx_messageInfo_IAVLMerklePath proto.InternalMessageInfo

func (m *IAVLMerklePath) GetIsDataOnRight() bool {
	if m != nil {
		return m.IsDataOnRight
	}
	return false
}

func (m *IAVLMerklePath) GetSubtreeHeight() uint32 {
	if m != nil {
		return m.SubtreeHeight
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeSize() uint64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeVersion() uint64 {
	if m != nil {
		return m.SubtreeVersion
	}
	return 0
}

func (m *IAVLMerklePath) GetSiblingHash() []byte {
	if m != nil {
		return m.SiblingHash
	}
	return nil
}

type BlockRelayProof struct {
	MultiStoreProof        *MultiStoreProof        `protobuf:"bytes,1,opt,name=multi_store_proof,json=multiStoreProof,proto3" json:"multi_store_proof,omitempty"`
	BlockHeaderMerkleParts *BlockHeaderMerkleParts `protobuf:"bytes,2,opt,name=block_header_merkle_parts,json=blockHeaderMerkleParts,proto3" json:"block_header_merkle_parts,omitempty"`
	CommonEncodedVotePart  *CommonEncodedVotePart  `protobuf:"bytes,3,opt,name=common_encoded_vote_part,json=commonEncodedVotePart,proto3" json:"common_encoded_vote_part,omitempty"`
	Signatures             []*TMSignature          `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *BlockRelayProof) Reset()         { *m = BlockRelayProof{} }
func (m *BlockRelayProof) String() string { return proto.CompactTextString(m) }
func (*BlockRelayProof) ProtoMessage()    {}
func (*BlockRelayProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{14}
}
func (m *BlockRelayProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRelayProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRelayProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRelayProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRelayProof.Merge(m, src)
}
func (m *BlockRelayProof) XXX_Size() int {
	return m.Size()
}
func (m *BlockRelayProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRelayProof.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRelayProof proto.InternalMessageInfo

func (m *BlockRelayProof) GetMultiStoreProof() *MultiStoreProof {
	if m != nil {
		return m.MultiStoreProof
	}
	return nil
}

func (m *BlockRelayProof) GetBlockHeaderMerkleParts() *BlockHeaderMerkleParts {
	if m != nil {
		return m.BlockHeaderMerkleParts
	}
	return nil
}

func (m *BlockRelayProof) GetCommonEncodedVotePart() *CommonEncodedVotePart {
	if m != nil {
		return m.CommonEncodedVotePart
	}
	return nil
}

func (m *BlockRelayProof) GetSignatures() []*TMSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type MultiStoreProof struct {
	OracleIAVLStateHash               []byte `protobuf:"bytes,1,opt,name=oracle_iavl_state_hash,json=oracleIavlStateHash,proto3" json:"oracle_iavl_state_hash,omitempty"`
	ParamsStoreMerkleHash             []byte `protobuf:"bytes,2,opt,name=params_store_merkle_hash,json=paramsStoreMerkleHash,proto3" json:"params_store_merkle_hash,omitempty"`
	SlashingToStakingStoresMerkleHash []byte `protobuf:"bytes,3,opt,name=slashing_to_staking_stores_merkle_hash,json=slashingToStakingStoresMerkleHash,proto3" json:"slashing_to_staking_stores_merkle_hash,omitempty"`
	GovToMintStoresMerkleHash         []byte `protobuf:"bytes,4,opt,name=gov_to_mint_stores_merkle_hash,json=govToMintStoresMerkleHash,proto3" json:"gov_to_mint_stores_merkle_hash,omitempty"`
	AuthToFeegrantStoresMerkleHash    []byte `protobuf:"bytes,5,opt,name=auth_to_feegrant_stores_merkle_hash,json=authToFeegrantStoresMerkleHash,proto3" json:"auth_to_feegrant_stores_merkle_hash,omitempty"`
	TransferToUpgradeStoresMerkleHash []byte `protobuf:"bytes,6,opt,name=transfer_to_upgrade_stores_merkle_hash,json=transferToUpgradeStoresMerkleHash,proto3" json:"transfer_to_upgrade_stores_merkle_hash,omitempty"`
}

func (m *MultiStoreProof) Reset()         { *m = MultiStoreProof{} }
func (m *MultiStoreProof) String() string { return proto.CompactTextString(m) }
func (*MultiStoreProof) ProtoMessage()    {}
func (*MultiStoreProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{15}
}
func (m *MultiStoreProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStoreProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStoreProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStoreProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStoreProof.Merge(m, src)
}
func (m *MultiStoreProof) XXX_Size() int {
	return m.Size()
}
func (m *MultiStoreProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStoreProof.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStoreProof proto.InternalMessageInfo

func (m *MultiStoreProof) GetOracleIAVLStateHash() []byte {
	if m != nil {
		return m.OracleIAVLStateHash
	}
	return nil
}

func (m *MultiStoreProof) GetParamsStoreMerkleHash() []byte {
	if m != nil {
		return m.ParamsStoreMerkleHash
	}
	return nil
}

func (m *MultiStoreProof) GetSlashingToStakingStoresMerkleHash() []byte {
	if m != nil {
		return m.SlashingToStakingStoresMerkleHash
	}
	return nil
}

func (m *MultiStoreProof) GetGovToMintStoresMerkleHash() []byte {
	if m != nil {
		return m.GovToMintStoresMerkleHash
	}
	return nil
}

func (m *MultiStoreProof) GetAuthToFeegrantStoresMerkleHash() []byte {
	if m != nil {
		return m.AuthToFeegrantStoresMerkleHash
	}
	return nil
}

func (m *MultiStoreProof) GetTransferToUpgradeStoresMerkleHash() []byte {
	if m != nil {
		return m.TransferToUpgradeStoresMerkleHash
	}
	return nil
}

type BlockHeaderMerkleParts struct {
	VersionAndChainIdHash             []byte `protobuf:"bytes,1,opt,name=version_and_chain_id_hash,json=versionAndChainIdHash,proto3" json:"version_and_chain_id_hash,omitempty"`
	Height                            uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                        uint64 `protobuf:"varint,3,opt,name=time_second,json=timeSecond,proto3" json:"time_second,omitempty"`
	TimeNanoSecond                    uint32 `protobuf:"varint,4,opt,name=time_nano_second,json=timeNanoSecond,proto3" json:"time_nano_second,omitempty"`
	LastBlockIdAndOther               []byte `protobuf:"bytes,5,opt,name=last_block_id_and_other,json=lastBlockIdAndOther,proto3" json:"last_block_id_and_other,omitempty"`
	NextValidatorHashAndConsensusHash []byte `protobuf:"bytes,6,opt,name=next_validator_hash_and_consensus_hash,json=nextValidatorHashAndConsensusHash,proto3" json:"next_validator_hash_and_consensus_hash,omitempty"`
	LastResultsHash                   []byte `protobuf:"bytes,7,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`
	EvidenceAndProposerHash           []byte `protobuf:"bytes,8,opt,name=evidence_and_proposer_hash,json=evidenceAndProposerHash,proto3" json:"evidence_and_proposer_hash,omitempty"`
}

func (m *BlockHeaderMerkleParts) Reset()         { *m = BlockHeaderMerkleParts{} }
func (m *BlockHeaderMerkleParts) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderMerkleParts) ProtoMessage()    {}
func (*BlockHeaderMerkleParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{16}
}
func (m *BlockHeaderMerkleParts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderMerkleParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderMerkleParts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderMerkleParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderMerkleParts.Merge(m, src)
}
func (m *BlockHeaderMerkleParts) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderMerkleParts) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderMerkleParts.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderMerkleParts proto.InternalMessageInfo

func (m *BlockHeaderMerkleParts) GetVersionAndChainIdHash() []byte {
	if m != nil {
		return m.VersionAndChainIdHash
	}
	return nil
}

func (m *BlockHeaderMerkleParts) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderMerkleParts) GetTimeSecond() uint64 {
	if m != nil {
		return m.TimeSecond
	}
	return 0
}

func (m *BlockHeaderMerkleParts) GetTimeNanoSecond() uint32 {
	if m != nil {
		return m.TimeNanoSecond
	}
	return 0
}

func (m *BlockHeaderMerkleParts) GetLastBlockIdAndOther() []byte {
	if m != nil {
		return m.LastBlockIdAndOther
	}
	return nil
}

func (m *BlockHeaderMerkleParts) GetNextValidatorHashAndConsensusHash() []byte {
	if m != nil {
		return m.NextValidatorHashAndConsensusHash
	}
	return nil
}

func (m *BlockHeaderMerkleParts) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *BlockHeaderMerkleParts) GetEvidenceAndProposerHash() []byte {
	if m != nil {
		return m.EvidenceAndProposerHash
	}
	return nil
}

type CommonEncodedVotePart struct {
	SignedDataPrefix []byte `protobuf:"bytes,1,opt,name=signed_data_prefix,json=signedDataPrefix,proto3" json:"signed_data_prefix,omitempty"`
	SignedDataSuffix []byte `protobuf:"bytes,2,opt,name=signed_data_suffix,json=signedDataSuffix,proto3" json:"signed_data_suffix,omitempty"`
}

func (m *CommonEncodedVotePart) Reset()         { *m = CommonEncodedVotePart{} }
func (m *CommonEncodedVotePart) String() string { return proto.CompactTextString(m) }
func (*CommonEncodedVotePart) ProtoMessage()    {}
func (*CommonEncodedVotePart) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{17}
}
func (m *CommonEncodedVotePart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonEncodedVotePart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonEncodedVotePart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonEncodedVotePart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonEncodedVotePart.Merge(m, src)
}
func (m *CommonEncodedVotePart) XXX_Size() int {
	return m.Size()
}
func (m *CommonEncodedVotePart) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonEncodedVotePart.DiscardUnknown(m)
}

var xxx_messageInfo_CommonEncodedVotePart proto.InternalMessageInfo

func (m *CommonEncodedVotePart) GetSignedDataPrefix() []byte {
	if m != nil {
		return m.SignedDataPrefix
	}
	return nil
}

func (m *CommonEncodedVotePart) GetSignedDataSuffix() []byte {
	if m != nil {
		return m.SignedDataSuffix
	}
	return nil
}

type TMSignature struct {
	R                []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S                []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	V                uint32 `protobuf:"varint,3,opt,name=v,proto3" json:"v,omitempty"`
	EncodedTimestamp []byte `protobuf:"bytes,4,opt,name=encoded_timestamp,json=encodedTimestamp,proto3" json:"encoded_timestamp,omitempty"`
}

func (m *TMSignature) Reset()         { *m = TMSignature{} }
func (m *TMSignature) String() string { return proto.CompactTextString(m) }
func (*TMSignature) ProtoMessage()    {}
func (*TMSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{18}
}
func (m *TMSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TMSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TMSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TMSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TMSignature.Merge(m, src)
}
func (m *TMSignature) XXX_Size() int {
	return m.Size()
}
func (m *TMSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_TMSignature.DiscardUnknown(m)
}

var xxx_messageInfo_TMSignature proto.InternalMessageInfo

func (m *TMSignature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *TMSignature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *TMSignature) GetV() uint32 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *TMSignature) GetEncodedTimestamp() []byte {
	if m != nil {
		return m.EncodedTimestamp
	}
	return nil
}

type RequestsCountProof struct {
	Count       uint64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Version     uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	MerklePaths []*IAVLMerklePath `protobuf:"bytes,3,rep,name=merkle_paths,json=merklePaths,proto3" json:"merkle_paths,omitempty"`
}

func (m *RequestsCountProof) Reset()         { *m = RequestsCountProof{} }
func (m *RequestsCountProof) String() string { return proto.CompactTextString(m) }
func (*RequestsCountProof) ProtoMessage()    {}
func (*RequestsCountProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae72765f9c902173, []int{19}
}
func (m *RequestsCountProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestsCountProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestsCountProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestsCountProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestsCountProof.Merge(m, src)
}
func (m *RequestsCountProof) XXX_Size() int {
	return m.Size()
}
func (m *RequestsCountProof) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestsCountProof.DiscardUnknown(m)
}

var xxx_messageInfo_RequestsCountProof proto.InternalMessageInfo

func (m *RequestsCountProof) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RequestsCountProof) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RequestsCountProof) GetMerklePaths() []*IAVLMerklePath {
	if m != nil {
		return m.MerklePaths
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryProofRequest)(nil), "bandchain.v1.oracle.QueryProofRequest")
	proto.RegisterType((*QueryProofResponse)(nil), "bandchain.v1.oracle.QueryProofResponse")
	proto.RegisterType((*QueryMultiProofRequest)(nil), "bandchain.v1.oracle.QueryMultiProofRequest")
	proto.RegisterType((*QueryMultiProofResponse)(nil), "bandchain.v1.oracle.QueryMultiProofResponse")
	proto.RegisterType((*QueryRequestCountProofRequest)(nil), "bandchain.v1.oracle.QueryRequestCountProofRequest")
	proto.RegisterType((*QueryRequestCountProofResponse)(nil), "bandchain.v1.oracle.QueryRequestCountProofResponse")
	proto.RegisterType((*SingleProofResponse)(nil), "bandchain.v1.oracle.SingleProofResponse")
	proto.RegisterType((*MultiProofResponse)(nil), "bandchain.v1.oracle.MultiProofResponse")
	proto.RegisterType((*CountProofResponse)(nil), "bandchain.v1.oracle.CountProofResponse")
	proto.RegisterType((*SingleProof)(nil), "bandchain.v1.oracle.SingleProof")
	proto.RegisterType((*MultiProof)(nil), "bandchain.v1.oracle.MultiProof")
	proto.RegisterType((*CountProof)(nil), "bandchain.v1.oracle.CountProof")
	proto.RegisterType((*OracleDataProof)(nil), "bandchain.v1.oracle.OracleDataProof")
	proto.RegisterType((*IAVLMerklePath)(nil), "bandchain.v1.oracle.IAVLMerklePath")
	proto.RegisterType((*BlockRelayProof)(nil), "bandchain.v1.oracle.BlockRelayProof")
	proto.RegisterType((*MultiStoreProof)(nil), "bandchain.v1.oracle.MultiStoreProof")
	proto.RegisterType((*BlockHeaderMerkleParts)(nil), "bandchain.v1.oracle.BlockHeaderMerkleParts")
	proto.RegisterType((*CommonEncodedVotePart)(nil), "bandchain.v1.oracle.CommonEncodedVotePart")
	proto.RegisterType((*TMSignature)(nil), "bandchain.v1.oracle.TMSignature")
	proto.RegisterType((*RequestsCountProof)(nil), "bandchain.v1.oracle.RequestsCountProof")
}

func init() { proto.RegisterFile("bandchain/v1/oracle/proof.proto", fileDescriptor_ae72765f9c902173) }

var fileDescriptor_ae72765f9c902173 = []byte{
	// 1466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x1b, 0xef, 0xc6, 0x4e, 0xda, 0xf7, 0x71, 0xd2, 0x24, 0x93, 0x26, 0x71, 0xa3, 0xb7, 0x4e, 0xba,
	0xed, 0x9b, 0xa4, 0x4d, 0x15, 0x2b, 0xe9, 0xcb, 0x47, 0xc5, 0x81, 0x26, 0x85, 0x2a, 0x81, 0x86,
	0xa6, 0xeb, 0x90, 0x03, 0x1c, 0x56, 0xe3, 0xdd, 0x89, 0xbd, 0xea, 0x7a, 0xc6, 0xcc, 0x8c, 0x57,
	0x4d, 0x11, 0x17, 0x6e, 0x48, 0x1c, 0x40, 0xdc, 0xb9, 0x72, 0xe4, 0xdf, 0x40, 0x42, 0x82, 0x4a,
	0x70, 0x40, 0x42, 0xaa, 0x50, 0xca, 0x5f, 0xc0, 0x5f, 0x80, 0xe6, 0x63, 0x9d, 0x75, 0xbc, 0x26,
	0xa9, 0x54, 0x4e, 0xbb, 0xf3, 0xcc, 0xef, 0xf9, 0x3d, 0x9f, 0xf3, 0x05, 0xf3, 0x75, 0x4c, 0xc3,
	0xa0, 0x89, 0x23, 0x5a, 0x4d, 0xd6, 0xaa, 0x8c, 0xe3, 0x20, 0x26, 0xd5, 0x36, 0x67, 0xec, 0x60,
	0xb5, 0xcd, 0x99, 0x64, 0x68, 0xaa, 0x0b, 0x58, 0x4d, 0xd6, 0x56, 0x0d, 0x60, 0xee, 0xbf, 0x0d,
	0xc6, 0x1a, 0x31, 0xa9, 0xe2, 0x76, 0x54, 0xc5, 0x94, 0x32, 0x89, 0x65, 0xc4, 0xa8, 0x30, 0x2a,
	0x73, 0x97, 0x1a, 0xac, 0xc1, 0xf4, 0x6f, 0x55, 0xfd, 0x59, 0xe9, 0x8c, 0x25, 0xef, 0x9a, 0x31,
	0x72, 0xf7, 0x3d, 0x98, 0x7c, 0xd4, 0x21, 0xfc, 0x70, 0x57, 0x19, 0xf5, 0xc8, 0x27, 0x1d, 0x22,
	0x24, 0xba, 0x02, 0xc0, 0xcd, 0xaf, 0x1f, 0x85, 0x65, 0x67, 0xc1, 0x59, 0x2e, 0x7a, 0xff, 0xb1,
	0x92, 0xed, 0x10, 0xcd, 0xc0, 0x48, 0x93, 0x44, 0x8d, 0xa6, 0x2c, 0x0f, 0x2d, 0x38, 0xcb, 0x05,
	0xcf, 0x8e, 0x5c, 0x0a, 0x28, 0xcb, 0x25, 0xda, 0x8c, 0x0a, 0x92, 0x41, 0x3b, 0x59, 0x34, 0xba,
	0x0b, 0x23, 0x9c, 0x88, 0x4e, 0x6c, 0x58, 0x4a, 0xeb, 0xcb, 0xab, 0x39, 0xb1, 0xae, 0xd6, 0x22,
	0xda, 0x88, 0x49, 0x0f, 0xa3, 0x67, 0xf5, 0xdc, 0x3b, 0x30, 0xa3, 0xed, 0xed, 0x74, 0x62, 0x19,
	0xf5, 0x04, 0x30, 0x0f, 0xa5, 0xe3, 0x00, 0x44, 0xd9, 0x59, 0x28, 0x2c, 0x17, 0x3d, 0xe8, 0x46,
	0x20, 0x5c, 0x0e, 0xb3, 0x7d, 0xaa, 0xa7, 0xf8, 0xfb, 0xf6, 0x09, 0x7f, 0x97, 0x72, 0xfd, 0xed,
	0x27, 0xec, 0xba, 0x3b, 0x0f, 0x57, 0xb4, 0x4d, 0xeb, 0xe4, 0x3d, 0xd6, 0xa1, 0x32, 0xeb, 0xb5,
	0x7b, 0x08, 0x95, 0x41, 0x80, 0x57, 0xe2, 0x5b, 0x3f, 0x61, 0xd7, 0xb7, 0x0e, 0x4c, 0xe5, 0x64,
	0x1a, 0xbd, 0x0e, 0xc3, 0xba, 0x1b, 0xb5, 0xb9, 0xd2, 0xfa, 0xc2, 0xa9, 0x25, 0x32, 0x70, 0xb4,
	0x08, 0xe3, 0x24, 0x69, 0xf9, 0x7a, 0xe0, 0xd7, 0x0f, 0x25, 0x11, 0xda, 0xb1, 0x51, 0x6f, 0x8c,
	0x24, 0x2d, 0x8d, 0xdc, 0x54, 0x42, 0x57, 0x00, 0xca, 0xa9, 0xc0, 0x6b, 0xbd, 0x56, 0xe7, 0x4f,
	0x4b, 0xf4, 0xcb, 0x1b, 0xcd, 0x49, 0xed, 0x99, 0x8c, 0x66, 0xf4, 0x5e, 0xd2, 0xe8, 0xaf, 0x0e,
	0x94, 0x32, 0x89, 0x42, 0x57, 0x61, 0xb4, 0x1e, 0xb3, 0xe0, 0xb1, 0x9f, 0xa9, 0x67, 0xd1, 0x2b,
	0x69, 0xd9, 0x96, 0x29, 0xea, 0x2e, 0x4c, 0x1a, 0xb3, 0x7e, 0x88, 0x25, 0x36, 0x26, 0x6c, 0x7d,
	0xaf, 0xe7, 0x7a, 0xf7, 0x50, 0x7f, 0xde, 0xc1, 0x12, 0x1b, 0x17, 0xc7, 0x59, 0xaf, 0x40, 0x31,
	0x1a, 0xa3, 0x9c, 0xc4, 0xf8, 0xd0, 0x32, 0x16, 0xfe, 0x81, 0x71, 0x53, 0xa1, 0x3d, 0x05, 0xb6,
	0x8c, 0xf5, 0x5e, 0x81, 0xfb, 0xdc, 0x01, 0x38, 0xae, 0xc4, 0x59, 0xa2, 0xfa, 0x18, 0x66, 0xb3,
	0x51, 0xb5, 0x94, 0x72, 0x37, 0xb6, 0xc2, 0x99, 0x63, 0xbb, 0x74, 0x1c, 0x5b, 0xc6, 0xfe, 0xab,
	0x0f, 0xf0, 0x47, 0x07, 0xe0, 0xb8, 0xea, 0x67, 0x09, 0x70, 0x0b, 0x4a, 0x81, 0x52, 0xe8, 0x29,
	0x58, 0xfe, 0x82, 0xb4, 0x0b, 0x5d, 0x64, 0xda, 0x0a, 0x82, 0x63, 0x63, 0xaf, 0x3e, 0x9a, 0x6f,
	0x1d, 0x18, 0x3f, 0x91, 0x49, 0x74, 0xa3, 0xbb, 0x77, 0x98, 0xce, 0x9f, 0x4c, 0xd9, 0x92, 0xb5,
	0x55, 0x4f, 0x4f, 0xa4, 0xbb, 0x04, 0x2a, 0xc3, 0xf9, 0x84, 0x70, 0x11, 0x31, 0xaa, 0xc3, 0x2a,
	0x7a, 0xe9, 0x10, 0xdd, 0x87, 0xd1, 0x16, 0xe1, 0x8f, 0x63, 0xe2, 0xb7, 0xb1, 0x6c, 0x8a, 0x72,
	0x41, 0x97, 0xf2, 0x5a, 0xae, 0x97, 0xdb, 0x1b, 0xfb, 0x0f, 0x76, 0x34, 0x78, 0x17, 0xcb, 0xa6,
	0x57, 0x6a, 0x75, 0xff, 0x85, 0xfb, 0xb3, 0x03, 0x17, 0x7b, 0xe7, 0xd1, 0x12, 0x4c, 0x44, 0xc2,
	0x34, 0x0b, 0xa3, 0x3e, 0xef, 0xa6, 0xfd, 0x82, 0x37, 0x16, 0x09, 0x15, 0xc6, 0x43, 0xea, 0xe9,
	0xc4, 0xff, 0x0f, 0x2e, 0x8a, 0x4e, 0x5d, 0x72, 0x42, 0xfc, 0xcc, 0xf1, 0x34, 0xe6, 0x8d, 0x59,
	0xa9, 0xad, 0xcf, 0x55, 0x18, 0x4d, 0x61, 0x22, 0x7a, 0x4a, 0x74, 0x42, 0x8b, 0x5e, 0xc9, 0xca,
	0x6a, 0xd1, 0x53, 0x82, 0x96, 0x60, 0x3c, 0x85, 0xa4, 0xf1, 0x16, 0x35, 0x2a, 0x35, 0xb0, 0x6f,
	0xc3, 0x56, 0x5c, 0x51, 0x3d, 0x8e, 0x68, 0xc3, 0x6f, 0x62, 0xd1, 0x2c, 0x0f, 0xeb, 0xa5, 0x5f,
	0xb2, 0xb2, 0x2d, 0x2c, 0x9a, 0xee, 0x5f, 0x43, 0x30, 0x7e, 0xa2, 0x2e, 0xaa, 0xb0, 0xa6, 0xef,
	0x85, 0x64, 0x9c, 0xf8, 0xd9, 0x7d, 0xe7, 0xfa, 0xe0, 0xcd, 0xae, 0xa6, 0xc0, 0xb6, 0xb0, 0xad,
	0x5e, 0x01, 0x3a, 0x80, 0xcb, 0x69, 0x5f, 0xe2, 0x90, 0x70, 0xbf, 0x5b, 0x0c, 0x2e, 0x85, 0x6d,
	0xc1, 0x95, 0xc1, 0x2d, 0xb3, 0xa5, 0x95, 0xd2, 0x9c, 0x73, 0x29, 0xbc, 0x99, 0x7a, 0xae, 0x1c,
	0x05, 0x50, 0x0e, 0x58, 0xab, 0xc5, 0xa8, 0x4f, 0x68, 0xc0, 0x42, 0x12, 0xfa, 0x09, 0x93, 0xc6,
	0x8e, 0xed, 0xcc, 0x9b, 0x03, 0x36, 0x4e, 0xa5, 0xf4, 0xae, 0xd1, 0xd9, 0x67, 0x52, 0xd3, 0x79,
	0xd3, 0x41, 0x9e, 0x18, 0xdd, 0x05, 0x10, 0x51, 0x83, 0x62, 0xd9, 0xe1, 0x44, 0x94, 0x8b, 0xba,
	0x95, 0xf2, 0x8f, 0x9e, 0xbd, 0x9d, 0x5a, 0x0a, 0xf4, 0x32, 0x3a, 0xee, 0x4f, 0x05, 0x18, 0x3f,
	0x91, 0x33, 0xf4, 0x00, 0xec, 0x1d, 0xc8, 0x8f, 0x70, 0x12, 0xfb, 0x42, 0x62, 0x49, 0x4c, 0xd5,
	0x54, 0xe6, 0x47, 0x37, 0x67, 0x8f, 0x9e, 0xcf, 0x4f, 0x99, 0xc5, 0xa1, 0x3a, 0xb0, 0xa6, 0xe6,
	0x55, 0x05, 0xbd, 0x29, 0xa3, 0xb6, 0x8d, 0x93, 0xb8, 0x2b, 0x44, 0x6f, 0x40, 0xb9, 0x8d, 0x39,
	0x6e, 0x09, 0x5b, 0x43, 0x9b, 0x70, 0xcd, 0x67, 0x0e, 0x80, 0x69, 0x33, 0xaf, 0x3d, 0x30, 0x29,
	0xd4, 0x8a, 0x8f, 0x60, 0x51, 0xc4, 0x58, 0x34, 0x55, 0xcf, 0x48, 0xa6, 0xdc, 0x78, 0xac, 0x7e,
	0x35, 0x8b, 0xe8, 0xa1, 0x29, 0x68, 0x9a, 0xab, 0x29, 0x7a, 0x8f, 0xd5, 0x0c, 0x56, 0x33, 0x8a,
	0x0c, 0xe5, 0x06, 0x54, 0x1a, 0x2c, 0x51, 0x6c, 0xad, 0x88, 0xca, 0x3c, 0xaa, 0xa2, 0xa6, 0xba,
	0xdc, 0x60, 0xc9, 0x1e, 0xdb, 0x89, 0xa8, 0xec, 0xa3, 0x78, 0x1f, 0xae, 0xe1, 0x8e, 0x6c, 0x2a,
	0x8e, 0x03, 0x42, 0x1a, 0x1c, 0xe7, 0xf3, 0x98, 0xfe, 0xae, 0x28, 0xe8, 0x1e, 0xbb, 0x6f, 0x81,
	0x7d, 0x64, 0x8f, 0x60, 0x51, 0x72, 0x4c, 0xc5, 0x01, 0xe1, 0x8a, 0xb0, 0xd3, 0x6e, 0x70, 0x1c,
	0x92, 0x3c, 0xbe, 0x11, 0x13, 0x62, 0x8a, 0xde, 0x63, 0x1f, 0x1a, 0xec, 0x49, 0x4a, 0xf7, 0xbb,
	0x02, 0xcc, 0xe4, 0xb7, 0x2a, 0x7a, 0x13, 0x2e, 0xdb, 0x45, 0xea, 0x63, 0x1a, 0xfa, 0xba, 0x45,
	0xfc, 0x28, 0xcc, 0x94, 0xd6, 0x9b, 0xb6, 0x80, 0x0d, 0x1a, 0xde, 0x53, 0xd3, 0xdb, 0xa1, 0xf6,
	0xb3, 0xf7, 0x1e, 0x5b, 0xec, 0xde, 0xa6, 0xe6, 0xa1, 0x24, 0xa3, 0x16, 0xf1, 0x05, 0x09, 0x18,
	0x0d, 0xed, 0x06, 0x01, 0x4a, 0x54, 0xd3, 0x12, 0xb4, 0x0c, 0x13, 0x1a, 0x40, 0x31, 0x65, 0x29,
	0xaa, 0xa8, 0xf7, 0x9a, 0x8b, 0x4a, 0xfe, 0x01, 0xa6, 0xcc, 0x22, 0xff, 0x0f, 0xb3, 0x31, 0x16,
	0xd2, 0x37, 0x8b, 0x33, 0x0a, 0xb5, 0x8b, 0x4c, 0x36, 0x09, 0xb7, 0xb9, 0x9c, 0x52, 0xd3, 0x3a,
	0xb2, 0xed, 0x70, 0x83, 0x86, 0x0f, 0xd5, 0x94, 0x4a, 0x20, 0x25, 0x4f, 0xa4, 0x9f, 0xe0, 0x38,
	0x0a, 0xb1, 0x64, 0x5c, 0x07, 0x63, 0xc2, 0x53, 0x97, 0x15, 0x2a, 0x3a, 0xa2, 0x27, 0x81, 0x0a,
	0xbd, 0x9f, 0x82, 0x55, 0x6c, 0x2a, 0xd2, 0x14, 0xa9, 0x63, 0xbd, 0x09, 0x93, 0xda, 0x11, 0xb3,
	0x93, 0x5b, 0xed, 0xf3, 0x5a, 0x7b, 0x5c, 0x4d, 0x98, 0x9d, 0xde, 0x60, 0xdf, 0x82, 0x39, 0x92,
	0x44, 0x21, 0xa1, 0x01, 0xd1, 0x36, 0xdb, 0x9c, 0xb5, 0x99, 0x20, 0xc6, 0x8b, 0xf2, 0x05, 0xad,
	0x34, 0x9b, 0x22, 0x36, 0x68, 0xb8, 0x6b, 0xe7, 0x75, 0xa5, 0x04, 0x4c, 0xe7, 0x2e, 0x76, 0x74,
	0x0b, 0x90, 0x5a, 0xa1, 0x24, 0x4c, 0xaf, 0x33, 0xe4, 0x20, 0x7a, 0x62, 0x0b, 0x34, 0x61, 0x66,
	0xcc, 0xa1, 0xa4, 0xe4, 0x27, 0xd1, 0xa2, 0x73, 0xa0, 0xd0, 0x43, 0x27, 0xd1, 0x35, 0x2d, 0x77,
	0x43, 0x28, 0x65, 0xb6, 0x02, 0x34, 0x0a, 0x0e, 0xb7, 0xcc, 0x0e, 0x57, 0xa3, 0xf4, 0x52, 0xe6,
	0x08, 0x35, 0x4a, 0x74, 0x49, 0xc7, 0x3c, 0x27, 0x41, 0x2b, 0x30, 0x99, 0x6e, 0x64, 0xaa, 0x72,
	0x42, 0xe2, 0x56, 0xdb, 0xae, 0x96, 0x09, 0x3b, 0xb1, 0x97, 0xca, 0xdd, 0x2f, 0x1d, 0x40, 0xfd,
	0x47, 0x36, 0xba, 0x04, 0xc3, 0xfa, 0xd0, 0xb6, 0x97, 0x01, 0x33, 0xf8, 0xf7, 0xcf, 0xca, 0xf5,
	0xdf, 0x0b, 0x70, 0xbe, 0x46, 0x78, 0x12, 0x05, 0x04, 0x7d, 0xe1, 0xc0, 0xb0, 0xf1, 0x66, 0x31,
	0x97, 0xa7, 0xef, 0x8d, 0x37, 0xb7, 0x74, 0x2a, 0xce, 0x5c, 0x8c, 0xdd, 0xea, 0xe7, 0xbf, 0xfc,
	0xf9, 0xcd, 0xd0, 0x0d, 0xb4, 0x54, 0x1d, 0xf8, 0x58, 0xad, 0x7e, 0x7a, 0xfc, 0xda, 0xfa, 0x0c,
	0x7d, 0xdd, 0x7b, 0x27, 0x5c, 0x19, 0x6c, 0xa8, 0xef, 0xe1, 0x36, 0x77, 0xeb, 0x6c, 0x60, 0xeb,
	0xda, 0xb2, 0x76, 0xcd, 0x45, 0x0b, 0xb9, 0xae, 0x65, 0xae, 0x96, 0xe8, 0x7b, 0x07, 0x26, 0xfb,
	0x9e, 0x55, 0x68, 0x7d, 0xb0, 0xb5, 0x41, 0x8f, 0xb4, 0xb9, 0xdb, 0x2f, 0xa5, 0x63, 0x1d, 0x5d,
	0xd3, 0x8e, 0xae, 0xa0, 0x1b, 0xb9, 0x8e, 0xda, 0xe4, 0x09, 0x3f, 0x73, 0x6f, 0xdc, 0xac, 0xfd,
	0x70, 0x54, 0x71, 0x9e, 0x1d, 0x55, 0x9c, 0x3f, 0x8e, 0x2a, 0xce, 0x57, 0x2f, 0x2a, 0xe7, 0x9e,
	0xbd, 0xa8, 0x9c, 0xfb, 0xed, 0x45, 0xe5, 0xdc, 0x47, 0x77, 0x1a, 0x91, 0x6c, 0x76, 0xea, 0xab,
	0x01, 0x6b, 0x69, 0x3a, 0xfd, 0x90, 0x0f, 0x58, 0x5c, 0xb5, 0xbc, 0xeb, 0xd5, 0x20, 0x8e, 0x08,
	0x95, 0xd5, 0x06, 0x6f, 0x07, 0x3d, 0x75, 0xaa, 0x8f, 0x68, 0xec, 0xed, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0x2a, 0x3f, 0x46, 0x78, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Proof(ctx context.Context, in *QueryProofRequest, opts ...grpc.CallOption) (*QueryProofResponse, error)
	MultiProof(ctx context.Context, in *QueryMultiProofRequest, opts ...grpc.CallOption) (*QueryMultiProofResponse, error)
	RequestCountProof(ctx context.Context, in *QueryRequestCountProofRequest, opts ...grpc.CallOption) (*QueryRequestCountProofResponse, error)
}

type serviceClient struct {
	cc grpc1.ClientConn
}

func NewServiceClient(cc grpc1.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Proof(ctx context.Context, in *QueryProofRequest, opts ...grpc.CallOption) (*QueryProofResponse, error) {
	out := new(QueryProofResponse)
	err := c.cc.Invoke(ctx, "/bandchain.v1.oracle.Service/Proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) MultiProof(ctx context.Context, in *QueryMultiProofRequest, opts ...grpc.CallOption) (*QueryMultiProofResponse, error) {
	out := new(QueryMultiProofResponse)
	err := c.cc.Invoke(ctx, "/bandchain.v1.oracle.Service/MultiProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RequestCountProof(ctx context.Context, in *QueryRequestCountProofRequest, opts ...grpc.CallOption) (*QueryRequestCountProofResponse, error) {
	out := new(QueryRequestCountProofResponse)
	err := c.cc.Invoke(ctx, "/bandchain.v1.oracle.Service/RequestCountProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Proof(context.Context, *QueryProofRequest) (*QueryProofResponse, error)
	MultiProof(context.Context, *QueryMultiProofRequest) (*QueryMultiProofResponse, error)
	RequestCountProof(context.Context, *QueryRequestCountProofRequest) (*QueryRequestCountProofResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Proof(ctx context.Context, req *QueryProofRequest) (*QueryProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}
func (*UnimplementedServiceServer) MultiProof(ctx context.Context, req *QueryMultiProofRequest) (*QueryMultiProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiProof not implemented")
}
func (*UnimplementedServiceServer) RequestCountProof(ctx context.Context, req *QueryRequestCountProofRequest) (*QueryRequestCountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCountProof not implemented")
}

func RegisterServiceServer(s grpc1.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandchain.v1.oracle.Service/Proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Proof(ctx, req.(*QueryProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_MultiProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).MultiProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandchain.v1.oracle.Service/MultiProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).MultiProof(ctx, req.(*QueryMultiProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RequestCountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestCountProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RequestCountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandchain.v1.oracle.Service/RequestCountProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RequestCountProof(ctx, req.(*QueryRequestCountProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bandchain.v1.oracle.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proof",
			Handler:    _Service_Proof_Handler,
		},
		{
			MethodName: "MultiProof",
			Handler:    _Service_MultiProof_Handler,
		},
		{
			MethodName: "RequestCountProof",
			Handler:    _Service_RequestCountProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bandchain/v1/oracle/proof.proto",
}

func (m *QueryProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestIds) > 0 {
		dAtA3 := make([]byte, len(m.RequestIds)*10)
		var j2 int
		for _, num := range m.RequestIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintProof(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestCountProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestCountProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestCountProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRequestCountProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestCountProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestCountProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SingleProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmProofBytes) > 0 {
		i -= len(m.EvmProofBytes)
		copy(dAtA[i:], m.EvmProofBytes)
		i = encodeVarintProof(dAtA, i, uint64(len(m.EvmProofBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmProofBytes) > 0 {
		i -= len(m.EvmProofBytes)
		copy(dAtA[i:], m.EvmProofBytes)
		i = encodeVarintProof(dAtA, i, uint64(len(m.EvmProofBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmProofBytes) > 0 {
		i -= len(m.EvmProofBytes)
		copy(dAtA[i:], m.EvmProofBytes)
		i = encodeVarintProof(dAtA, i, uint64(len(m.EvmProofBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SingleProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockRelayProof != nil {
		{
			size, err := m.BlockRelayProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleDataProof != nil {
		{
			size, err := m.OracleDataProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockRelayProof != nil {
		{
			size, err := m.BlockRelayProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleDataMultiProof) > 0 {
		for iNdEx := len(m.OracleDataMultiProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleDataMultiProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockRelayProof != nil {
		{
			size, err := m.BlockRelayProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CountProof != nil {
		{
			size, err := m.CountProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OracleDataProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleDataProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleDataProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerklePaths) > 0 {
		for iNdEx := len(m.MerklePaths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MerklePaths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Version != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IAVLMerklePath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IAVLMerklePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IAVLMerklePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiblingHash) > 0 {
		i -= len(m.SiblingHash)
		copy(dAtA[i:], m.SiblingHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.SiblingHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubtreeVersion != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.SubtreeVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.SubtreeSize != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.SubtreeSize))
		i--
		dAtA[i] = 0x18
	}
	if m.SubtreeHeight != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.SubtreeHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDataOnRight {
		i--
		if m.IsDataOnRight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockRelayProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRelayProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRelayProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CommonEncodedVotePart != nil {
		{
			size, err := m.CommonEncodedVotePart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeaderMerkleParts != nil {
		{
			size, err := m.BlockHeaderMerkleParts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MultiStoreProof != nil {
		{
			size, err := m.MultiStoreProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiStoreProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStoreProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStoreProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferToUpgradeStoresMerkleHash) > 0 {
		i -= len(m.TransferToUpgradeStoresMerkleHash)
		copy(dAtA[i:], m.TransferToUpgradeStoresMerkleHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.TransferToUpgradeStoresMerkleHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AuthToFeegrantStoresMerkleHash) > 0 {
		i -= len(m.AuthToFeegrantStoresMerkleHash)
		copy(dAtA[i:], m.AuthToFeegrantStoresMerkleHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.AuthToFeegrantStoresMerkleHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GovToMintStoresMerkleHash) > 0 {
		i -= len(m.GovToMintStoresMerkleHash)
		copy(dAtA[i:], m.GovToMintStoresMerkleHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.GovToMintStoresMerkleHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SlashingToStakingStoresMerkleHash) > 0 {
		i -= len(m.SlashingToStakingStoresMerkleHash)
		copy(dAtA[i:], m.SlashingToStakingStoresMerkleHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.SlashingToStakingStoresMerkleHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParamsStoreMerkleHash) > 0 {
		i -= len(m.ParamsStoreMerkleHash)
		copy(dAtA[i:], m.ParamsStoreMerkleHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.ParamsStoreMerkleHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleIAVLStateHash) > 0 {
		i -= len(m.OracleIAVLStateHash)
		copy(dAtA[i:], m.OracleIAVLStateHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.OracleIAVLStateHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeaderMerkleParts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderMerkleParts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderMerkleParts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceAndProposerHash) > 0 {
		i -= len(m.EvidenceAndProposerHash)
		copy(dAtA[i:], m.EvidenceAndProposerHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.EvidenceAndProposerHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastResultsHash) > 0 {
		i -= len(m.LastResultsHash)
		copy(dAtA[i:], m.LastResultsHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.LastResultsHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NextValidatorHashAndConsensusHash) > 0 {
		i -= len(m.NextValidatorHashAndConsensusHash)
		copy(dAtA[i:], m.NextValidatorHashAndConsensusHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.NextValidatorHashAndConsensusHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastBlockIdAndOther) > 0 {
		i -= len(m.LastBlockIdAndOther)
		copy(dAtA[i:], m.LastBlockIdAndOther)
		i = encodeVarintProof(dAtA, i, uint64(len(m.LastBlockIdAndOther)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeNanoSecond != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.TimeNanoSecond))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeSecond != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.TimeSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionAndChainIdHash) > 0 {
		i -= len(m.VersionAndChainIdHash)
		copy(dAtA[i:], m.VersionAndChainIdHash)
		i = encodeVarintProof(dAtA, i, uint64(len(m.VersionAndChainIdHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonEncodedVotePart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonEncodedVotePart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonEncodedVotePart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedDataSuffix) > 0 {
		i -= len(m.SignedDataSuffix)
		copy(dAtA[i:], m.SignedDataSuffix)
		i = encodeVarintProof(dAtA, i, uint64(len(m.SignedDataSuffix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedDataPrefix) > 0 {
		i -= len(m.SignedDataPrefix)
		copy(dAtA[i:], m.SignedDataPrefix)
		i = encodeVarintProof(dAtA, i, uint64(len(m.SignedDataPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TMSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TMSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TMSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedTimestamp) > 0 {
		i -= len(m.EncodedTimestamp)
		copy(dAtA[i:], m.EncodedTimestamp)
		i = encodeVarintProof(dAtA, i, uint64(len(m.EncodedTimestamp)))
		i--
		dAtA[i] = 0x22
	}
	if m.V != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x18
	}
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintProof(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintProof(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestsCountProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestsCountProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestsCountProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerklePaths) > 0 {
		for iNdEx := len(m.MerklePaths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MerklePaths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Version != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovProof(uint64(m.RequestId))
	}
	if m.Height != 0 {
		n += 1 + sovProof(uint64(m.Height))
	}
	return n
}

func (m *QueryProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovProof(uint64(m.Height))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *QueryMultiProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestIds) > 0 {
		l = 0
		for _, e := range m.RequestIds {
			l += sovProof(uint64(e))
		}
		n += 1 + sovProof(uint64(l)) + l
	}
	return n
}

func (m *QueryMultiProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovProof(uint64(m.Height))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *QueryRequestCountProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRequestCountProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovProof(uint64(m.Height))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *SingleProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.EvmProofBytes)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *MultiProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.EvmProofBytes)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *CountProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.EvmProofBytes)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *SingleProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovProof(uint64(m.BlockHeight))
	}
	if m.OracleDataProof != nil {
		l = m.OracleDataProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if m.BlockRelayProof != nil {
		l = m.BlockRelayProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *MultiProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovProof(uint64(m.BlockHeight))
	}
	if len(m.OracleDataMultiProof) > 0 {
		for _, e := range m.OracleDataMultiProof {
			l = e.Size()
			n += 1 + l + sovProof(uint64(l))
		}
	}
	if m.BlockRelayProof != nil {
		l = m.BlockRelayProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *CountProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovProof(uint64(m.BlockHeight))
	}
	if m.CountProof != nil {
		l = m.CountProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if m.BlockRelayProof != nil {
		l = m.BlockRelayProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *OracleDataProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovProof(uint64(m.Version))
	}
	if len(m.MerklePaths) > 0 {
		for _, e := range m.MerklePaths {
			l = e.Size()
			n += 1 + l + sovProof(uint64(l))
		}
	}
	return n
}

func (m *IAVLMerklePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDataOnRight {
		n += 2
	}
	if m.SubtreeHeight != 0 {
		n += 1 + sovProof(uint64(m.SubtreeHeight))
	}
	if m.SubtreeSize != 0 {
		n += 1 + sovProof(uint64(m.SubtreeSize))
	}
	if m.SubtreeVersion != 0 {
		n += 1 + sovProof(uint64(m.SubtreeVersion))
	}
	l = len(m.SiblingHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *BlockRelayProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiStoreProof != nil {
		l = m.MultiStoreProof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if m.BlockHeaderMerkleParts != nil {
		l = m.BlockHeaderMerkleParts.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if m.CommonEncodedVotePart != nil {
		l = m.CommonEncodedVotePart.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovProof(uint64(l))
		}
	}
	return n
}

func (m *MultiStoreProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleIAVLStateHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.ParamsStoreMerkleHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.SlashingToStakingStoresMerkleHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.GovToMintStoresMerkleHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.AuthToFeegrantStoresMerkleHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.TransferToUpgradeStoresMerkleHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *BlockHeaderMerkleParts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionAndChainIdHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovProof(uint64(m.Height))
	}
	if m.TimeSecond != 0 {
		n += 1 + sovProof(uint64(m.TimeSecond))
	}
	if m.TimeNanoSecond != 0 {
		n += 1 + sovProof(uint64(m.TimeNanoSecond))
	}
	l = len(m.LastBlockIdAndOther)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.NextValidatorHashAndConsensusHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.LastResultsHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.EvidenceAndProposerHash)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *CommonEncodedVotePart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedDataPrefix)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.SignedDataSuffix)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *TMSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovProof(uint64(m.V))
	}
	l = len(m.EncodedTimestamp)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *RequestsCountProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovProof(uint64(m.Count))
	}
	if m.Version != 0 {
		n += 1 + sovProof(uint64(m.Version))
	}
	if len(m.MerklePaths) > 0 {
		for _, e := range m.MerklePaths {
			l = e.Size()
			n += 1 + l + sovProof(uint64(l))
		}
	}
	return n
}

func sovProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProof(x uint64) (n int) {
	return sovProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SingleProofResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProof
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestIds = append(m.RequestIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProof
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProof
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProof
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RequestIds) == 0 {
					m.RequestIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProof
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestIds = append(m.RequestIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &MultiProofResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestCountProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestCountProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestCountProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestCountProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestCountProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestCountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CountProofResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &SingleProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmProofBytes = append(m.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmProofBytes == nil {
				m.EvmProofBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &MultiProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmProofBytes = append(m.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmProofBytes == nil {
				m.EvmProofBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &CountProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmProofBytes = append(m.EvmProofBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmProofBytes == nil {
				m.EvmProofBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleDataProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleDataProof == nil {
				m.OracleDataProof = &OracleDataProof{}
			}
			if err := m.OracleDataProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockRelayProof == nil {
				m.BlockRelayProof = &BlockRelayProof{}
			}
			if err := m.BlockRelayProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleDataMultiProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleDataMultiProof = append(m.OracleDataMultiProof, &OracleDataProof{})
			if err := m.OracleDataMultiProof[len(m.OracleDataMultiProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockRelayProof == nil {
				m.BlockRelayProof = &BlockRelayProof{}
			}
			if err := m.BlockRelayProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountProof == nil {
				m.CountProof = &RequestsCountProof{}
			}
			if err := m.CountProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRelayProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockRelayProof == nil {
				m.BlockRelayProof = &BlockRelayProof{}
			}
			if err := m.BlockRelayProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleDataProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleDataProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleDataProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerklePaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerklePaths = append(m.MerklePaths, &IAVLMerklePath{})
			if err := m.MerklePaths[len(m.MerklePaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IAVLMerklePath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IAVLMerklePath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IAVLMerklePath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDataOnRight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDataOnRight = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeHeight", wireType)
			}
			m.SubtreeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			m.SubtreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeVersion", wireType)
			}
			m.SubtreeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiblingHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiblingHash = append(m.SiblingHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SiblingHash == nil {
				m.SiblingHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRelayProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRelayProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRelayProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiStoreProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiStoreProof == nil {
				m.MultiStoreProof = &MultiStoreProof{}
			}
			if err := m.MultiStoreProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaderMerkleParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeaderMerkleParts == nil {
				m.BlockHeaderMerkleParts = &BlockHeaderMerkleParts{}
			}
			if err := m.BlockHeaderMerkleParts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEncodedVotePart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonEncodedVotePart == nil {
				m.CommonEncodedVotePart = &CommonEncodedVotePart{}
			}
			if err := m.CommonEncodedVotePart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &TMSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStoreProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStoreProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStoreProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleIAVLStateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleIAVLStateHash = append(m.OracleIAVLStateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OracleIAVLStateHash == nil {
				m.OracleIAVLStateHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsStoreMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamsStoreMerkleHash = append(m.ParamsStoreMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParamsStoreMerkleHash == nil {
				m.ParamsStoreMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingToStakingStoresMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashingToStakingStoresMerkleHash = append(m.SlashingToStakingStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SlashingToStakingStoresMerkleHash == nil {
				m.SlashingToStakingStoresMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovToMintStoresMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GovToMintStoresMerkleHash = append(m.GovToMintStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GovToMintStoresMerkleHash == nil {
				m.GovToMintStoresMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthToFeegrantStoresMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthToFeegrantStoresMerkleHash = append(m.AuthToFeegrantStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthToFeegrantStoresMerkleHash == nil {
				m.AuthToFeegrantStoresMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferToUpgradeStoresMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferToUpgradeStoresMerkleHash = append(m.TransferToUpgradeStoresMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TransferToUpgradeStoresMerkleHash == nil {
				m.TransferToUpgradeStoresMerkleHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeaderMerkleParts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderMerkleParts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderMerkleParts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionAndChainIdHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionAndChainIdHash = append(m.VersionAndChainIdHash[:0], dAtA[iNdEx:postIndex]...)
			if m.VersionAndChainIdHash == nil {
				m.VersionAndChainIdHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
			}
			m.TimeSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanoSecond", wireType)
			}
			m.TimeNanoSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanoSecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockIdAndOther", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockIdAndOther = append(m.LastBlockIdAndOther[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBlockIdAndOther == nil {
				m.LastBlockIdAndOther = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorHashAndConsensusHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorHashAndConsensusHash = append(m.NextValidatorHashAndConsensusHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextValidatorHashAndConsensusHash == nil {
				m.NextValidatorHashAndConsensusHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastResultsHash = append(m.LastResultsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastResultsHash == nil {
				m.LastResultsHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceAndProposerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceAndProposerHash = append(m.EvidenceAndProposerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EvidenceAndProposerHash == nil {
				m.EvidenceAndProposerHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonEncodedVotePart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonEncodedVotePart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonEncodedVotePart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedDataPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedDataPrefix = append(m.SignedDataPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedDataPrefix == nil {
				m.SignedDataPrefix = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedDataSuffix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedDataSuffix = append(m.SignedDataSuffix[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedDataSuffix == nil {
				m.SignedDataSuffix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TMSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TMSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TMSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTimestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTimestamp = append(m.EncodedTimestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedTimestamp == nil {
				m.EncodedTimestamp = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestsCountProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestsCountProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestsCountProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerklePaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerklePaths = append(m.MerklePaths, &IAVLMerklePath{})
			if err := m.MerklePaths[len(m.MerklePaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProof = fmt.Errorf("proto: unexpected end of group")
)
