syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "tss/v1beta1/tss.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";

// Msg defines the tss Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);
  // SubmmitDKGRound1 submit dkg for compute round1.
  rpc SubmitDKGRound1(MsgSubmitDKGRound1) returns (MsgSubmitDKGRound1Response);
  // SubmitDKGRound2 submit dkg for compute round 2.
  rpc SubmitDKGRound2(MsgSubmitDKGRound2) returns (MsgSubmitDKGRound2Response);
}

// MsgCreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  // members is a list of members in this group.
  repeated string members = 1;
  // threshold is a minimum number of members required to produce a
  // signature.
  uint64 threshold = 2;
  // sender is the signer of this message.
  string sender = 3;
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}

// MsgSubmitDKGRound1 is the Msg/SubmitDKGRound1 request type.
message MsgSubmitDKGRound1 {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // round1_data is all data that require to handle round1.
  Round1Data round1_data = 2 [ (gogoproto.nullable) = false ];
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

// MsgSubmitDKGRound1Response is the Msg/SubmitDKGRound1 response type.
message MsgSubmitDKGRound1Response {}

// MsgSubmitDKGRound2 is the Msg/SubmitDKGRound2 request type.
message MsgSubmitDKGRound2 {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // round2_data is is all data that require to handle round2.
  Round2Data round2_data = 2 [ (gogoproto.nullable) = false ];
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

message MsgSubmitDKGRound2Response {}
