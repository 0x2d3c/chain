syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "tss/v1beta1/tss.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";


// Msg defines the tss Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);
  // SubmmitDKGRound1 submmit dkg for compute round 1.
  rpc SubmitDKGRound1(MsgSubmitDKGRound1) returns (MsgSubmitDKGRound1Response);
  // SubmmitDKGRound2 submmit dkg for compute round 2.
  rpc SubmitDKGRound2(MsgSubmitDKGRound2) returns (MsgSubmitDKGRound2Response);
  // Complain submmit proof for complain malicious.
  rpc Complain(MsgComplain) returns (MsgComplainResponse);
  // Confirm submit own signature for proof that it's can derive the secret.
  rpc Confirm(MsgConfirm) returns (MsgConfirmResponse);
}

// CreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  // members is a list of members in this group
  repeated string members = 1;
  // threshold is a minimum number of signers required to produce a group
  // signature.
  uint64 threshold = 2;
  // sender is an account address of message sender.
  string sender = 3;
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}


message MsgSubmitDKGRound1 {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // coefficients_commit is commitment of all coefficients.
  repeated bytes coefficients_commit = 3 [
    (gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Points"
  ];
  // one_time_pub_key is a one-time used public key for sending secret shares.
  bytes one_time_pub_key = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // a0_sig is a proof of knowledge on a0.
  bytes a0_sig = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  // one_time_sig is a proof of knowledge on the OneTimePublicKey.
  bytes one_time_sig = 6 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  // sender is an account address of message sender.
  string member = 7;
}

message MsgSubmitDKGRound1Response {}


message MsgSubmitDKGRound2 {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // round2_shares is a list of Elgamal encryption of f_i(j).
  Round2Share round2_share = 2;
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

message MsgSubmitDKGRound2Response {}

message MsgComplain {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // complains is a list of Complains. 
  repeated Complain complains  = 2;
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

message MsgComplainResponse {}

message MsgConfirm {
  // group_id is ID of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // ownPubKeySig is a signature of the member_i on its own PubKey to confirm
  // that the member is able to derive the PubKey.
  bytes ownPubKeySig  = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

message MsgConfirmResponse {}
