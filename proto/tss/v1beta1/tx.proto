syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "tss/v1beta1/tss.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";

// Msg defines the tss Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);
  // SubmitDKGRound1 submits dkg for computing round 1.
  rpc SubmitDKGRound1(MsgSubmitDKGRound1) returns (MsgSubmitDKGRound1Response);
  // SubmitDKGRound2 submits dkg for computing round 2.
  rpc SubmitDKGRound2(MsgSubmitDKGRound2) returns (MsgSubmitDKGRound2Response);
  // Complain submits proof for complaining malicious.
  rpc Complain(MsgComplain) returns (MsgComplainResponse);
  // Confirm submits own signature for proof that it can derive the secret.
  rpc Confirm(MsgConfirm) returns (MsgConfirmResponse);
  // SubmitDEs submits list of pre-commits DE for signing process.
  rpc SubmitDEs(MsgSubmitDEs) returns (MsgSubmitDEsResponse);
  // RequestSignature submits a general message to be signed by a specific group
  rpc RequestSignature(MsgRequestSignature) returns (MsgRequestSignatureResponse);
  // Sign submits signature on task participant need to do
  rpc Sign(MsgSign) returns (MsgSignResponse);
}

// MsgCreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  // members is a list of members in this group.
  repeated string members = 1;
  // threshold is a minimum number of members required to produce a signature.
  uint64 threshold = 2;
  // sender is the signer of this message.
  string sender = 3;
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}

// MsgSubmitDKGRound1 is the Msg/SubmitDKGRound1 request type.
message MsgSubmitDKGRound1 {
  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // round1_info is all data that require to handle round 1.
  Round1Info round1_info = 2 [(gogoproto.nullable) = false];
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

// MsgSubmitDKGRound1Response is the Msg/SubmitDKGRound1 response type.
message MsgSubmitDKGRound1Response {}

// MsgSubmitDKGRound2 is the Msg/SubmitDKGRound2 request type.
message MsgSubmitDKGRound2 {
  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // round2_info is all data that require to handle round 2.
  Round2Info round2_info = 2 [(gogoproto.nullable) = false];
  // member is the signer of this message. Must be the member of this group.
  string member = 3;
}

message MsgSubmitDKGRound2Response {}

message MsgComplain {
  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // complaints is a list of complains.
  repeated Complaint complaints = 3 [(gogoproto.nullable) = false];
  // member is the signer of this message. Must be the member of this group.
  string member = 4;
}

message MsgComplainResponse {}

message MsgConfirm {
  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // member_id is ID of the member.
  uint64 member_id = 2
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // own_pub_key_sig is a signature of the member_i on its own PubKey to confirm
  // that the member is able to derive the PubKey.
  bytes own_pub_key_sig = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // member is the signer of this message. Must be the member of this group.
  string member = 4;
}

message MsgConfirmResponse {}

// MsgSubmitDEs is a message used to submit a list of DEs.
message MsgSubmitDEs {
  // des is a list of DE objects.
  repeated DE des = 1 [(gogoproto.customname) = "DEs", (gogoproto.nullable) = false];
  // member is the signer of this submission message.
  string member = 2;
}

message MsgSubmitDEsResponse {}

// MsgRequestSignature is a request message used for initiating the signing process.
message MsgRequestSignature {
  // group_id is the unique identifier of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // message is the data that needs to be signed.
  bytes message = 2;
  // sender is the requester of the signing process.
  string sender = 3;
}

message MsgRequestSignatureResponse {}

// MsgSign is a message used to sign the data.
message MsgSign {
  // signing_id is the unique identifier of the signing process.
  uint64 signing_id = 1 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  // member_id is the unique identifier of the group member.
  uint64 member_id = 2
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // signature is the signature produced by the member.
  bytes signature = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // member is the signer of this signing message, who must be a member of the group.
  string member = 4;
}

message MsgSignResponse {}
