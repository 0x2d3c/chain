syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "tss/v1beta1/tss.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";

service Query {
  // Group queries group details
  rpc Group(QueryGroupRequest) returns (QueryGroupResponse) {
    option (google.api.http).get = "/tss/v1beta1/groups/{group_id}";
  }

  // Members queries all members in this group.
  rpc Members(QueryMembersRequest) returns (QueryMembersResponse) {
    option (google.api.http).get = "/tss/v1beta1/groups/{group_id}/members";
  }

  // IsGrantee queries grant of account on this granter.
  rpc IsGrantee(QueryIsGranteeRequest) returns (QueryIsGranteeResponse) {
    option (google.api.http).get = "/tss/v1beta1/is_grantee/{granter}/{grantee}";
  }

  // DE queries all de for this address.
  rpc DE(QueryDERequest) returns (QueryDEResponse) {
    option (google.api.http).get = "/tss/v1beta1/de-list/{address}";
  }

  // PendingSignings queries all pending signs for this address.
  rpc PendingSignings(QueryPendingSigningsRequest) returns (QueryPendingSigningsResponse) {
    option (google.api.http).get = "/tss/v1beta1/pending_signs/{address}";
  }

  // Signings queries signing details.
  rpc Signings(QuerySigningsRequest) returns (QuerySigningsResponse) {
    option (google.api.http).get = "/tss/v1beta1/signings/{id}";
  }
}

// QueryGroupRequest is the request type for the Query/Group RPC method
message QueryGroupRequest {
  // group_id defines the unique id of the group.
  uint64 group_id = 1;
}

// QueryGroupResponse is the response type for the Query/Group RPC method
message QueryGroupResponse {
  Group                         group                  = 1 [(gogoproto.nullable) = false];
  bytes                         dkg_context            = 2 [(gogoproto.customname) = "DKGContext"];
  repeated Member               members                = 3 [(gogoproto.nullable) = false];
  repeated Round1Info           round1_infos           = 4 [(gogoproto.nullable) = false];
  repeated Round2Info           round2_infos           = 5 [(gogoproto.nullable) = false];
  repeated ComplaintsWithStatus complaints_with_status = 6 [(gogoproto.nullable) = false];
  repeated Confirm              confirms               = 7 [(gogoproto.nullable) = false];
}

// QueryMembersRequest is the request type for the Query/Members RPC method
message QueryMembersRequest {
  // group_id defines the unique id of the group.
  uint64 group_id = 1;
}

// QueryMembersResponse is the response type for the Query/Members RPC method
message QueryMembersResponse {
  repeated Member members = 1 [(gogoproto.nullable) = false];
}

// QueryIsSignerRequest is request type for the Query/IsSigner RPC method.
message QueryIsGranteeRequest {
  // Granter is a granter address
  string granter = 1;
  // Grantee is a candidate account
  string grantee = 2;
}

// QueryIsGranteeResponse is response type for the Query/IsSigner RPC method.
message QueryIsGranteeResponse {
  // IsGrantee is true if this account has been granted by granter
  bool is_grantee = 1;
}

message QueryDERequest {
  string address = 1;
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDEResponse {
  repeated DE des = 1 [(gogoproto.customname) = "DEs", (gogoproto.nullable) = false];
  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPendingSigningsRequest {
  string address = 1;
}

message QueryPendingSigningsResponse {
  repeated Signing pending_signings = 1 [(gogoproto.nullable) = false];
}

message QuerySigningsRequest {
  uint64 id = 1;
}

message QuerySigningsResponse {
  Signing                   signing                     = 1;
  repeated PartialSignature received_partial_signatures = 2 [(gogoproto.nullable) = false];
}
