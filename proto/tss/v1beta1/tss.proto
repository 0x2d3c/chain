syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";
option (gogoproto.equal_all) = true;

message Group {
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  uint64 size = 2;
  uint64 threshold = 3;
  bytes pub_key = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  GroupStatus status = 5;
}

message Round1Data {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  repeated bytes coefficients_commit = 2 [
    (gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Points"
  ];
  bytes one_time_pub_key = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes a0_sig = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  bytes one_time_sig = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

message Round2Data {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  repeated bytes encrypted_secret_shares = 2 [
    (gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Scalars"
  ];
}

message DE {
  bytes pub_d = 1 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes pub_e = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
}

message DEQueue {
  uint64 head = 1;
  uint64 tail = 2;
}

message Signing {
  uint64 signing_id = 1 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  uint64 group_id = 2 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  repeated AssignedMember assigned_members = 3 [ (gogoproto.nullable) = false ];
  bytes message = 4;
  bytes group_pub_nonce = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes bytes = 6;
  bytes sig = 7 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

message AssignedMember {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ]; 
  string member = 2;
  bytes pub_d = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes pub_e = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes pub_nonce = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
}

message PendingSigns {
  repeated uint64 signing_ids = 1;
}

message Member {
  string address = 1;
  bytes pub_key = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bool isMalicious = 3;
}

enum GroupStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  GROUP_STATUS_UNSPECIFIED = 0;
  GROUP_STATUS_ROUND_1 = 1;
  GROUP_STATUS_ROUND_2 = 2;
  GROUP_STATUS_ROUND_3 = 3;
  GROUP_STATUS_ACTIVE = 4;
  GROUP_STATUS_FALLEN = 5;
}

message Confirm {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  bytes own_pub_key_sig = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

message Complain {
  uint64 i = 1 [ (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID" ];
  uint64 j = 2 [ (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID" ];
  bytes key_sym = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  bytes sig = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  bytes nonce_sym = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
}

enum ComplainStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  COMPLAIN_STATUS_UNSPECIFIED = 0;
  COMPLAIN_STATUS_SUCCESS = 1;
  COMPLAIN_STATUS_FAILED= 2;
}

message ComplainWithStatus {
  Complain complain = 1 [ (gogoproto.nullable) = false ];
  ComplainStatus complain_status = 2;
}

message ComplainsWithStatus {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  repeated ComplainWithStatus complains_with_status = 2 [ (gogoproto.nullable) = false ];
}

message PartialSig {
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  bytes sig = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}
