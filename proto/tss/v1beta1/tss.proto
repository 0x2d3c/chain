syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";
option (gogoproto.equal_all) = true;

// Group is a type representing a participant group in a Distributed Key Generation or signing process.
message Group {
  // group_id is the unique identifier of the group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // size is the number of members in the group.
  uint64 size = 2;
  // threshold is the minimum number of members needed to generate a valid signature.
  uint64 threshold = 3;
  // pub_key is the public key generated by the group after successful completion of the DKG process.
  bytes pub_key = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // status represents the current stage of the group in the DKG or signing process.
  GroupStatus status = 5;
  // create_time is the time when the group was created.
  google.protobuf.Timestamp create_time = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // expiry_time is the time when the group will be dissolved if it has not finished its process.
  google.protobuf.Timestamp expiry_time = 7 [(gogoproto.stdtime) = true];
}

// Round1Info contains all necessary information for handling round 1 of the DKG process.
message Round1Info {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  // coefficients_commit is a list of commitments to the coefficients of the member's secret polynomial.
  repeated bytes coefficients_commit = 2 [
    (gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Points"
  ];
  // one_time_pub_key is the one-time public key used by the member to encrypt secret shares.
  bytes one_time_pub_key = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // a0_sig is the member's signature on the first coefficient of its secret polynomial.
  bytes a0_sig = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  // one_time_sig is the member's signature on its one-time public key.
  bytes one_time_sig = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

// Round2Info contains all necessary information for handling round 2 of the DKG process.
message Round2Info {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  // encrypted_secret_shares is a list of secret shares encrypted under the public keys of other members.
  repeated bytes encrypted_secret_shares = 2 [
    (gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Scalars"
  ];
}

// DE contains the public parts of a member's decryption and encryption keys.
message DE {
  // pub_d is the public value of own commitment (D).
  bytes pub_d = 1 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // pub_e is the public value of own commitment (E).
  bytes pub_e = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
}

// DEQueue is a simple queue data structure for holding DE objects.
message DEQueue {
  // head is the index of the first element in the queue.
  uint64 head = 1;
  // tail is the index of the last element in the queue.
  uint64 tail = 2;
}

// Signing contains all necessary information for handling a signing request.
message Signing {
  // signing_id is the unique identifier of the signing process.
  uint64 signing_id = 1 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  // group_id is the unique identifier of the group.
  uint64 group_id = 2 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // assigned_members is a list of members assigned to the signing process.
  repeated AssignedMember assigned_members = 3 [ (gogoproto.nullable) = false ];
  // message is the message to be signed.
  bytes message = 4;
  // group_pub_nonce is the public nonce generated by the group for this signing process.
  bytes group_pub_nonce = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // commitment is the commitment to the group's signature on the message.
  bytes commitment = 6;
  // signature is the group's signature on the message.
  bytes signature = 7 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
  // request_time is the time when the signing request was made.
  google.protobuf.Timestamp request_time = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // expiry_time is the time when the signing request will expire if not completed.
  google.protobuf.Timestamp expiry_time = 9 [(gogoproto.stdtime) = true];
}

// AssignedMember is a type representing a member that has been assigned to a signing process.
message AssignedMember {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ]; 
  // member is the human-readable name of the member.
  string member = 2;
  // pub_d is the public part of a member's decryption key.
  bytes pub_d = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // pub_e is the public part of a member's encryption key.
  bytes pub_e = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // pub_nonce is the public nonce of the member for the signing process.
  bytes pub_nonce = 5 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
}

// PendingSignings is a list of all signing processes that are currently pending.
message PendingSignings {
  // signing_ids is a list of identifiers for the signing processes.
  repeated uint64 signing_ids = 1;
}

// Member is a type representing a member of the group.
message Member {
  // address is the address of the member.
  string address = 1;
  // pub_key is the public key of the member.
  bytes pub_key = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // is_malicious is a boolean flag indicating whether the member is considered malicious.
  bool is_malicious = 3;
}

// GroupStatus is an enumeration of the possible statuses of a group.
enum GroupStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // GROUP_STATUS_UNSPECIFIED is the status of a group that has not been specified.
  GROUP_STATUS_UNSPECIFIED = 0;
  // GROUP_STATUS_ROUND_1 is the status of a group that is in the first round of the protocol.
  GROUP_STATUS_ROUND_1 = 1;
  // GROUP_STATUS_ROUND_2 is the status of a group that is in the second round of the protocol.
  GROUP_STATUS_ROUND_2 = 2;
  // GROUP_STATUS_ROUND_3 is the status of a group that is in the third round of the protocol.
  GROUP_STATUS_ROUND_3 = 3;
  // GROUP_STATUS_ACTIVE is the status of a group that is actively participating in the protocol.
  GROUP_STATUS_ACTIVE = 4;
  // GROUP_STATUS_FALLEN is the status of a group that has fallen out of the protocol.
  GROUP_STATUS_FALLEN = 5;
}

// Confirm is a message type used to confirm participation in the protocol.
message Confirm {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  // own_pub_key_sig is a signature over the member's own public key.
  bytes own_pub_key_sig = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

// Complaint is a message type used to issue a complaint against a member.
message Complaint {
  // complainer is the member issuing the complaint.
  uint64 complainer = 1 [ (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID" ];
  // complainant is the member against whom the complaint is issued.
  uint64 complainant = 2 [ (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID" ];
  // key_sym is a symmetric key between complainer's private key and complainant's public key.
  bytes key_sym = 3 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.PublicKey"
  ];
  // signature is the complaint signature that can do a symmetric key validation and complaint verification.
  bytes signature = 4 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.ComplaintSignature"
  ];
}

// ComplaintStatus represents the status of a complaint.
enum ComplaintStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // COMPLAINT_STATUS_UNSPECIFIED represents an undefined status of the complaint.
  COMPLAINT_STATUS_UNSPECIFIED = 0;
  // COMPLAINT_STATUS_SUCCESS represents a successful complaint.
  COMPLAINT_STATUS_SUCCESS = 1;
  // COMPLAINT_STATUS_FAILED represents a failed complaint.
  COMPLAINT_STATUS_FAILED= 2;
}

// ComplaintWithStatus contains information about a complaint with its status.
message ComplaintWithStatus {
  // complaint is the information about the complaint.
  Complaint complaint = 1 [ (gogoproto.nullable) = false ];
  // complaint_status is the status of the complaint.
  ComplaintStatus complaint_status = 2;
}

// ComplaintsWithStatus contains information about multiple complaints and their status
// from a single member.
message ComplaintsWithStatus {
  // member_id is the identifier of the member filing the complaints.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  // complaints_with_status is the list of complaints with their status from this member.
  repeated ComplaintWithStatus complaints_with_status = 2 [ (gogoproto.nullable) = false ];
}

// PartialSignature contains information about a member's partial signature.
message PartialSignature {
  // member_id is the identifier of the member providing the partial signature.
  uint64 member_id = 1 [
    (gogoproto.customname) = "MemberID",
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"
  ];
  // signature is the partial signature provided by this member.
  bytes signature = 2 [
    (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"
  ];
}

