syntax = "proto3";
package tssmember.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "tssmember/v1beta1/genesis.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tssmember/types";

// Msg defines the tssmember Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);

  // ReplaceGroup replaces the group with another group.
  rpc ReplaceGroup(MsgReplaceGroup) returns (MsgReplaceGroupResponse);

  // UpdateParams updates the x/tssmember parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tssmember/MsgCreateGroup";

  // members is a list of members in this group.
  repeated string members = 1;
  // threshold is a minimum number of members required to produce a signature.
  uint64 threshold = 2;
  // fee is the tokens that will be paid per signing.
  repeated cosmos.base.v1beta1.Coin fee = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}

// MsgReplaceGroup is the Msg/ReplaceGroup request type.
message MsgReplaceGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tssmember/MsgReplaceGroup";

  // current_group_id is the ID of the group that will be replaced.
  uint64 current_group_id = 1 [
    (gogoproto.customname) = "CurrentGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // new_group_id is the ID of the group that want to replace, and subsequently remove this group.
  uint64 new_group_id = 2 [
    (gogoproto.customname) = "NewGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // exec_time is the time that will be substituted in place of the group.
  google.protobuf.Timestamp exec_time = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgReplaceGroupResponse is the Msg/ReplaceGroup response type.
message MsgReplaceGroupResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tssmember/MsgUpdateParams";

  // params defines the x/tss parameters to update.
  Params params = 1 [(gogoproto.nullable) = false];
  // authority is the address of the governance account.
  string authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
