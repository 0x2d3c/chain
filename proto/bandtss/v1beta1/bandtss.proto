syntax = "proto3";
package bandtss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "tss/v1beta1/tss.proto";

option go_package            = "github.com/bandprotocol/chain/v2/x/bandtss/types";
option (gogoproto.equal_all) = true;

// Member maintains member information for monitoring their liveness activity.
message Member {
  option (gogoproto.equal) = true;

  // address is the address of the member.
  string address = 1;
  // is_active is a flag to indicate whether a member is active or not.
  bool is_active = 2;
  // since is a block timestamp when a member has been activated/deactivated/jailed
  google.protobuf.Timestamp since = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // last_active is a latest block timestamp when a member is active
  google.protobuf.Timestamp last_active = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// Signing is a bandtss signing information.
message Signing {
  option (gogoproto.equal) = true;

  // id is the unique identifier of the bandtss signing.
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "SigningID"];
  // fee is the total tokens that will be paid for this bandtss signing.
  repeated cosmos.base.v1beta1.Coin fee = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // requester is the address of requester who paid for the Bandtss signing.
  string requester = 3;
  // current_group_id is the id of the current group.
  uint64 current_group_id = 4 [
    (gogoproto.customname) = "CurrentGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // current_group_signing_id is a tss signing ID of a current group.
  uint64 current_group_signing_id = 5 [
    (gogoproto.customname) = "CurrentGroupSigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  // replacing_group_id is the id of the replacing group.
  uint64 replacing_group_id = 6 [
    (gogoproto.customname) = "ReplacingGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // replacing_group_signing_id is a tss signing ID of the replacing group.
  uint64 replacing_group_signing_id = 7 [
    (gogoproto.customname) = "ReplacingGroupSigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
}

// SigningResult is a bandtss signing result from querying bandtss signing information.
message SigningResult {
  // signing is the tss signing result.
  .tss.v1beta1.Signing signing = 1 [(gogoproto.nullable) = false];
  // evm_signature is the signature in the format that can use directly in EVM.
  .tss.v1beta1.EVMSignature evm_signature = 2 [(gogoproto.customname) = "EVMSignature"];
  // received_partial_signatures is a list of received partial signatures.
  repeated .tss.v1beta1.PartialSignature received_partial_signatures = 3 [(gogoproto.nullable) = false];
}
