syntax = "proto3";
package tunnel.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/tunnel/types";

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "tunnel/v1beta1/params.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

import "tunnel/v1beta1/types.proto";
import "feeds/v1beta1/feeds.proto";

// Service definition for Msg.
service Msg {
  // CreateTunnel is a RPC method to create a new tunnel.
  rpc CreateTunnel(MsgCreateTunnel) returns (MsgCreateTunnelResponse);

  // UpdateParams is a RPC method to update parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateTunnel is the transaction message to create a new tunnel.
message MsgCreateTunnel {
  repeated SignalInfo    SignalInfos        = 1 [(gogoproto.nullable) = false];
  google.protobuf.Any    route              = 2 [(cosmos_proto.accepts_interface) = "TunnelRoute"];
  feeds.v1beta1.FeedType feed_type          = 3;
  repeated cosmos.base.v1beta1.Coin deposit = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgCreateTunnelResponse is the response type for the Msg/CreateTunnel RPC method.
message MsgCreateTunnelResponse {
  string tunnel_id = 1;
}

// MsgUpdateParams is the transaction message to update parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tunnel/MsgUpdateParams";

  // Authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Params is the x/tunnel parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
message MsgUpdateParamsResponse {}
