syntax = "proto3";
package tunnel.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/tunnel/types";

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "tunnel/v1beta1/params.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

import "tunnel/v1beta1/tunnel.proto";
import "feeds/v1beta1/feeds.proto";

// Service definition for Msg.
service Msg {
  // CreateTunnel is a RPC method to create a new tunnel.
  rpc CreateTunnel(MsgCreateTunnel) returns (MsgCreateTunnelResponse);

  // EditTunnel is a RPC method to edit a tunnel.
  rpc EditTunnel(MsgEditTunnel) returns (MsgEditTunnelResponse);

  // ActivateTunnel is a RPC method to activate a tunnel.
  rpc ActivateTunnel(MsgActivateTunnel) returns (MsgActivateTunnelResponse);

  // DeactivateTunnel is a RPC method to deactivate a tunnel.
  rpc DeactivateTunnel(MsgDeactivateTunnel) returns (MsgDeactivateTunnelResponse);

  // ManualTriggerTunnel is a RPC method to manually trigger a tunnel.
  rpc ManualTriggerTunnel(MsgManualTriggerTunnel) returns (MsgManualTriggerTunnelResponse);

  // UpdateParams is a RPC method to update parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateTunnel is the transaction message to create a new tunnel.
message MsgCreateTunnel {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "tunnel/MsgCreateTunnel";

  // signal_infos is the list of signal infos.
  repeated SignalInfo signal_infos = 1 [(gogoproto.nullable) = false];
  // interval is the interval for delivering the signal prices.
  uint64 interval = 2;
  // route is the route for delivering the signal prices
  google.protobuf.Any route = 3 [(cosmos_proto.accepts_interface) = "Route"];
  // feed_type is the type of feed data.
  feeds.v1beta1.FeedType feed_type = 4;
  // deposit is the deposit required to create a tunnel.
  repeated cosmos.base.v1beta1.Coin deposit = 5
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // creator is the address of the creator.
  string creator = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateTunnelResponse is the response type for the Msg/CreateTunnel RPC method.
message MsgCreateTunnelResponse {
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
}

// MsgEditTunnel is the transaction message to edit a tunnel.
message MsgEditTunnel {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "tunnel/MsgEditTunnel";

  // tunnel_id is the ID of the tunnel to edit.
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
  // signal_infos is the list of signal infos.
  repeated SignalInfo signal_infos = 2 [(gogoproto.nullable) = false];
  // interval is the interval for delivering the signal prices.
  uint64 interval = 3;
  // creator is the address of the creator.
  string creator = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgEditTunnelResponse is the response type for the Msg/EditTunnel RPC method.
message MsgEditTunnelResponse {}

// MsgActivateTunnel is the transaction message to activate a tunnel.
message MsgActivateTunnel {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "tunnel/MsgActivateTunnel";

  // tunnel_id is the ID of the tunnel to activate.
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
  // creator is the address of the creator.
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgActivateTunnelResponse is the response type for the Msg/ActivateTunnel RPC method.
message MsgActivateTunnelResponse {}

// MsgDeactivateTunnel is the transaction message to deactivate a tunnel.
message MsgDeactivateTunnel {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "tunnel/MsgDeactivateTunnel";

  // tunnel_id is the ID of the tunnel to deactivate.
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
  // creator is the address of the creator.
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgDeactivateTunnelResponse is the response type for the Msg/DeactivateTunnel RPC method.
message MsgDeactivateTunnelResponse {}

// MsgManualTriggerTunnel is the transaction message to manually trigger a tunnel.
message MsgManualTriggerTunnel {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "tunnel/MsgManualTriggerTunnel";

  // tunnel_id is the ID of the tunnel to manually trigger.
  uint64 tunnel_id = 1 [(gogoproto.customname) = "TunnelID"];
  // creator is the address of the creator.
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgManualTriggerTunnelResponse is the response type for the Msg/ManualTrigger RPC method.
message MsgManualTriggerTunnelResponse {}

// MsgUpdateParams is the transaction message to update parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tunnel/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params is the x/tunnel parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
message MsgUpdateParamsResponse {}
