syntax = "proto3";
package tunnel.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/tunnel/types";

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "tunnel/v1beta1/params.proto";
import "tunnel/v1beta1/tunnel.proto";

// Query service defines the gRPC querier service.
service Query {
  // Params is a RPC method that returns all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tunnel/v1beta1/params";
  }

  // Tunnels is a RPC method that returns all tunnels.
  rpc Tunnels(QueryTunnelsRequest) returns (QueryTunnelsResponse) {
    option (google.api.http).get = "/tunnel/v1beta1/tunnels";
  }

  // Tunnel is a RPC method that returns a tunnel by its ID.
  rpc Tunnel(QueryTunnelRequest) returns (QueryTunnelResponse) {
    option (google.api.http).get = "/tunnel/v1beta1/tunnels/{tunnel_id}";
  }

  // Packets is a RPC method that returns all packets of a tunnel.
  rpc Packets(QueryPacketsRequest) returns (QueryPacketsResponse) {
    option (google.api.http).get = "/tunnel/v1beta1/tunnels/{tunnel_id}/packets";
  }

  // Packet is a RPC method that returns a packet by its tunnel ID and nonce.
  rpc Packet(QueryPacketRequest) returns (QueryPacketResponse) {
    option (google.api.http).get = "/tunnel/v1beta1/tunnels/{tunnel_id}/packets/{nonce}";
  }
}

// TunnelStatusFilter defines a filter for tunnel status.
enum TunnelStatusFilter {
  option (gogoproto.goproto_enum_prefix) = false;

  // TUNNEL_STATUS_FILTER_UNSPECIFIED defines an unspecified status.
  TUNNEL_STATUS_FILTER_UNSPECIFIED = 0;
  // TUNNEL_STATUS_FILTER_ACTIVE defines an active tunnel.
  TUNNEL_STATUS_FILTER_ACTIVE = 1;
  // TUNNEL_STATUS_FILTER_INACTIVE defines an inactive tunnel.
  TUNNEL_STATUS_FILTER_INACTIVE = 2;
}

// QueryTunnelsRequest is the request type for the Query/Tunnel RPC method.
message QueryTunnelsRequest {
  // is_active is a flag to filter active tunnels.
  TunnelStatusFilter is_active = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTunnelsResponse is the response type for the Query/Tunnel RPC method.
message QueryTunnelsResponse {
  // Tunnels is a list of tunnels.
  repeated Tunnel tunnels = 1;
  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTunnelRequest is the request type for the Query/Tunnel RPC method.
message QueryTunnelRequest {
  // tunnel_id is the ID of the tunnel to query.
  uint64 tunnel_id = 1;
}

// QueryTunnelResponse is the response type for the Query/Tunnel RPC method.
message QueryTunnelResponse {
  // tunnel is the tunnel with the given ID.
  Tunnel tunnel = 1 [(gogoproto.nullable) = false];
}

// QueryPacketsRequest is the request type for the Query/Packets RPC method.
message QueryPacketsRequest {
  // tunnel_id is the ID of the tunnel to query packets.
  uint64 tunnel_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryPacketsResponse is the response type for the Query/Packets RPC method.
message QueryPacketsResponse {
  // packets is a list of packets.
  repeated Packet packets = 1;
  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPacketRequest is the request type for the Query/Packet RPC method.
message QueryPacketRequest {
  // tunnel_id is the ID of the tunnel to query packets.
  uint64 tunnel_id = 1;
  // nonce is the nonce of the packet to query.
  uint64 nonce = 2;
}

// QueryPacketResponse is the response type for the Query/Packet RPC method.
message QueryPacketResponse {
  // Packet is the packet with the given tunnel ID and nonce.
  Packet packet = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params is the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}
